<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Simon Ghyselincks</title>
<link>https://chipnbits.github.io/content/eosc555/</link>
<atom:link href="https://chipnbits.github.io/content/eosc555/index.xml" rel="self" type="application/rss+xml"/>
<description>A personal page for Simon Ghyselincks</description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Tue, 17 Sep 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>Lecture 3: Image Denoising with Gradient Descent and Early Stopping</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture3/</link>
  <description><![CDATA[ 




<section id="derivations-of-linear-algebra-gradients" class="level2">
<h2 class="anchored" data-anchor-id="derivations-of-linear-algebra-gradients">Derivations of Linear Algebra Gradients</h2>
<p>Often times we wish to find the gradient of a multi-variable function that is formulated as a linear algebra operation. In this case there are some useful “vector” derivatives and rules that can simplify the process of calculating more complex expressions. The gradient with respect to vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is generally denoted as <img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D"> or alternatively <img src="https://latex.codecogs.com/png.latex?%5Cpartial_%7B%5Cmathbf%7Bx%7D%7D">, somewhat of an abuse of notation.</p>
<section id="a-warmup" class="level4">
<h4 class="anchored" data-anchor-id="a-warmup">1. A Warmup</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20a%5E%5Ctop%20x%20=%20%5Csum_i%20a_i%20x_i"></p>
<p>This is a vector dotproduct and the gradient is simply the vector <img src="https://latex.codecogs.com/png.latex?a">. There is a subtlety here in that the vector is usually transposed to be a column vector, but this is not always the case. Some people in the field of statistics prefer to use row vector, this can cause some confusion. The general convention is a column vector.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20=%20a"></p>
</section>
<section id="matrix-vector-multiplication" class="level4">
<h4 class="anchored" data-anchor-id="matrix-vector-multiplication">2. Matrix Vector Multiplication</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20Ax"></p>
<p>Based on the previous process we are expecting to potentially get <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop"> as the gradient, however the transpose does not occur in this case because we are not returning a vector that needs to be reshaped into a column form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20=%20A"></p>
</section>
<section id="quadratic-forms" class="level4">
<h4 class="anchored" data-anchor-id="quadratic-forms">3. Quadratic Forms</h4>
<p>Often we may encounter quadratic linear functions that are of the form: <img src="https://latex.codecogs.com/png.latex?%20%5Cphi(x)%20=%20x%5E%5Ctop%20A%20x"></p>
<p>One way to determine the gradient is to expand the expression and evaluate for a single <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x_i%7D"> term. This method can be found at <a href="https://www.cs.ubc.ca/~schmidtm/Courses/340-F16/linearQuadraticGradients.pdf">Mark Schmidt Notes</a> Instead we can apply a chain rule for matrix differentiation that is based on the product rule for differentiation. The chain rule for matrix differentiation is as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%20f(g,h)%7D%7Bd%20x%7D%20=%20%5Cfrac%7Bd%20(g(x)%5E%5Ctop)%7D%7Bd%20x%7D%20%5Cfrac%7B%5Cpartial%20f(g,h)%7D%7B%5Cpartial%20g%7D%20+%20%5Cfrac%7Bd%20(h(x)%5E%5Ctop)%7D%7Bd%20x%7D%20%5Cfrac%7B%5Cpartial%20f(g,h)%7D%7B%5Cpartial%20h%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%20%7Balign*%7D%0A%5Cphi(x)%20&amp;=%20x%5E%5Ctop%20A%20x%20%5C%5C%0A%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20(x%5E%5Ctop%20A%20x)%20%5C%5C%0A&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20(A%20x)%20=%20%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20y%5C%5C%0A&amp;=%20(%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x)%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20y%20+%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20y%5E%5Ctop%20%5Cnabla_%7B%5Cmathbf%7By%7D%7D%20x%5E%5Ctop%20y%5C%5C%0A&amp;=%20I%20y%20+%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20(x%5E%5Ctop%20A%5E%5Ctop)%20x%5C%5C%0A&amp;=%20(A%20x)%20+%20A%5E%5Ctop%20x%5C%5C%0A&amp;=%20(A%20+%20A%5E%5Ctop)%20x%0A%5Cend%20%7Balign*%7D%0A"></p>
<p>This fits with the generalization for a scalar quadratic form where we end up with <img src="https://latex.codecogs.com/png.latex?(cx%5E2)'%20=%20(c%20+%20c%5E%5Ctop)x%20=%202cx"> where <img src="https://latex.codecogs.com/png.latex?c"> is a scalar.</p>
</section>
<section id="hadamard-product" class="level4">
<h4 class="anchored" data-anchor-id="hadamard-product">4. Hadamard Product</h4>
<p>Another form of interest is the hadamard product of two vectors. <img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20(Ax)%5E2%20=%20Ax%20%5Codot%20Ax"></p>
<p>For this one let <img src="https://latex.codecogs.com/png.latex?y=Ax"> and we can index each element of the vector <img src="https://latex.codecogs.com/png.latex?y"> as <img src="https://latex.codecogs.com/png.latex?y_i%20=%20%5Csum_j%20A_%7Bij%7D%20x_j">. The hadamard product is a vector <img src="https://latex.codecogs.com/png.latex?z"> where <img src="https://latex.codecogs.com/png.latex?z_i%20=%20y_i%5E2">, we can compute the jacobian since now we are taking the gradient with respect to a vector.</p>
<p>The Jacobian will contain the partial derivatives:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5Cvec%7Bz%7D%7D%7Bd%5Cvec%7Bx%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_n%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_n%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_n%7D%20%5Cend%7Bbmatrix%7D%0A"></p>
<p>If we can recover this then we have the gradient of the hadamard product.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Az_i%20&amp;=%20y_i%5E2%20=%20%5Cleft(%20%5Csum_j%20A_%7Bij%7D%20x_j%20%5Cright)%5E2%5C%5C%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x_j%7D%20y_i%5E2%20&amp;=%202%20y_i%20%5Cfrac%7B%5Cpartial%20y_i%7D%7B%5Cpartial%20x_j%7D%20=%202%20y_i%20A_%7Bij%7D%5C%5C%0A%5Cfrac%7Bd%5Cvec%7Bz%7D%7D%7Bd%5Cvec%7Bx%7D%7D%20&amp;=%202%20%5Cbegin%7Bbmatrix%7D%20y_1%20A_%7B1j%7D%20&amp;%20y_1%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_1%20A_%7Bnj%7D%20%5C%5C%0Ay_2%20A_%7B1j%7D%20&amp;%20y_2%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_2%20A_%7Bnj%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Ay_n%20A_%7B1j%7D%20&amp;%20y_n%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_n%20A_%7Bnj%7D%20%5Cend%7Bbmatrix%7D%5C%5C%0A&amp;=%202%20%5Ccdot%20%5Ctext%7Bdiag%7D(%5Cvec%7By%7D)A%5C%5C%0A&amp;=%202%20%5Ccdot%20%5Ctext%7Bdiag%7D(Ax)A%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="least-squares-gradient" class="level4">
<h4 class="anchored" data-anchor-id="least-squares-gradient">5. Least Squares Gradient</h4>
<p>We look at taking the gradient of the expansion of least squares to find the gradient for this optimization objective.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20%5Cfrac%7B1%7D%7B2%7D%20%7C%7CAx%20-%20b%7C%7C%5E2%20=%20%5Cfrac%7B1%7D%7B2%7D%20(x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20-%202%20b%5E%5Ctop%20A%20x%20+%20b%5E%5Ctop%20b)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign*%7D%0A%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20(x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20-%202%20b%5E%5Ctop%20A%20x%20+%20b%5E%5Ctop%20b)%20%5Cright)%5C%5C%0A&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20%5Cright)%20-%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20b%5E%5Ctop%20A%20x%20%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7B2%7D%20(A%5E%5Ctop%20A%20+%20A%5E%5Ctop%20A)%20x%20-%20A%5E%5Ctop%20b%5C%5C%0A&amp;=%20A%5E%5Ctop%20A%20x%20-%20A%5E%5Ctop%20b%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Returning to the first-order optimality condition we have: <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20x%20=%20A%5E%5Ctop%20b"></p>
<p>At which point it is in question if <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible. The invertibility of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is determined by the rank of <img src="https://latex.codecogs.com/png.latex?A">. The rank of A for a non-square matrix is the number of independent columns. If we examine <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20Ax%20=%200"> then we see that this is only true where the range of <img src="https://latex.codecogs.com/png.latex?A"> is in the nullspace of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop">. But <img src="https://latex.codecogs.com/png.latex?N(A%5E%5Ctop)%20=%20R(A)%5E%5Cperp"> so they are orthogonal subspaces and will never coincide unless <img src="https://latex.codecogs.com/png.latex?Ax=0">. So then <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20x%20=%200"> implies that <img src="https://latex.codecogs.com/png.latex?Ax%20=%200"> which means that if the null space of <img src="https://latex.codecogs.com/png.latex?A=%5C%7B0%5C%7D"> then the null space of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20=%20%5C%7B0%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible. Since <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is symmetric and positive definite, it is invertible.</p>
<p><img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible <img src="https://latex.codecogs.com/png.latex?%5Ciff"> <img src="https://latex.codecogs.com/png.latex?A"> is full rank, that is all the columns are independent. For non-square matrices, an <img src="https://latex.codecogs.com/png.latex?m%3En"> matrix that is wide will trivially not satisfy this condition. A tall matrix <img src="https://latex.codecogs.com/png.latex?m%3Cn"> will satisfy the condition if the columns are independent.</p>
</section>
</section>
<section id="gradient-descent-analysis" class="level2">
<h2 class="anchored" data-anchor-id="gradient-descent-analysis">Gradient Descent Analysis</h2>
<p>The standard form of the gradient descent algorithm comes from the field of optimization and can be written as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x_%7Bk+1%7D%20=%20x_k%20-%20%5Calpha%20%5Cnabla_x%20%5Cphi(x_k)"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is the learning rate, which can be dependent on the problem and the gradient. Substituting the gradient of the least squares problem we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0Ax_%7Bk+1%7D%20&amp;=%20x_k%20-%20%5Calpha%20(A%5E%5Ctop%20A%20x_k%20-%20A%5E%5Ctop%20b)%5C%5C%0A%5Cfrac%7Bx_%7Bk+1%7D-x_k%7D%7B%5Calpha%7D%20&amp;=%20A%5E%5Ctop%20b%20-%20A%5E%5Ctop%20A%20x_k%5C%5C%0A%5Clim_%7B%5Calpha%20%5Cto%200%7D%20%5Cfrac%7Bx_%7Bk+1%7D-x_k%7D%7B%5Calpha%7D%20&amp;=%20%5Cfrac%7Bdx%7D%7Bdt%7D%20=%20A%5E%5Ctop%20(b%20-A%20x),%20%5Cquad%20x(0)%20=%20x_0%0A%5Cend%7Balign%7D%0A"></p>
<p>This ODE is the continuous version of the gradient descent algorithm, also known as the <em>gradient flow</em>. Since this a linear first-order ODE we can solve it analytically. The general method for a linear system ODE would be to find the homogeneous solution and the particular solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0Ax'%20+%20A%5E%5Ctop%20A%20x%20&amp;=%20A%5E%5Ctop%20b%5C%5C%0A%5Ctext%7BGuess:%7D%20x%20&amp;=%20v%20e%5E%7B%5Clambda%20t%7D%5C%5C%0A%5Clambda%20v%20e%5E%7B%5Clambda%20t%7D%20+%20A%5E%5Ctop%20A%20v%20e%5E%7B%5Clambda%20t%7D%20&amp;=%20A%5E%5Ctop%20b%20e%5E%7B%5Clambda%20t%7D%5C%5C%0A%5Clambda%20v%20+%20A%5E%5Ctop%20A%20v%20&amp;=%200%20%5Cqquad%20%5Ctext%7BHomogeneous%7D%5C%5C%0A(%5Clambda%20I%20+%20A%5E%5Ctop%20A)%20v%20&amp;=%200%5C%5C%0A%5Clambda%20&amp;=%20%5Ctext%7Beigenvalues%20of%20%7D%20A%5E%5Ctop%20A,%20%5Cquad%20v%20=%20%5Ctext%7Beigenvectors%20of%20%7D%20A%5E%5Ctop%20A%0A%5Cend%7Balign%7D%0A"></p>
<p>Before continuing further with this line, we can see that the solutions will be closely related to the SVD because it contains the information on these eigenvalues and vectors. So we can try to solve the ODE with the SVD.</p>
<section id="solving-the-ode-with-svd" class="level4">
<h4 class="anchored" data-anchor-id="solving-the-ode-with-svd">Solving the ODE with SVD</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AA%20&amp;=%20U%20%5CSigma%20V%5E%5Ctop%5C%5C%0AA%5ETA%20&amp;=%20V%20%5CSigma%5E2%20V%5E%5Ctop%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7Dx%20&amp;=%20V%20%5CSigma%20U%5E%5Ctop%20b%20-%20V%20%5CSigma%5E2%20V%5E%5Ctop%20x%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>Now let <img src="https://latex.codecogs.com/png.latex?z%20=%20V%5E%5Ctop%20x"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20b%20=%20U%20%5E%20%5Ctop%20b"> then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cfrac%7Bd%7D%7Bdt%7D%20(V%5E%5Ctop%20x)%20&amp;=%20%5CSigma%20%5Chat%20b%20-%20%5CSigma%5E2%20(V%5E%5Ctop%20x)%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20z%20&amp;=%20%5CSigma%20%5Chat%20b%20-%20%5CSigma%5E2%20z%5C%5C%0Az'%20+%20%5CSigma%5E2%20z%20&amp;=%20%5CSigma%20%5Chat%20b%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>At this stage since everything has been diagonalized, all of the equations are decoupled and independent so we can solve for the <img src="https://latex.codecogs.com/png.latex?%5Clambda_i"> cases independently. We find the homogeneous <img src="https://latex.codecogs.com/png.latex?z_h"> and particular <img src="https://latex.codecogs.com/png.latex?z_p"> solutions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Az_h'%20+%20%5Clambda%5E2%20z_h%20&amp;=%200%5C%5C%0Az_h%20&amp;=%20c%20e%5E%7B-%5Clambda%5E2%20t%7D%5C%5C%0Az_p'%20+%20%5Clambda%5E2%20z_p%20&amp;=%20%5Clambda%20%5Chat%20b%5C%5C%0Az_p%20&amp;=%20D%20%5Chat%20b%20%5C%5C%0A%5Clambda%5E2%20D%20%5Chat%20b%20&amp;=%20%5Clambda%20%5Chat%20b%5C%5C%0AD%20&amp;=%20%5Cfrac%7B1%7D%7B%5Clambda%7D%5C%5C%0Az_p%20&amp;=%20%5Cfrac%7B1%7D%7B%5Clambda%7D%20%5Chat%20b%0A%5Cend%7Balign%7D%0A"></p>
<p>So the general solution for the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component is:</p>
<p><img src="https://latex.codecogs.com/png.latex?z_i%20=%20c_i%20e%5E%7B-%5Clambda_i%5E2%20t%7D%20+%20%5Cfrac%7B1%7D%7B%5Clambda_i%7D%20%5Chat%20b_i"></p>
<p>Supposing that we start at <img src="https://latex.codecogs.com/png.latex?x=0"> then we have <img src="https://latex.codecogs.com/png.latex?z=0"> at all elements and can solve the coefficients <img src="https://latex.codecogs.com/png.latex?c_i">:</p>
<p><img src="https://latex.codecogs.com/png.latex?c_i%20=%20-%5Cfrac%7B1%7D%7B%5Clambda_i%7D%20%5Chat%20b_i"></p>
<p>Then putting it all back together with all the equations we have that</p>
<p><img src="https://latex.codecogs.com/png.latex?Z%20=%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20%5Chat%20b"></p>
<p>Substituting back in for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?b"> we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20V%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20U%5E%5Ctop%20b"></p>
<p>If we stare at this long enough it begins to look a lot like the pseudoinverse of <img src="https://latex.codecogs.com/png.latex?A"> from earlier:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20V%20%5CSigma%5E%7B-1%7D%20U%5E%5Ctop%20b"> except in this case there is a time dependence. At the limit as <img src="https://latex.codecogs.com/png.latex?t%20%5Crightarrow%20%5Cinfty"> we have that the exponential term goes to zero and we are left with the pseudoinverse solution. This is a nice way to see that the pseudoinverse is the limit of the gradient descent algorithm. What we may be interested in is what happens at earlier stages since each decay term is dependent on the eigenvalues.</p>
<p>For a simple matrix problem we can create a matrix and plot out the time evolution of the diagonals of the matrix that are of interest. In a sense, we have singular values that are time evolving at different rates.</p>
<div id="6b11b3da" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seed for reproducibility</span></span>
<span id="cb1-6">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 5x10 matrix A with random values</span></span>
<span id="cb1-8">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector b of size 5 with random values</span></span>
<span id="cb1-10">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the SVD of A</span></span>
<span id="cb1-13">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(A, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time dependent vector of the singular values</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> St(t):</span>
<span id="cb1-17">    Sdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[:, np.newaxis]</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Sdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Sdim</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the time evolution of the values and plot them on a log scale y axis with a linear time x axis</span></span>
<span id="cb1-21">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-22">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[np.newaxis, :]</span>
<span id="cb1-23"></span>
<span id="cb1-24">singular_vals_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> St(T)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the plot</span></span>
<span id="cb1-27">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color palette</span></span>
<span id="cb1-30">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husl"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(S))</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the singular values and their asymptotes</span></span>
<span id="cb1-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(S)):</span>
<span id="cb1-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the time evolution of each singular value</span></span>
<span id="cb1-35">    sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>singular_vals_t[i, :], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$1/S_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$ '</span>)</span>
<span id="cb1-36">    </span>
<span id="cb1-37">    Sinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>S[i]</span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a horizontal asymptote at the original singular value</span></span>
<span id="cb1-40">    plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Sinv, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-41">    </span>
<span id="cb1-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the asymptote with the singular value</span></span>
<span id="cb1-43">    plt.text(t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, Sinv, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Sinv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>)</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configure plot aesthetics</span></span>
<span id="cb1-46">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-47">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inverse Singular Vals'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-48">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Evolution of Pseudo Inverse in Gradient Flow'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-49">plt.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inverse Singular Vals'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>)</span>
<span id="cb1-50">plt.xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb1-51">plt.tight_layout()</span>
<span id="cb1-52">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/pseudo_inverse_time_evolution.png'</span>)</span>
<span id="cb1-53">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-2-output-1.png" width="703" height="374" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So we can use early stopping to prevent the flow from reaching the optimal point, a very useful technique. When it comes to inverse theory, often we are not interested in the optimal solution, but more interested in getting somewhere close that is not too noisy. This method differs from the thresholded pseudoinverse from the previous lecture, in that it allows some blending of the the smaller singular values, but their propensity for blowing up is controlled by the time exponent and early stopping.</p>
</section>
<section id="example-for-image-recovery-using-analytic-solution" class="level3">
<h3 class="anchored" data-anchor-id="example-for-image-recovery-using-analytic-solution">Example for Image Recovery using Analytic Solution</h3>
<p>Referring back to the problem of estimating the original image based on a noisy point spread function. We can monitor the time evolution of the estimate using gradient flow. Some code below defines the problem again, with recovery of the SVD decomposition for the 32x32 image, which will be used to solve the ODE for the gradient flow.</p>
<div id="2dd1f6f1" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#matplotlib.use('TkAgg')</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.fft</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> gaussianConv(nn.Module):</span>
<span id="cb2-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch module that applies a Gaussian convolution to an input image using </span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a parameterized Gaussian Point Spread Function (PSF). The PSF is derived </span></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from a covariance matrix and the derivatives of the Gaussian are computed </span></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for edge detection.</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C (torch.Tensor): Inverse of covariance matrix used to define the shape of the Gaussian.</span></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        t (float, optional): Scaling factor for the Gaussian, default is np.exp(5).</span></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n0 (float, optional): Scaling factor for the original PSF, default is 1.</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nx (float, optional): Scaling factor for the derivative along the x-axis, default is 1.</span></span>
<span id="cb2-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ny (float, optional): Scaling factor for the derivative along the y-axis, default is 1.</span></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-37">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(gaussianConv, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-38"></span>
<span id="cb2-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C</span>
<span id="cb2-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb2-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n0</span>
<span id="cb2-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx</span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny</span>
<span id="cb2-44"></span>
<span id="cb2-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb2-46">        P, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.psfGauss(image.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], image.device)</span>
<span id="cb2-47">        P_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(P, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb2-48">        S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(P_shifted)</span>
<span id="cb2-49">        I_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(image)</span>
<span id="cb2-50">        B_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> I_fft</span>
<span id="cb2-51">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.real(torch.fft.ifft2(B_fft))</span>
<span id="cb2-52"></span>
<span id="cb2-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> B</span>
<span id="cb2-54"></span>
<span id="cb2-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> psfGauss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb2-56">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb2-57">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a meshgrid of (X, Y) coordinates</span></span>
<span id="cb2-60">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb2-61">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb2-62">        X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb2-63">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb2-64">        Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb2-65"></span>
<span id="cb2-66">        cx, cy, cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-67"></span>
<span id="cb2-68">        PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y))</span>
<span id="cb2-69">        PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(PSF.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>())</span>
<span id="cb2-70"></span>
<span id="cb2-71">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-72">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb2-73">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-74">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-75">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-76">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-77"></span>
<span id="cb2-78">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdx.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb2-79">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdy.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb2-80"></span>
<span id="cb2-81">        PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdx, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-82">        PSFdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdy, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-83"></span>
<span id="cb2-84">        PSF_combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdy</span>
<span id="cb2-85"></span>
<span id="cb2-86">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb2-87"></span>
<span id="cb2-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PSF_combined, center</span>
<span id="cb2-89"></span>
<span id="cb2-90">dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb2-91">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dim, dim)</span>
<span id="cb2-92">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-93">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-94"></span>
<span id="cb2-95">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb2-96">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-97"></span>
<span id="cb2-98">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.flatten()))</span>
<span id="cb2-99">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n,n)</span>
<span id="cb2-100"></span>
<span id="cb2-101">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb2-103">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb2-104">    e_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb2-105">    e_ij[:,:, i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-106">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(e_ij)</span>
<span id="cb2-107">    Amat[:, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.flatten()</span>
<span id="cb2-108">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-109"></span>
<span id="cb2-110">U, S, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat.to(torch.float64))</span>
<span id="cb2-111">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span></code></pre></div>
</details>
</div>
<p>Now that we have the matrix form of the forward operator <code>Amat</code> defined, along with the forward result <code>b</code> and the the decomposition <code>U, S, V</code> we can run the pseudo-inverse gradient flow method as before. So in this case we will be computing:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x%20=%20V%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20U%5E%5Ctop%20b"></p>
<p>Since these represents an evolution over time, an animation can be created to show the time evolution of the image recovery, along with the effect of continuing into a region where noise is amplified and dominates.</p>
<p>Recalling the original and distorted images with a small amount of noise <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> are as follows:</p>
<div id="b91990c7" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb3-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb3-5">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb3-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">b_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.randn_like(b)</span>
<span id="cb3-9">plt.imshow(b_noisy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distorted Image'</span>)</span>
<span id="cb3-11">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb3-12">plt.tight_layout()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-4-output-1.png" width="549" height="288" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The distorted image has had much of its intensity spread out diffusely, so it is only visible as a faint outline. The noise is also visible in the image as a grainy texture. The gradient flow method will attempt to recover the original image from this distorted image.</p>
<div id="d6c89c1c" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> animation</span>
<span id="cb4-2"></span>
<span id="cb4-3">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb4-4">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb4-5">b_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.randn_like(b_flat)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_xhat(t):</span>
<span id="cb4-8">    Sinv_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S</span>
<span id="cb4-9">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(Sinv_t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.T</span>
<span id="cb4-10">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_noisy</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> xhat</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time evolution parameters</span></span>
<span id="cb4-14">num_frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb4-15">t_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.logspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, num_frames)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the plot</span></span>
<span id="cb4-18">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-19">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.imshow(np.zeros((dim, dim)), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-20">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Evolution of Pseudo-Inverse Gradient Flow'</span>)</span>
<span id="cb4-21">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the error text</span></span>
<span id="cb4-24">error_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb4-25">                     verticalalignment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb4-26"></span>
<span id="cb4-27">time_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb4-28">                        verticalalignment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize containers to track min error and best time</span></span>
<span id="cb4-31">tracking <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Animation update function</span></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_frame(t):</span>
<span id="cb4-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute time-dependent singular values</span></span>
<span id="cb4-36">    Sinv_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S</span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat at time t</span></span>
<span id="cb4-38">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(Sinv_t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.t()</span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the image estimate x(t)</span></span>
<span id="cb4-40">    xt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_noisy</span>
<span id="cb4-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the relative error</span></span>
<span id="cb4-42">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xt) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.norm(x_flat)</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update min_error and best_t if current error is lower</span></span>
<span id="cb4-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> error.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>]:</span>
<span id="cb4-46">        tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error.item()</span>
<span id="cb4-47">        tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb4-48"></span>
<span id="cb4-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape to image dimensions</span></span>
<span id="cb4-50">    x_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xt.reshape(dim, dim).detach().numpy()</span>
<span id="cb4-51"></span>
<span id="cb4-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the image data</span></span>
<span id="cb4-53">    im.set_data(x_image)</span>
<span id="cb4-54"></span>
<span id="cb4-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the error text</span></span>
<span id="cb4-56">    error_text.set_text(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Relative Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-57">    time_text.set_text(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-58"></span>
<span id="cb4-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [im, error_text, time_text]</span>
<span id="cb4-60"></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the animation</span></span>
<span id="cb4-62">ani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> animation.FuncAnimation(fig, update_frame, frames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_vals, blit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-63"></span>
<span id="cb4-64">ani.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/gradient_flow.gif'</span>, writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pillow'</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-65">plt.close(fig)</span></code></pre></div>
</details>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/imgs/gradient_flow.gif" class="img-fluid" width="600"></p>
<p>And we saved the best time that was discovered for the recovery (with prior knowledge of the ground truth). So we can inspect that image, this was the best that we could do with the gradient flow method.</p>
<div id="b5b40469" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">best_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_xhat(tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>]).reshape(dim, dim).detach().numpy()</span>
<span id="cb5-2"></span>
<span id="cb5-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb5-4">plt.imshow(best_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_img)), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Best Reconstruction at t=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best_t"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Relative Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_error"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-6">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-6-output-1.png" width="463" height="501" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="recovery-of-the-adjoint-operator-using-autograd" class="level2">
<h2 class="anchored" data-anchor-id="recovery-of-the-adjoint-operator-using-autograd">Recovery of the Adjoint Operator using Autograd</h2>
<p>Returning to the problem from last lecture,</p>


</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>Adjoint</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture3/</guid>
  <pubDate>Tue, 17 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture3/imgs/gradient_flow.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Lecture 2: Image Denoising with SVD</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture2/</link>
  <description><![CDATA[ 




<section id="image-denoising-and-deblurring" class="level1">
<h1>Image Denoising and Deblurring</h1>
<p>The motivation for the exercise comes from a real world problem. The Hubble space telescope when launched had a defect in its mirror. This defect caused the images to be blurred. The problem was initially addressed by using signal processing techniques to remove the aberrations from the images.</p>
<section id="point-spread-function" class="level3">
<h3 class="anchored" data-anchor-id="point-spread-function">Point Spread Function</h3>
<p>For such an image processing problem, we can consider the continuous incoming light as striking a 2D mirror that distorts the light, followed by a 2D sensor that captures the light. In this context we suppose that we have a noise kernel or a point spread function (PSF) that describes the distortion of the light at the mirror. The point spread function, being a convolution kernel, behaves as a Green’s function for the system in the continuous case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bb%7D(x,y)%20=%20%5Cint_%7B%5Cmathcal%7BX%7D%7D%20%5Cint_%7B%5Cmathcal%7BY%7D%7D%20%5Cvec%7BG%7D(x%20-%20x',%20y%20-%20y')%20%5Cvec%7Bu%7D(x',y')%20%5C,%20dx'%20dy'%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D(x,y)"> is the blurred image data that is recovered at the sensor, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D(x',y')"> is the true image data, and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7BG%7D(x,y)"> is the point spread function.</p>
<p>In the special case that the point spread function is <img src="https://latex.codecogs.com/png.latex?%5Cdelta(x-x',y-y')">, then the image data is not distorted and the sensor captures the true image data. However our experiment is to consider cases where there could be even severe distortions and see how this impacts the proposition of recovering the true image data, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D(x',y')"> from our sensor data, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D(x,y)">.</p>
<section id="discrete-psf" class="level4">
<h4 class="anchored" data-anchor-id="discrete-psf">Discrete PSF</h4>
<p>The discrete analog of the continuous PSF can be more conveniently treated with we essentially flatten the the 2D mesh into a 1D vector, a common operation for signal processing. The unflattened case we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20b_%7Bij%7D%20=%20%5Csum_%7Bk=1%7D%5E%7Bn%7D%20%5Csum_%7Bl=1%7D%5E%7Bm%7D%20%5CDelta%20x%20%5CDelta%20y%20G(x_i%20-%20x_k,%20y_j%20-%20y_l)%20u_%7Bkl%7D%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?b"> is the blurred image data at the sensor, <img src="https://latex.codecogs.com/png.latex?u"> is the true image data, and <img src="https://latex.codecogs.com/png.latex?G"> is the discrete point spread function. If we flatten the 2D mesh into a 1D vector we can represent this as a 1D convolution operation: <img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bb%7D%20=%20%5Cvec%7BG%7D%20*%20%5Cvec%7Bu%7D%20"></p>
<p>Since this is a convolution operation, we can process it much more quickly by leveraging the convolution theorem.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cmathcal%7BF%7D(%5Cvec%7Bb%7D)%20&amp;=%20%5Cmathcal%7BF%7D(%5Cvec%7BG%7D%20*%20%5Cvec%7Bu%7D)%20%5C%5C%0A%5Cmathcal%7BF%7D(%5Cvec%7Bb%7D)%20&amp;=%20%5Cmathcal%7BF%7D(%5Cvec%7BG%7D)%20%5Cmathcal%7BF%7D(%5Cvec%7Bu%7D)%20%5C%5C%0A%5Cvec%7Bb%7D%20&amp;=%20%5Cmathcal%7BF%7D%5E%7B-1%7D(%5Cmathcal%7BF%7D(%5Cvec%7BG%7D)%20%5Codot%20%5Cmathcal%7BF%7D(%5Cvec%7Bu%7D))%0A%5Cend%7Balign%7D%0A"></p>
<p>The <img src="https://latex.codecogs.com/png.latex?%5Codot"> hadamard product is element-wise multiplication, the discrete analog of multiplication of two functions except over an array.</p>
</section>
</section>
<section id="matrix-representation-of-convolution-operation" class="level3">
<h3 class="anchored" data-anchor-id="matrix-representation-of-convolution-operation">Matrix Representation of Convolution Operation</h3>
<p>If we flatten the data down into a 1D vector then it is possible to construct a matrix operator that performs the convolution. This is a Toeplitz matrix, a matrix where each descending diagonal from left to right is constant, so that the row vectors represent a sliding window of the convolution kernel. We can flatten out the PSF and construct the matrix using it as the first row entry and then shifting the PSF to the right to fill out the rest of the rows.</p>
</section>
</section>
<section id="code-implementation" class="level1">
<h1>Code Implementation</h1>
<div id="5fb0add1" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#matplotlib.use('TkAgg')</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.fft</span></code></pre></div>
</details>
</div>
<p>We start off by introducing a point spread function within the torch framework. In the case we work with a parameterized gaussian kernel.</p>
<section id="gaussian-example" class="level3">
<h3 class="anchored" data-anchor-id="gaussian-example">Gaussian Example</h3>
<p>The multivariate extension of the gaussian function is given by: <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cexp%5Cleft(-%5Cfrac%7B1%7D%7B2%7D%20(x-%5Cmu)%5ET%20%5CSigma%5E%7B-1%7D%20(x-%5Cmu)%5Cright)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is the mean vector, <img src="https://latex.codecogs.com/png.latex?x"> is a position vector, and <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is the covariance matrix. The covariance matrix essentially encodes the eigenvectors and corresponding postive eigenvalues of the matrix. The covariance matrix is always symmetric and positive definite. In the context of the code, we are using <img src="https://latex.codecogs.com/png.latex?C"> as the inverse of the covariance matrix and working with a <img src="https://latex.codecogs.com/png.latex?%5Cmu=0"> value.</p>
<div id="mv-plot" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.ndimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convolve</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> multivariate_gaussian(pos, mean, cov):</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return the multivariate Gaussian distribution on array pos without using einsum notation."""</span></span>
<span id="cb2-5">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-6">    diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean</span>
<span id="cb2-7">    cov_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(cov)</span>
<span id="cb2-8">    </span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the exponent</span></span>
<span id="cb2-10">    diff_cov_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> cov_inv</span>
<span id="cb2-11">    exponent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> diff_cov_inv, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12">    </span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the normalization factor</span></span>
<span id="cb2-14">    norm_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.linalg.det(cov))</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the Gaussian function</span></span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.exp(exponent) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> norm_factor</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the grid limits and resolution</span></span>
<span id="cb2-20">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>]</span>
<span id="cb2-21">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dstack((X, Y))</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb2-24">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-25">eigenvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example eigenvalues</span></span>
<span id="cb2-26">principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example principal axis</span></span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the principal axis</span></span>
<span id="cb2-29">principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.linalg.norm(principal_axis)</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the covariance matrix</span></span>
<span id="cb2-32">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(eigenvalues)</span>
<span id="cb2-33">orthogonal_complement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>principal_axis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], principal_axis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb2-34">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack((principal_axis, orthogonal_complement))</span>
<span id="cb2-35">cov <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Q.T</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Gaussian function over the grid</span></span>
<span id="cb2-38">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multivariate_gaussian(pos, mean, cov)</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the Sobel operators for x and y derivatives</span></span>
<span id="cb2-41">Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-42">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb2-43">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb2-44"></span>
<span id="cb2-45">Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-46">                [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-47">                [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the Sobel filters to compute the derivatives</span></span>
<span id="cb2-50">Zdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convolve(Z, Kdx, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'constant'</span>, cval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-51">Zdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convolve(Z, Kdy, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'constant'</span>, cval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-52"></span>
<span id="cb2-53"></span>
<span id="cb2-54">plt.contourf(X, Y, Z, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb2-55">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian Distribution'</span>)</span>
<span id="cb2-56">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-57">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-58">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-59">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.png'</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, bbox_inches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tight'</span>)</span>
<span id="cb2-60"></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gaussian and its derivatives</span></span>
<span id="cb2-62">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>))</span>
<span id="cb2-63"></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gaussian</span></span>
<span id="cb2-65">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-66">plt.contourf(X, Y, Z, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb2-67">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian Distribution'</span>)</span>
<span id="cb2-68">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-69">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-70">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-71"></span>
<span id="cb2-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the derivative in x</span></span>
<span id="cb2-73">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-74">plt.contourf(X, Y, Zdx, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RdBu'</span>)</span>
<span id="cb2-75">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Derivative in X (Sobel Filter)'</span>)</span>
<span id="cb2-76">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-77">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-78">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-79"></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the derivative in y</span></span>
<span id="cb2-81">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-82">plt.contourf(X, Y, Zdy, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RdBu'</span>)</span>
<span id="cb2-83">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Derivative in Y (Sobel Filter)'</span>)</span>
<span id="cb2-84">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-85">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-86">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-87"></span>
<span id="cb2-88">plt.tight_layout()</span>
<span id="cb2-89">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="mv-plot-1" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/mv-plot-output-1.png" width="587" height="449" class="figure-img"></p>
<figcaption>Multivariate Gaussian and its Derivatives</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/mv-plot-output-2.png" id="mv-plot-2" width="748" height="230" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="extending-to-combination-of-gaussian-and-derivative" class="level3">
<h3 class="anchored" data-anchor-id="extending-to-combination-of-gaussian-and-derivative">Extending to Combination of Gaussian and Derivative</h3>
<p>We can compute the MV gaussian from the inverse covariance matrix <img src="https://latex.codecogs.com/png.latex?C"> with a mean of <img src="https://latex.codecogs.com/png.latex?%5Cmu=0"> along with a dimensional scaling metric <img src="https://latex.codecogs.com/png.latex?t">. For the purposes of forming interesting and varied PSFs, we include the linear combination of the gaussian and a Sobel operator to axpproximate the derivative of the gaussian.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AS_x%20&amp;=%20%5Cfrac%7B1%7D%7B4%7D%20%5Cbegin%7Bbmatrix%7D%20-1%20&amp;%200%20&amp;%201%20%5C%5C%20-2%20&amp;%200%20&amp;%202%20%5C%5C%20-1%20&amp;%200%20&amp;%201%20%5Cend%7Bbmatrix%7D%20%5C%5C%0AS_y%20&amp;=%20%5Cfrac%7B1%7D%7B4%7D%20%5Cbegin%7Bbmatrix%7D%20-1%20&amp;%20-2%20&amp;%20-1%20%5C%5C%200%20&amp;%200%20&amp;%200%20%5C%5C%201%20&amp;%202%20&amp;%201%20%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>These operators act like edge detection or derivatives. The <img src="https://latex.codecogs.com/png.latex?n_0">, <img src="https://latex.codecogs.com/png.latex?n_x">, and <img src="https://latex.codecogs.com/png.latex?n_y"> parameters in the code are used to scale the gaussian and the derivatives.</p>
<div id="d9df7698" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> gaussianConv(nn.Module):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch module that applies a Gaussian convolution to an input image using </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a parameterized Gaussian Point Spread Function (PSF). The PSF is derived </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from a covariance matrix and the derivatives of the Gaussian are computed </span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for edge detection.</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C (torch.Tensor): Inverse of covariance matrix used to define the shape of the Gaussian.</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        t (float, optional): Scaling factor for the Gaussian, default is np.exp(5).</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n0 (float, optional): Scaling factor for the original PSF, default is 1.</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nx (float, optional): Scaling factor for the derivative along the x-axis, default is 1.</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ny (float, optional): Scaling factor for the derivative along the y-axis, default is 1.</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(gaussianConv, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-17"></span>
<span id="cb3-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C</span>
<span id="cb3-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb3-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n0</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx</span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny</span>
<span id="cb3-23"></span>
<span id="cb3-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Apply the Gaussian convolution and derivatives to an input image.</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method performs convolution of the input image with a Gaussian</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Point Spread Function (PSF) that includes the original Gaussian and</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        its derivatives along x and y axes. The convolution is performed</span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        using the Fourier Transform for efficiency.</span></span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch.Tensor): Input image tensor of shape (Batch, Channels, Height, Width).</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            torch.Tensor: The convolved image of the same shape as the input.</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the PSF and calculate the center shift required for alignment</span></span>
<span id="cb3-41">        P, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.psfGauss(image.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], image.device)</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shift the PSF so that its center aligns with the origin (top-left corner)</span></span>
<span id="cb3-44">        P_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(P, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb3-45"></span>
<span id="cb3-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Fourier Transform of the shifted PSF</span></span>
<span id="cb3-47">        S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(P_shifted)</span>
<span id="cb3-48"></span>
<span id="cb3-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Fourier Transform of the input image</span></span>
<span id="cb3-50">        I_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(image)</span>
<span id="cb3-51"></span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiply the Fourier Transforms element-wise (convolution theorem with Hadamard product)</span></span>
<span id="cb3-53">        B_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> I_fft</span>
<span id="cb3-54"></span>
<span id="cb3-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the inverse Fourier Transform to get back to the spatial domain</span></span>
<span id="cb3-56">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.real(torch.fft.ifft2(B_fft))</span>
<span id="cb3-57"></span>
<span id="cb3-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the convolved image</span></span>
<span id="cb3-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> B</span>
<span id="cb3-60"></span>
<span id="cb3-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> psfGauss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb3-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Generate the Gaussian PSF and its derivatives.</span></span>
<span id="cb3-64"></span>
<span id="cb3-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dim (int): Dimension size (assumes square dimensions).</span></span>
<span id="cb3-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            device (str, optional): Device to create tensors on, default is 'cpu'.</span></span>
<span id="cb3-68"></span>
<span id="cb3-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple:</span></span>
<span id="cb3-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                - PSF (torch.Tensor): The combined PSF including derivatives.</span></span>
<span id="cb3-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                - center (list): Shifts required to align the PSF with the origin.</span></span>
<span id="cb3-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the size of the PSF kernel (assumed to be square)</span></span>
<span id="cb3-75">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb3-76">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb3-77"></span>
<span id="cb3-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a meshgrid of (X, Y) coordinates</span></span>
<span id="cb3-79">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb3-80">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb3-81">        X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb3-82">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb3-83">        Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb3-84"></span>
<span id="cb3-85">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract elements from the covariance matrix</span></span>
<span id="cb3-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming self.C is a 2x2 tensor</span></span>
<span id="cb3-87">        cx, cy, cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-88"></span>
<span id="cb3-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Gaussian PSF using the meshgrid and covariance elements</span></span>
<span id="cb3-90">        PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y))</span>
<span id="cb3-91"></span>
<span id="cb3-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the PSF so that its absolute sum is 1</span></span>
<span id="cb3-93">        PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(PSF.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>())</span>
<span id="cb3-94"></span>
<span id="cb3-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define derivative kernels (Sobel operators) for edge detection</span></span>
<span id="cb3-96">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-97">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb3-98">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-99">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-100">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb3-101">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-102"></span>
<span id="cb3-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape kernels to match convolution requirements</span></span>
<span id="cb3-104">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdx.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb3-105">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdy.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb3-106"></span>
<span id="cb3-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convolve the PSF with the derivative kernels to obtain derivatives</span></span>
<span id="cb3-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Padding ensures the output size matches the input size</span></span>
<span id="cb3-109">        PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdx, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-110">        PSFdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdy, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-111"></span>
<span id="cb3-112">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the original PSF and its derivatives using the scaling factors</span></span>
<span id="cb3-113">        PSF_combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdy</span>
<span id="cb3-114"></span>
<span id="cb3-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the center shift required to align the PSF with the origin</span></span>
<span id="cb3-116">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-117"></span>
<span id="cb3-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the combined PSF and center shift</span></span>
<span id="cb3-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PSF_combined, center</span></code></pre></div>
</details>
</div>
</section>
<section id="creating-a-toy-dataset" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-toy-dataset">Creating a Toy Dataset</h3>
<p>Often in computational science we test our strategies on toy datasets, simplified data that allows for easier debugging and understanding of the problem at task. In this case, rather than use a real image, we construct a geometric image that will be easier to analyse visually for its correctness when it comes to denoising and deblurring. The dataset is also dimensioned to have a batch and color channel to follow some of the conventions for working with torch tensors, and later some machine learning frameworks. That is <img src="https://latex.codecogs.com/png.latex?B%20%5Ctimes%20C%20%5Ctimes%20H%20%5Ctimes%20W">, with a single sample, single channel, and a 256x256 image having dimensions <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201%20%5Ctimes%20256%20%5Ctimes%20256">.</p>
<div id="cell-toy-dataset" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb4-2">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-3">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-6">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="toy-dataset" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/toy-dataset-output-1.png" width="276" height="268" class="figure-img"></p>
<figcaption>A sample toy dataset for image denoising and deblurring.</figcaption>
</figure>
</div>
</div>
</div>
<p>This simple image is a high and a low signal shown as two square regions, which we will try to recover after applying a point spread function to it (the forward model). The forward model is the convolution of the image with the PSF.</p>
<div id="cell-forward-model" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb5-2">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb5-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb5-7">plt.colorbar()</span>
<span id="cb5-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-9">plt.imshow(y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb5-10">plt.colorbar()</span>
<span id="cb5-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div id="forward-model" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/forward-model-output-2.png" width="616" height="402" class="figure-img"></p>
<figcaption>Forward model for image denoising and deblurring.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="forming-a-convolution-matrix" class="level3">
<h3 class="anchored" data-anchor-id="forming-a-convolution-matrix">Forming a Convolution Matrix</h3>
<p>Back to the idea of forming a Toeplitz matrix, we first flatten the data to 1D and then recover the matrix in one of two ways. We can work in the spatial domain where the first row of the matrix is determined by the 1D convolution for the first element, then slide the row by one to form the matrix. The matrix can be quite large, since an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m"> image will have <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> elements once flattened, requiring a <img src="https://latex.codecogs.com/png.latex?(n%5Ctimes%20m)%20%5Ctimes%20(n%5Ctimes%20m)"> matrix. A reduction in dimension to the <img src="https://latex.codecogs.com/png.latex?32%20%5Ctimes%2032"> image will help with the computation.</p>
<p>Note that we are working with a rolling PSF which has a strange effect in that it assumes a periodic boundary condition in both <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">. When it comes to convolution, there are many different ways to treat the boundary condition, such as using zero padding or mirroring the boundary. Coding this by hand is a good exercise to understand the convolution operation, but not the purpose of this exercise.</p>
<section id="direct-recovery-of-convolution-matrix" class="level4">
<h4 class="anchored" data-anchor-id="direct-recovery-of-convolution-matrix">Direct Recovery of Convolution Matrix</h4>
<div id="cell-convolution-matrix" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb7-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dim, dim)</span>
<span id="cb7-3">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-4">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the image and the PSF</span></span>
<span id="cb7-9">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten()</span>
<span id="cb7-10"></span>
<span id="cb7-11">kernel, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv.psfGauss(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a square conv kernel </span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since we are using the conv kernel as a filter operation, we use the transpose of the kernel</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to fill the convolution matrix. </span></span>
<span id="cb7-15"></span>
<span id="cb7-16">kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Roll shifts the kernel from the center of the box to the top left corner</span></span>
<span id="cb7-18">kernel_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(kernel, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb7-19"></span>
<span id="cb7-20">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-21">plt.imshow(kernel[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb7-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PSF Centered'</span>)</span>
<span id="cb7-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-24">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PSF Shifted with Roll'</span>)</span>
<span id="cb7-25">plt.imshow(kernel_shifted[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the kernel</span></span>
<span id="cb7-28">kernel_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_shifted.flatten()</span>
<span id="cb7-29"></span>
<span id="cb7-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Form the convolution matrix</span></span>
<span id="cb7-31">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_flat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-32">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_flat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-33">A_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n, n)</span>
<span id="cb7-34"></span>
<span id="cb7-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-36">    A_conv[i, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(kernel_flat, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-37"></span>
<span id="cb7-38">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-39">plt.imshow(A_conv)</span>
<span id="cb7-40">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Convolution Matrix'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="convolution-matrix" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/convolution-matrix-output-1.png" width="580" height="215" class="figure-img"></p>
<figcaption>Forming a convolution matrix for the forward model.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="recovery-using-linearity-of-operator" class="level4">
<h4 class="anchored" data-anchor-id="recovery-using-linearity-of-operator">Recovery Using Linearity of Operator</h4>
<p>Since the convolution operation that is being performed is linear, one way to recover the matrix operator under this assumption is to pass through the basis vectors and recover the column vectors in this fashion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20a_1%20%5Cmid%20a_2%20%5Cmid%20%5Cldots%20%5Cmid%20a_n%20%5Cend%7Bbmatrix%7D%20%5Cmathbf%7Be%7D_i%20=%20%5Cmathbf%7BA%7D%20%5Cmathbf%7Be%7D_i%20%20=%20%5Cmathbf%7Ba%7D_i"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Be%7D_i"> is the <img src="https://latex.codecogs.com/png.latex?i">th basis vector.</p>
<div id="cell-convolution-matrix-2" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">A_conv_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n, n)</span>
<span id="cb8-2"></span>
<span id="cb8-3">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb8-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb8-6">    e_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb8-7">    e_ij[:,:, i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb8-8">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(e_ij)</span>
<span id="cb8-9">    A_conv_lin[:, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.flatten()</span>
<span id="cb8-10">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-13">plt.imshow(A_conv_lin)</span>
<span id="cb8-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Convolution Matrix (Linear)'</span>)</span>
<span id="cb8-15">plt.colorbar()</span>
<span id="cb8-16">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-17">plt.imshow(A_conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A_conv_lin)</span>
<span id="cb8-18">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Difference from Direct'</span>)</span>
<span id="cb8-19">plt.colorbar()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="convolution-matrix-2" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/convolution-matrix-2-output-1.png" width="625" height="400" class="figure-img"></p>
<figcaption>Forming a convolution matrix for the forward model using linearity.</figcaption>
</figure>
</div>
</div>
</div>
<p>Now comparing this method against the known convolution result using the class defined earlier with the forward model:</p>
<div id="b84466de" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">b_forward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb9-2"></span>
<span id="cb9-3">b_mat_toeplitz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_flat</span>
<span id="cb9-4">b_mat_linear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_flat</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-7">plt.imshow(b_forward[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb9-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-9">plt.imshow(b_mat_toeplitz.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb9-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb9-11">plt.imshow(b_mat_linear.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-9-output-1.png" width="566" height="197" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that there are some differences between the two methods but in principle they should be the same, (Not sure where the difference is coming from). The important method is actually the one which extracts the columns, as it is more generalizable. So we will continue with that.</p>
<div id="final-conv-matrix" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv_lin</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="least-squares-recovery-with-svd-and-pseudoinverse" class="level2">
<h2 class="anchored" data-anchor-id="least-squares-recovery-with-svd-and-pseudoinverse">Least Squares Recovery with SVD and Pseudoinverse</h2>
<p>Now that we have a matrix operator recovered we can formulate the forward problem as <img src="https://latex.codecogs.com/png.latex?A%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D"> with our known <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D">, and we want to recover <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">. To do this we use the SVD decomposition to gather the pseudo inverse. We can decide to filter out some of the singular values that are very small to improve the conditioning on the matrix as well, using a cutoff value for example.</p>
<section id="svd-decomposition" class="level3">
<h3 class="anchored" data-anchor-id="svd-decomposition">SVD Decomposition</h3>
<div id="f2d9dff2" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">U, S, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat.to(torch.float64))</span>
<span id="cb11-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span></code></pre></div>
</details>
</div>
<p>Now we make a log plot of the singular values to see how they decay, noting that we lose numerical precision around the <img src="https://latex.codecogs.com/png.latex?10%5E%7B-6%7D"> mark. We can also asses what the frobenius norm of the difference between the original matrix and the reconstructed matrix is to get a sense of the error in the decomposition and reconstruction.</p>
<div id="cell-svd-decomposition" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plt.semilogy(S)</span>
<span id="cb12-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Singular Value Index'</span>)</span>
<span id="cb12-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Singular Value'</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.mse_loss(Amat, U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> V.T)</span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The loss is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>The loss is 1.812403923995022e-34</code></pre>
</div>
<div class="cell-output cell-output-display">
<div id="svd-decomposition" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/svd-decomposition-output-2.png" width="605" height="429" class="figure-img"></p>
<figcaption>SVD Decomposition of the Convolution Matrix.</figcaption>
</figure>
</div>
</div>
</div>
<p>The loss is quite small which is a good sign that the decomposition is working well within the numerical precision of the machine.</p>
</section>
<section id="initial-attempt-at-pseudoinverse" class="level3">
<h3 class="anchored" data-anchor-id="initial-attempt-at-pseudoinverse">Initial Attempt at Pseudoinverse</h3>
<p>To recover the original image data we first naively try to invert the matrix to see what happens.</p>
<div id="cell-naive-pseudoinverse" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.solve(Amat,b.reshape(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb14-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-3">plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb14-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Naive Inverse'</span>)</span>
<span id="cb14-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-6">plt.imshow(x.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb14-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="naive-pseudoinverse" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/naive-pseudoinverse-output-1.png" width="566" height="298" class="figure-img"></p>
<figcaption>Naive Pseudoinverse Recovery of the Original Image.</figcaption>
</figure>
</div>
</div>
</div>
<p>Wow, not even close! This is because the matrix is so ill conditioned that it is effectively low rank and not invertible. We can improve the situation by filtering out the singular values that are very small.</p>
</section>
<section id="pseudoinverse-with-filtering" class="level3">
<h3 class="anchored" data-anchor-id="pseudoinverse-with-filtering">Pseudoinverse with Filtering</h3>
<p>We can filter out the poor conditioning singular values and exclude those values from the inversion. To get an idea of what the values are doing, we can plot the first few singular values and the corresponding singular vector that they project onto. In the case of the SVD the most important information about the matrix is captured in the left-most vectors of the matrix <img src="https://latex.codecogs.com/png.latex?U">.</p>
<div id="4351e3dc" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb15-3">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-4">  plt.imshow(U[:,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb15-5">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-14-output-1.png" width="566" height="151" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>For the inverse problem, the most import singular values are conversely found in the left-most vectors of the matrix <img src="https://latex.codecogs.com/png.latex?V">. We can also check what the right-most vectors are doing, as they will blow up in value when inverting small singular values. They are high frequency modes of the image, creating the reconstruction issues when they are subjected to error in numerical precision.</p>
<div id="15c4ec33" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb16-3">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-4">  plt.imshow(V[:,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb16-5">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-6">plt.show()</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb16-9">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-10">  plt.imshow(V[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb16-11">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>V<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-15-output-1.png" width="566" height="151" class="figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-15-output-2.png" width="566" height="151" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>These modes are the most important ones, as they contain the big-picture detail without the high frequency noise. We can now filter out the singular values that are very small and invert the matrix to recover the original image.</p>
<div id="cell-pseudoinverse-filter" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb17-2">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb17-3">thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>]</span>
<span id="cb17-4"></span>
<span id="cb17-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the figure size as needed</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(thresholds):</span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the singular values</span></span>
<span id="cb17-9">    S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S.clone()</span>
<span id="cb17-10">    S_filtered[S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-11"></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reciprocal of the filtered singular values</span></span>
<span id="cb17-13">    S_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(S_filtered)</span>
<span id="cb17-14">    non_zero_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-15">    S_inv[non_zero_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S_filtered[non_zero_mask]</span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat</span></span>
<span id="cb17-18">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S_inv) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.T</span>
<span id="cb17-19"></span>
<span id="cb17-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the original image</span></span>
<span id="cb17-21">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_flat</span>
<span id="cb17-22"></span>
<span id="cb17-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reconstruction error</span></span>
<span id="cb17-24">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_flat, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fro'</span>).item()</span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the reconstructed image in the appropriate subplot</span></span>
<span id="cb17-27">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx + 1 because subplot indices start at 1</span></span>
<span id="cb17-28">    plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb17-29">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Threshold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>threshold<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-30">    plt.colorbar()</span>
<span id="cb17-31">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally turn off axis ticks and labels</span></span>
<span id="cb17-32"></span>
<span id="cb17-33">plt.tight_layout()</span>
<span id="cb17-34">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-output-1.png" width="661" height="464" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Filtering.</figcaption>
</figure>
</div>
</div>
</div>
<p>Looking at the results, around the <img src="https://latex.codecogs.com/png.latex?10%5E%7B-7%7D"> mark we start to a peak level of recovery, as measured by the error in the Frobenius norm of the reconstruction. But what happens when we add noise to the data signal?</p>
</section>
<section id="adding-noise-to-the-signal" class="level3">
<h3 class="anchored" data-anchor-id="adding-noise-to-the-signal">Adding Noise to the Signal</h3>
<p>Now we add some noise to the signal and try least squares again for the direct solution</p>
<div id="cell-pseudoinverse-filter-noised" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb18-2">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb18-3">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat.to(torch.float64)</span>
<span id="cb18-4"></span>
<span id="cb18-5">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span></span>
<span id="cb18-6">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(b_flat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> alpha</span>
<span id="cb18-7"></span>
<span id="cb18-8">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.eye(Amat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-9">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.solve(H, Amat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise))</span>
<span id="cb18-10"></span>
<span id="cb18-11">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-12">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb18-14">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-15">plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb18-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reconstructed Image'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter-noised" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-noised-output-1.png" width="566" height="298" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>The reconstruction is not very good, the noise has been amplifed all over the image. We can try the pseudoinverse method again with the noise added to the signal.</p>
<div id="cell-pseudoinverse-filter-noised-recovery" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">Amat_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.eye(Amat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb19-2">Un, Sn, Vn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat_noisy)</span>
<span id="cb19-3"></span>
<span id="cb19-4">thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.005</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span>]</span>
<span id="cb19-5"></span>
<span id="cb19-6">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the figure size as needed</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(thresholds):</span>
<span id="cb19-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the singular values</span></span>
<span id="cb19-10">    S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sn.clone()</span>
<span id="cb19-11">    S_filtered[S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-12"></span>
<span id="cb19-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reciprocal of the filtered singular values</span></span>
<span id="cb19-14">    S_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(S_filtered)</span>
<span id="cb19-15">    non_zero_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-16">    S_inv[non_zero_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S_filtered[non_zero_mask]</span>
<span id="cb19-17"></span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat</span></span>
<span id="cb19-19">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S_inv) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Un.T</span>
<span id="cb19-20"></span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the original image</span></span>
<span id="cb19-22">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise)</span>
<span id="cb19-23"></span>
<span id="cb19-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reconstruction error</span></span>
<span id="cb19-25">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_flat, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fro'</span>).item()</span>
<span id="cb19-26"></span>
<span id="cb19-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the reconstructed image in the appropriate subplot</span></span>
<span id="cb19-28">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx + 1 because subplot indices start at 1</span></span>
<span id="cb19-29">    plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb19-30">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Threshold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>threshold<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-31">    plt.colorbar()</span>
<span id="cb19-32">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally turn off axis ticks and labels</span></span>
<span id="cb19-33"></span>
<span id="cb19-34">plt.tight_layout()</span>
<span id="cb19-35">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter-noised-recovery" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-noised-recovery-output-1.png" width="661" height="460" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>The small addition of noise is quite significant in the recovery threshold for reconstruction. Using a higher threshold for the singular values becomes important when dealing with noise in the signal. Previously numerical precision was the main issue, but now the measurement noise is the main issue.</p>


</section>
</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>SVD</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture2/</guid>
  <pubDate>Sun, 15 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture2/imgs/gaussian_plot.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Lecture 1: Introduction to Inverse Theory</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/</link>
  <description><![CDATA[ 




<section id="what-is-inverse-theory" class="level1">
<h1>What is Inverse Theory?</h1>
<p>Inverse theory is a set of mathematical techniques used to infer the properties of a physical system from observations of its output. It is a fundamental tool in many scientific disciplines, including geophysics, seismology, and medical imaging. Inverse theory is used to solve a wide range of problems, such as:</p>
<ul>
<li><strong>Parameter Estimation</strong>: Determining the values of unknown parameters in a model that best fit the observed data.</li>
<li><strong>System Identification</strong>: Identifying the structure and dynamics of a system from input-output data.</li>
<li><strong>Image Reconstruction</strong>: Reconstructing an image or object from noisy or incomplete measurements.</li>
</ul>
<p>What many of these tasks have in common is that we are working with incomplete information. There is a <em>forward</em> problem that has generated the data that we observe <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> from a set of input data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D">, and we want to infer the <em>inverse</em> problem that generated the data. However the inverse problem is often ill-posed, meaning that there are multiple solutions that can fit the data equally well. Inverse theory provides a framework for finding the best solution to these problems.</p>
<p>The forward problem can be described for example as a differetial equation or operator <img src="https://latex.codecogs.com/png.latex?L"> that takes in some measured parameters <img src="https://latex.codecogs.com/png.latex?u"> with model parameters <img src="https://latex.codecogs.com/png.latex?x"> :</p>
<p><img src="https://latex.codecogs.com/png.latex?%20L(x)%5Bu%5D%20=%20q%20%5Ciff%20u%20=%20L%5E%7B-1%7D(x)%5Bq%5D%20"></p>
<p>For example making measurements of an electromagnetic field in correspondence to conductivity values that are underground we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cnabla%20%5Csigma%20%5Cnabla%20u%20=%20q%20+%20%5Ctext%7BBC%7D"></p>
<p>We measure the <img src="https://latex.codecogs.com/png.latex?u"> at some points and use that to try and form an estimate of the conductivity <img src="https://latex.codecogs.com/png.latex?%5Csigma">. The forward problem is to solve for <img src="https://latex.codecogs.com/png.latex?u"> given <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the inverse problem is to solve for <img src="https://latex.codecogs.com/png.latex?%5Csigma"> given <img src="https://latex.codecogs.com/png.latex?u">. The forward problem is often well-posed and the inverse problem is often ill-posed.</p>
<p>For a computational framework we can discretize the the equation so that the operator is a matrix <img src="https://latex.codecogs.com/png.latex?A"> and the data is a vector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cunderbrace%7BA%7D_%7B%5Ctext%7BForward%20Map%7D%7D%20%5Cunderbrace%7B%5Cvec%7Bx%7D%7D_%7B%5Ctext%7BModel%20Parameters%7D%7D%20+%20%5Cepsilon%20=%20%5Cunderbrace%7B%5Cvec%7Bb%7D%7D_%7B%5Ctext%7BObserved%20Data%7D%7D%20"></p>
<p>In this case we may have a sparse set of measurements <img src="https://latex.codecogs.com/png.latex?b"> and a large set of <img src="https://latex.codecogs.com/png.latex?x"> making the problem underdetermined. The goal of inverse theory is to find the best estimate of <img src="https://latex.codecogs.com/png.latex?x"> given <img src="https://latex.codecogs.com/png.latex?b">.</p>
<section id="example-the-triathlon-problem" class="level3">
<h3 class="anchored" data-anchor-id="example-the-triathlon-problem">Example: The Triathlon Problem</h3>
<p>To illustrate the concept of inverse theory, consider the following example:</p>
<blockquote class="blockquote">
<p>Suppose that you have agreed to meet a friend to watch them during a triathlon race but you showed up late and missed the start. They are expecting for you to have been there at some point during the time at which they were changing from a running phase to a cycle phase. They expect you to know the time at which they made the transition. However you only know the overall start time and finish time of the race.</p>
<p>If the race starts at time <img src="https://latex.codecogs.com/png.latex?t=0"> and then ends at time <img src="https://latex.codecogs.com/png.latex?t=b"> how do you use this information to deduce the actual time <img src="https://latex.codecogs.com/png.latex?t_r%20%5Cin%20%5B0,b%5D"> at which they crossed the transition zone of the race?</p>
</blockquote>
<p>The first restriction on feasible solutions is the domain <img src="https://latex.codecogs.com/png.latex?%5B0,b%5D"> so that we know that <img src="https://latex.codecogs.com/png.latex?0%3Ct_r%3Cb">.</p>
<p>After this there are some other techniquest that we could use to better inform the probability of the occurence at different times. For example, we might have a good idea of their fitness level or average running speed from previous experience. Or in the abscence of this information there might be average times for the competitors that are available to further inform the problem and reduce the amount of error in the estimate.</p>
</section>
<section id="the-singular-value-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="the-singular-value-decomposition">The Singular Value Decomposition</h2>
<p>For cases where the matrix <img src="https://latex.codecogs.com/png.latex?A"> is not full rank, the singular value decomposition (SVD) provides a more general framework for solving the least squares problem. The SVD decomposes the matrix <img src="https://latex.codecogs.com/png.latex?A"> into three matrices <img src="https://latex.codecogs.com/png.latex?U">, <img src="https://latex.codecogs.com/png.latex?%5CSigma">, and <img src="https://latex.codecogs.com/png.latex?V"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20U%20%5CSigma%20V%5ET%20"></p>
<p>The matrices have the following special properties:</p>
<ul>
<li><em>Orthogonal Subspaces</em>: <img src="https://latex.codecogs.com/png.latex?U"> and <img src="https://latex.codecogs.com/png.latex?V"> are orthogonal matrices, meaning that <img src="https://latex.codecogs.com/png.latex?U%5ETU%20=%20I"> and <img src="https://latex.codecogs.com/png.latex?V%5ETV%20=%20I">, that is <img src="https://latex.codecogs.com/png.latex?U%5ET%20=%20U%5E%7B-1%7D"> and $V^T = V^{-1}.</li>
<li><em>Ordered Singular Values</em>: <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is a diagonal matrix with non-negative values on the diagonal, known as the singular values of <img src="https://latex.codecogs.com/png.latex?A">. The singular values are ordered such that <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20%5Cgeq%20%5Csigma_2%20%5Cgeq%20%5Cldots%20%5Cgeq%20%5Csigma_r">. The number of non-zero singular values is equal to the rank of <img src="https://latex.codecogs.com/png.latex?A">.</li>
</ul>
<p>Supposed that we have a <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Brank%7D(A)%20=%20r"> matrix <img src="https://latex.codecogs.com/png.latex?A"> which maps from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em%5Crightarrow%20%5Cmathbb%7BR%7D%5En">. A fundamental way to view this mapping is as a composition of three linear transformations: a rotation <img src="https://latex.codecogs.com/png.latex?V">, a scaling <img src="https://latex.codecogs.com/png.latex?%5CSigma">, and another rotation <img src="https://latex.codecogs.com/png.latex?U">. The orthogonal matrix <img src="https://latex.codecogs.com/png.latex?V"> has the property that all of its rows and columns are orthogonal to each other, and the vectors themselves are normalized to <img src="https://latex.codecogs.com/png.latex?1">. To see this property of the orthogonal matrix consider that <img src="https://latex.codecogs.com/png.latex?V%5ET%20V%20=%20I"> and <img src="https://latex.codecogs.com/png.latex?V%20V%5ET%20=%20I">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AZ%20=%20V%5ET%20V%20&amp;=%20I%20%5C%5C%0Az_%7Bij%7D%20=%20%5Clangle%20v_i,%20v_j%20%5Crangle%20&amp;=%20%5Cdelta_%7Bij%7D%20%5Cend%7Balign%7D%20"></p>
<p>Each of the elements of the matrix <img src="https://latex.codecogs.com/png.latex?V%5ET"> is the dot product of the <img src="https://latex.codecogs.com/png.latex?i">th and <img src="https://latex.codecogs.com/png.latex?j">th columns of <img src="https://latex.codecogs.com/png.latex?V">. The dotproduct of all vectors against themselves is <img src="https://latex.codecogs.com/png.latex?1"> and the dotproduct of any two different vectors is <img src="https://latex.codecogs.com/png.latex?0">. So from this we can see that all of the columns of <img src="https://latex.codecogs.com/png.latex?V"> are orthogonal to each other. The same property holds for <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p><img src="https://latex.codecogs.com/png.latex?V%5ET"> by our definition of <img src="https://latex.codecogs.com/png.latex?A"> must accept a vector from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em"> and the matrix is square, indicating an <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> matrix. The matrix <img src="https://latex.codecogs.com/png.latex?U"> must output a vector in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5En"> and the matrix is square, indicating an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix. The matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma"> must be <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> to map from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5En">.</p>
<p>In all its glory:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA_%7Bn%20%5Ctimes%20m%7D%20&amp;=%20U_%7Bn%20%5Ctimes%20n%7D%20%5C,%20%5CSigma_%7Bn%20%5Ctimes%20m%7D%20%5C,%20V%5ET_%7Bm%20%5Ctimes%20m%7D%20%5C%5C%0A&amp;=%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7Cccc%7D%0A%5Cmathbf%7Bu%7D_1%20&amp;%20%5Ccdots%20&amp;%20%5Cmathbf%7Bu%7D_r%20&amp;%20%5Cmathbf%7Bu%7D_%7Br+1%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cmathbf%7Bu%7D_n%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20n%7D%0A%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%20&amp;%20%20&amp;%20%20%5C%5C%0A&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A&amp;%20%20&amp;%20%5Csigma_r%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20m%7D%0A%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7Cccc%7D%0A%5Cmathbf%7Bv%7D%5ET_1%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cmathbf%7Bv%7D%5ET_r%20%5C%5C%0A%5Cmathbf%7Bv%7D%5ET_%7Br+1%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%20%20%5Cmathbf%7Bv%7D%5ET_m%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bm%20%5Ctimes%20m%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>In this case the first <img src="https://latex.codecogs.com/png.latex?r"> columns of <img src="https://latex.codecogs.com/png.latex?U"> are the range of <img src="https://latex.codecogs.com/png.latex?A">, the rest of <img src="https://latex.codecogs.com/png.latex?U"> is filled with its orthogonal complement. The first <img src="https://latex.codecogs.com/png.latex?r"> columns of <img src="https://latex.codecogs.com/png.latex?V"> are the domain of <img src="https://latex.codecogs.com/png.latex?A">, the rest of <img src="https://latex.codecogs.com/png.latex?V"> is filled with its orthogonal complement. These are the four fundamental subspaces of the matrix <img src="https://latex.codecogs.com/png.latex?A">, more information on this can be found at: <a href="https://en.wikipedia.org/wiki/Singular_value_decomposition">Wikipedia: SVD</a></p>
<p>The matrices as shown above are for a rectangular <img src="https://latex.codecogs.com/png.latex?A"> where <img src="https://latex.codecogs.com/png.latex?n%3Em"> but the same properties hold for all <img src="https://latex.codecogs.com/png.latex?n,m">. Some of the singular values <img src="https://latex.codecogs.com/png.latex?%5Csigma_i"> may be zero, in which case the matrix <img src="https://latex.codecogs.com/png.latex?A"> is not full rank.</p>
<p>Another way to decompose the SVD is to write it as a sum of outer products that are scaled by the diagonal matrix of singular values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20%5Csum_%7Bi=1%7D%5Er%20%5Csigma_i%20%5Cmathbf%7Bu%7D_i%20%5Cmathbf%7Bv%7D_i%5ET%20"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%3E0"> then <img src="https://latex.codecogs.com/png.latex?v_i"> is not in the null space of <img src="https://latex.codecogs.com/png.latex?A"> because <img src="https://latex.codecogs.com/png.latex?A%20v_i%20=%20%5Csigma_i%20u_i">. If <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%20=%200"> then <img src="https://latex.codecogs.com/png.latex?v_i"> is in the null space of <img src="https://latex.codecogs.com/png.latex?A"> because <img src="https://latex.codecogs.com/png.latex?A%20v_i%20=%200">.</p>
<section id="the-pseudoinverse" class="level3">
<h3 class="anchored" data-anchor-id="the-pseudoinverse">The Pseudoinverse</h3>
<p>Back to the task of inverting <img src="https://latex.codecogs.com/png.latex?Ax%20+%20%5Cepsilon%20=%20b"> we can apply the SVD decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU%20%5CSigma%20V%5ET%20x%20+%20%5Cepsilon%20&amp;=%20b%20%5C%5C%0A%5CSigma%20V%5ET%20x%20+&amp;=%20U%5ET%20(b-%5Cepsilon)%20%5C%5C%0AV%20%5CSigma%5E%7B-1%7D%20U%5ET%20(b-%5Cepsilon)%20&amp;=%20x%5C%5C%0AA%5E+%20(b-%5Cepsilon)%20&amp;=%20%5Chat%7Bx%7D%0A%5Cend%7Balign%7D"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?A%5E+%20=%20V%20%5CSigma%5E%7B-1%7D%20U%5ET"> is the pseudoinverse of <img src="https://latex.codecogs.com/png.latex?A">. The pseudoinverse is a generalization of the matrix inverse for non-square matrices. We recover a square matrix by removing all of the absent or zero singular values from <img src="https://latex.codecogs.com/png.latex?%5CSigma"> and inverting the rest, giving an <img src="https://latex.codecogs.com/png.latex?r%20%5Ctimes%20r"> diagonal matrix whose inverse is simply the inverse of each element.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%20&amp;%20%20&amp;%20%20%5C%5C%0A&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A&amp;%20%20&amp;%20%5Csigma_r%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20m%7D%0A%5Crightarrow%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%5E%7B-1%7D%20&amp;%20%20&amp;%20%20%5C%5C%0A%20%20&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A%20%20&amp;%20%20&amp;%20%5Csigma_r%5E%7B-1%7D%20%5C%5C%0A%20%20%5Cend%7Barray%7D%20%5Cright%5D_%7Br%20%5Ctimes%20r%7D"></p>
<p>Then <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20%5Csum_i%5EN%20%5Csigma_i%5E%7B-1%7D%20%5Cmathbf%7Bu%7D_i%5ET%20(b-%5Cepsilon)%20%5Cmathbf%7Bv%7D_i"> is the solution to the least squares problem. This can be solved also as a truncated sum since <img src="https://latex.codecogs.com/png.latex?0%3CN%3Cr">. In actual practice with real world measurement we end up with many singular values that may be effectively <img src="https://latex.codecogs.com/png.latex?0"> by nature of being very small relative to the noise in the data and the largest single value. We have that the solution <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> is a sum of <img src="https://latex.codecogs.com/png.latex?v_i"> components that form an orthogonal basis <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20%5Csum_i%20%5Cbeta_i%20v_i"> where <img src="https://latex.codecogs.com/png.latex?%5Cbeta_i%20=%20%5Cfrac%7Bu_i%5ET%20(b-%5Cepsilon)%7D%7B%5Csigma_i%7D">. These small singular values blow up in size when inverted and so extra truncation is often necessary to avoid numerical instability and excessive amplification of noise <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">.</p>
</section>
</section>
<section id="least-squares" class="level2">
<h2 class="anchored" data-anchor-id="least-squares">Least Squares</h2>
<p>Least squares and matrix inversion is a classic starting point for understanding inverse theory. Suppose that we have input data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D"> and output data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> that are related by a linear system of equations: <img src="https://latex.codecogs.com/png.latex?Ax%20=%20b"> where <img src="https://latex.codecogs.com/png.latex?A"> is a matrix of coefficients. In many cases, the system is overdetermined, meaning that there are more equations than unknowns. In this case, there is no exact solution to the system, and we must find the best solution that minimizes the error between the observed data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> and the predicted data <img src="https://latex.codecogs.com/png.latex?A%5Cvec%7Bx%7D">. In the simplest form of inversion that we can attempt, we can solve the least squares solution. In this case we reject all of the observed data that is from the null space of <img src="https://latex.codecogs.com/png.latex?A"> assuming a zero value for each of those parameters.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?A"> be a <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%202"> matrix and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> be a <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%201"> vector. The <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D"> that we are trying to solve for is a <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%201"> vector. The system of equations is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20%5Cbegin%7Bbmatrix%7D%20%20%5Cvec%7Ba%7D_1%20&amp;%20%5Cvec%7Ba%7D_2%20%5Cend%7Bbmatrix%7D%20%5Cquad%20%5Cvec%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D%20x_1%20%5C%5C%20x_2%20%20%5Cend%7Bbmatrix%7D%20%20%5Cquad%20%5Cvec%7Bb%7D%20=%20%5Cbegin%7Bbmatrix%7D%20b_1%20%5C%5C%20b_2%20%5C%5C%20b_3%20%5Cend%7Bbmatrix%7D%20"></p>
<p>In this case we have an <em>overdetermined</em> system with three equations, two unknowns, and three data samples. If the system of equations is full rank then we are trying to map from a 2D space to a 3D space: <img src="https://latex.codecogs.com/png.latex?A:%20%5Cmathbb%7BR%7D%5E2%20%5Crightarrow%20%5Cmathbb%7BR%7D%5E3">. In this case there is no exact solution to the system for any <img src="https://latex.codecogs.com/png.latex?b"> that is not in the column space of <img src="https://latex.codecogs.com/png.latex?A">.</p>
<p>Instead we can solve for the least squares solution <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D_%7BLS%7D"> by minimizing the error between the observed data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> and the predicted data <img src="https://latex.codecogs.com/png.latex?A%5Cvec%7Bx%7D"> from the forward model.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bx%7D_%7BLS%7D%20=%20%5Carg%20%5Cmin_%7B%5Cvec%7Bx%7D%7D%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2%20"></p>
<p>We want to find the argument that minimizes the function <img src="https://latex.codecogs.com/png.latex?f(%5Cvec%7Bx%7D)%20=%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2">. By first order optimality conditions, the gradient of the function must be zero at the minimum.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0A%5Cnabla%20f(%5Cvec%7Bx%7D)%20&amp;=%200%20%5C%5C%0A%5Cnabla%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2%20&amp;=%200%20%5C%5C%0A%5Cnabla%20(A%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D)%5ET%20(A%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D)%20&amp;=%200%20%5C%5C%0A%5Cnabla%20%5Cleft(%20%5Cvec%7Bx%7D%5ET%20A%5ET%20A%20%5Cvec%7Bx%7D%20-%202%20%5Cvec%7Bb%7D%5ET%20A%20%5Cvec%7Bx%7D%20+%20%5Cvec%7Bb%7D%5ET%20%5Cvec%7Bb%7D%20%5Cright)%20&amp;=%200%20%5C%5C%0A2%20A%5ET%20A%20%5Cvec%7Bx%7D%20-%202%20A%5ET%20%5Cvec%7Bb%7D%20&amp;=%200%20%5C%5C%0AA%5ET%20A%20%5Cvec%7Bx%7D%20&amp;=%20A%5ET%20%5Cvec%7Bb%7D%20%5C%5C%0A%5Cvec%7Bx%7D_%7BLS%7D%20&amp;=%20(A%5ET%20A)%5E%7B-1%7D%20A%5ET%20%5Cvec%7Bb%7D%0A%5Cend%7Balign%7D%20"></p>
<p>This is known as the normal equations for the least squares solution. We take a note of caution here that <img src="https://latex.codecogs.com/png.latex?A%5ET%20A"> must be invertible for this solution to exist. If <img src="https://latex.codecogs.com/png.latex?A"> is not full rank then the matrix <img src="https://latex.codecogs.com/png.latex?A%5ET%20A"> will not be invertible and other methods must be used.</p>
<p>We call the difference between the observed data and the predicted data the residual.</p>
<p><img src="https://latex.codecogs.com/png.latex?r%20=%20%5Cvec%7Bb%7D%20-%20A%5Cvec%7Bx%7D_%7BLS%7D"></p>
<p>Using this information, what we really want to minimize is the sum of the squares of the residuals: <img src="https://latex.codecogs.com/png.latex?%7C%7Cr%7C%7C_2%5E2">. This is the same as the sum of the squares of the errors in the data.</p>
<p>There is an altogether informative way to think about the minimization problem purely in terms of linear algebra and subspaces to derive the same normal equations.</p>
<div style="display: block; margin-left: auto; margin-right: auto; width: 50%; text-align: center;">
<img src="https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/imgs/ls-sol.svg" alt="" width="300">
<p>
<em>Least Squares Visual</em>
</p>
</div>
<p>We have the range of <img src="https://latex.codecogs.com/png.latex?A"> or image of <img src="https://latex.codecogs.com/png.latex?A"> as the subspace of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E3"> that is spanned by the columns of <img src="https://latex.codecogs.com/png.latex?A">. This subspace is rank <img src="https://latex.codecogs.com/png.latex?2"> because there are only two columns in <img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?R(A)%20%5Csubset%20%5Cmathbb%7BR%7D%5E3">. The inaccessible parts of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E3"> are in the orthogonal complement of <img src="https://latex.codecogs.com/png.latex?R(A)">, <img src="https://latex.codecogs.com/png.latex?R(A)%5E%5Cperp">. Recalling that <img src="https://latex.codecogs.com/png.latex?R(A)%5E%5Cperp%20=%20N(A%5ET)"> we can diagram the solution to least squares as a minimization of the error vector <img src="https://latex.codecogs.com/png.latex?r"> in the orthogonal complement of <img src="https://latex.codecogs.com/png.latex?R(A)">.</p>
<p>As seen the <img src="https://latex.codecogs.com/png.latex?r"> vector is perpendicular to the <img src="https://latex.codecogs.com/png.latex?x_%7BLS%7D"> solution, the projection of <img src="https://latex.codecogs.com/png.latex?r"> onto <img src="https://latex.codecogs.com/png.latex?R(A)"> is zero. Since it is in a null space of <img src="https://latex.codecogs.com/png.latex?A%5ET"> then <img src="https://latex.codecogs.com/png.latex?A%5ET%20r%20=%200">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%20A%5ET%20%5Cleft%20(%20Ax_%7BLS%7D%20-%20b%20%5Cright%20)%20&amp;=%200%5C%5C%0AA%5ET%20A%20x_%7BLS%7D%20&amp;=%20A%5ET%20b%20%5C%5C%0A%5Cend%20%7Balign%7D%20"></p>
<p>So we recover the normal equations without using any of the machinery of calculus.</p>
<p>For a review on the four fundamental subspaces of a matrix see the UBC Math 307 notes on the topic: <a href="https://ubcmath.github.io/MATH307/orthogonality/complement.html">Math 307</a></p>


</section>
</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>SVD</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/</guid>
  <pubDate>Sat, 14 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/imgs/ls-sol.svg" medium="image" type="image/svg+xml"/>
</item>
</channel>
</rss>
