<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Simon Ghyselincks</title>
<link>https://chipnbits.github.io/content/eosc555/</link>
<atom:link href="https://chipnbits.github.io/content/eosc555/index.xml" rel="self" type="application/rss+xml"/>
<description>A personal page for Simon Ghyselincks</description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Tue, 22 Oct 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>Lecture 7: Applying Homotopy to Optimize Highly Non-Convex Functions</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture7/</link>
  <description><![CDATA[ 




<div class="hidden">
<p>$$ </p>
<p>$$</p>
</div>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>So far we have examined optimization techniques using gradient descent and the Gauss-Newton method. These methods are powerful but can be limited by the presence of local minima in the optimization landscape. In this lecture we will explore a technique called Gaussian homotopy that can be used to escape local minima in optimization problems.</p>
<p>To recap the steps used so far in optimization, we have an objective <img src="https://latex.codecogs.com/png.latex?%5Coperatorname*%7Bargmin%7Df(x),"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5Cmathbb%7BR%7D%5En"> is an unconstrained optimization variable. The objective can be searched out by stepping in a direction itertively, in general: <img src="https://latex.codecogs.com/png.latex?x_%7Bk+1%7D%20=%20x_k%20-%20%5Calpha_k%20H%20%5Cnabla%20f(x_k),"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Calpha_k"> is the step size. The gradient <img src="https://latex.codecogs.com/png.latex?%5Cnabla%20f(x_k)"> can be computed explicitly or using automatic differentiation. The matrix <img src="https://latex.codecogs.com/png.latex?H"> is a modifier that depends on the method being used: <img src="https://latex.codecogs.com/png.latex?H%20=%0A%5Cbegin%7Bcases%7D%0A%20%20%20%20I%20&amp;%20%5Ctext%7BGradient%20Descent%7D%20%5C%5C%0A%20%20%20%20(J%5ET%20J)%5E%7B-1%7D%20&amp;%20%5Ctext%7BGauss-Newton%7D%0A%5Cend%7Bcases%7D%0A"></p>
<p>However, optimization is often performed on non-convex functions, in which case the path to a global minimum can be obstructed by local minima. Three categories of increasingly non-convex functions are shown below.</p>
<div id="fig:function-classes" class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture7/path1.svg" class="img-fluid" style="border: 2px solid #000; padding: 20px; display: block; margin-left: auto; margin-right: auto;;width:50.0%" alt="Three Categories of Increasingly Non-Convex Functions"> <strong>Figure:</strong> Three categories of increasingly non-convex functions illustrating potential local minima that can obstruct the path to a global minimum.</p>
</div>
<p>Some examples for each of the three catergories are given in the following table:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 29%">
<col style="width: 29%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>Category</th>
<th>Function</th>
<th>Local Minima</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Convex</td>
<td><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%5E2"></td>
<td>Global minimum at <img src="https://latex.codecogs.com/png.latex?x=0"></td>
</tr>
<tr class="even">
<td>Non-Convex but <img src="https://latex.codecogs.com/png.latex?f'(x)%3C0"></td>
<td><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20-%5Cmathcal%7BN%7D(x;%200,%201)"></td>
<td>Global minimum at <img src="https://latex.codecogs.com/png.latex?x=0"></td>
</tr>
<tr class="odd">
<td>Non-Convex with <img src="https://latex.codecogs.com/png.latex?f'(x)%20%5Cgeq%200"></td>
<td><img src="https://latex.codecogs.com/png.latex?f(A,B,w)%20=%20w%5ET%20%5Csigma%20(B%20%5Csigma%20(A%20x))"></td>
<td>Multiple local minima</td>
</tr>
<tr class="even">
<td>Non-Convex and Poorly Conditioned <img src="https://latex.codecogs.com/png.latex?%5Cnabla%5E2%20f(x)"></td>
<td><img src="https://latex.codecogs.com/png.latex?f(t)%20=%20x(t)%5ET%20A%20x(t),%20%5Cquad%20x(t)%20=%20%5Ctext%7Bsquare%20wave%7D"></td>
<td>Multiple local minima and discontinuous</td>
</tr>
</tbody>
</table>
<p>To illustrate these functions even more we can plot them as well.</p>
<div id="cell-function-plot" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-5">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-6">y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-7">y3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#square wave</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_wave(x):</span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">y4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [square_wave(xi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x]</span>
<span id="cb1-14"></span>
<span id="cb1-15">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x, y1)</span>
<span id="cb1-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Convex: $f(x) = x^2$"</span>)</span>
<span id="cb1-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x, y2)</span>
<span id="cb1-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-Convex but $f'(x)&lt;0$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $f(x) = -\mathcal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{N}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(x; 0, 1)$"</span>)</span>
<span id="cb1-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(x, y3)</span>
<span id="cb1-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-Convex with $f'(x) \geq 0$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $f(x) = sin(x)+.5 x$"</span>)</span>
<span id="cb1-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x, y4)</span>
<span id="cb1-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-Convex and Poorly Conditioned $</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">abla^2 f(x)$"</span>)</span>
<span id="cb1-24"></span>
<span id="cb1-25">plt.tight_layout()</span>
<span id="cb1-26">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="function-plot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture7/index_files/figure-html/function-plot-output-1.png" width="710" height="467" class="figure-img"></p>
<figcaption>Function Categories.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="direct-search-methods" class="level2">
<h2 class="anchored" data-anchor-id="direct-search-methods">Direct Search Methods</h2>
<p>A direct search <span class="citation" data-cites="wikipedia_directsearch">(Wikipedia 2024)</span> can be performed to try to find the global minimum of a non-convex function <span class="citation" data-cites="Lewis2000">(Lewis, Torczon, and Trosset 2000)</span>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x_%7Bk+1%7D%20=%20x_k%20+%20%5Calpha_k%20d_k,%20%5Cquad%20d_k%20%5Cin%20%5Cmathbb%7BR%7D%5En."></p>
<p>In this case the direction does not follow the gradient descent rule, there could be a stochastic element. The general algorithms that implement this will have the property that the step size decreases over time such that</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5C%7C%20%5Calpha_k%20d_k%20%5C%7C%20%5Cto%200,%20%5C%20k%20%5Cto%20%5Cinfty"></p>
<p>The implementation ignores seeking information about the gradient or the Hessian of the function. Instead some points in the surrounding region are computed and the most optimal decrease for the next step is selected.</p>
<p>The method has been known since the 1950s but it fell out of favour due to the slow rate of convergence. However, with parallel computing advances it has become more feasible to use again. For a large set of direct search methods, it is possible to rigorously prove that they will converge to a local minimum <span class="citation" data-cites="Kolda2003">(Kolda, Lewis, and Torczon 2003)</span>.</p>
</section>
<section id="homotopy" class="level2">
<h2 class="anchored" data-anchor-id="homotopy">Homotopy</h2>
<p>In mathematics, homotopy refers to the continuous transformation of one function into another. In optimization, homotopy—or continuation optimization—is used to transform a highly non-convex function into a simpler, often more convex surrogate function. This approach enables the optimizer to escape local minima and approach a global minimum by incrementally tackling easier, intermediate optimization problems.</p>
<p>The core idea behind homotopy optimization is to relax a difficult optimization problem into a series of smoother problems that gradually resemble the original objective function. This relaxation process spreads the gradient and Hessian information outward, making the function landscape easier to navigate and minimizing the risk of getting stuck in local minima.</p>
<p>This can be accomplished using a convolution with a simple function as a kernel. The kernel that is used can have variable width and parameterization, there are varying degrees of relaxation which can be parameterized using a <img src="https://latex.codecogs.com/png.latex?t"> time variable. As <img src="https://latex.codecogs.com/png.latex?t%20%5Cto%200"> the function becomes more like the original function, and as <img src="https://latex.codecogs.com/png.latex?t%20%5Cto%201"> the function becomes more like the smoothing function. The homotopy between the two is parameterized by <img src="https://latex.codecogs.com/png.latex?t%20%5Cin%20%5B0,%201%5D">.</p>
<div style="text-align: center; margin: 20px 0;">
<a title="Jim.belk, CC0, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:HomotopySmall.gif"> <img width="300" alt="A continuous deformation of a path" src="https://upload.wikimedia.org/wikipedia/commons/7/7e/HomotopySmall.gif?20110614214259"> </a>
<p style="font-size: 0.9em; color: gray;">
A continuous deformation of a path. Source: <a href="https://commons.wikimedia.org/wiki/File:HomotopySmall.gif" title="Jim.belk, CC0, via Wikimedia Commons">Wikimedia Commons</a>
</p>
</div>
<section id="homotopy-optimization" class="level3">
<h3 class="anchored" data-anchor-id="homotopy-optimization">Homotopy Optimization</h3>
<p>In the case of optimization, the technique is know as homotopy optimization or continuation optimization. The optimization process starts with the smoothed function and then gradually moves back to the original function using the optimization steps from the relaxed prbolem. This is known as a continuation method, and the scheduling of the homotopy parameter <img src="https://latex.codecogs.com/png.latex?t"> is the continutation schedule. A summary description with more details and advanced techniques can be found in work by Lin et. al <span class="citation" data-cites="Lin2023">(Lin et al. 2023)</span>.</p>
<section id="example" class="level4">
<h4 class="anchored" data-anchor-id="example">Example</h4>
<p>Let <img src="https://latex.codecogs.com/png.latex?f(x)"> be the original function and <img src="https://latex.codecogs.com/png.latex?g(x)"> be the smoothing function. The homotopy function <img src="https://latex.codecogs.com/png.latex?h(x,%20t)"> can be defined as and interpolation between the two functions:</p>
<p><img src="https://latex.codecogs.com/png.latex?h(x,%20t)%20=%20(1-t)%20f(x)%20+%20t%20g(x)."></p>
<p>This new function has the important property that <img src="https://latex.codecogs.com/png.latex?h(x,0)%20=%20f(x)"> and <img src="https://latex.codecogs.com/png.latex?h(x,1)%20=%20g(x)"> so it represents a continuous path of deformation between the two functions, beginning at <img src="https://latex.codecogs.com/png.latex?t=1"> with a simpler relaxed problem and ending at <img src="https://latex.codecogs.com/png.latex?t=0"> with the original problem.</p>
<p>The new minimization problem becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Coperatorname*%7Bargmin%7D_%7B%5Cmathcal%7BX%7D%7D%20h(x,%20t)."></p>
<p>A schedule can be set up for the times so that a series of times <img src="https://latex.codecogs.com/png.latex?%5C%7Bt_0,%20t_1,%20%5Cdots%20t_k,%20%5Cldots,%20t_n%5C%7D"> are used to solve the problem. We solve at <img src="https://latex.codecogs.com/png.latex?t_0%20=%201"> and then gradually decrease the value of <img src="https://latex.codecogs.com/png.latex?t"> to <img src="https://latex.codecogs.com/png.latex?0">. The solution <img src="https://latex.codecogs.com/png.latex?x_k"> at <img src="https://latex.codecogs.com/png.latex?t_%7Bk%7D"> is used as the starting point for the next iteration <img src="https://latex.codecogs.com/png.latex?t_%7Bk+1%7D"> until reaching <img src="https://latex.codecogs.com/png.latex?t_n%20=%200">.</p>
<p>In the case where the values of <img src="https://latex.codecogs.com/png.latex?x"> may be constrained, this becomes similar to the Interior Point Method, where the constraints are relaxed and then gradually tightened.</p>
</section>
</section>
</section>
<section id="gaussian-homotopy" class="level2">
<h2 class="anchored" data-anchor-id="gaussian-homotopy">Gaussian Homotopy</h2>
<p>A common case of homotopy is the Gaussian homotopy, where the smoothing function is a Gaussian function. The Gaussian function is a widely used in signal processing and image processing due to its properties as a low-pass filter. For example, a Gaussian blur is applied to images to aid in downsampling since it preserves the lower resolution details while removing high-frequency noise that may cause aliasing.</p>
<p>To illustrate the low-pass filtering property, consider a Gaussian function <img src="https://latex.codecogs.com/png.latex?g(x)"> and its Fourier transform <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D(k)">:</p>
<p><img src="https://latex.codecogs.com/png.latex?g(x)%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%20%5Csigma%5E2%7D%7D%20e%5E%7B-%5Cfrac%7Bx%5E2%7D%7B2%5Csigma%5E2%7D%7D,%20%5Cquad%20%5Chat%7Bg%7D(k)%20=%20e%5E%7B-%5Cfrac%7Bk%5E2%20%5Csigma%5E2%7D%7B2%7D%7D."></p>
<p>The Fourier transform of the Gaussian is another Gaussian, it is an eigenfunction of the Fourier transform operator. The convolution theorem states that the convolution of two functions in the spatial domain is equivalent to the multiplication of their Fourier transforms in the frequency domain:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20%5Cast%20g(x)%20=%20%5Cmathcal%7BF%7D%5E%7B-1%7D%20%5Cleft%5B%20%5Chat%7Bf%7D(k)%20%5Chat%7Bg%7D(k)%20%5Cright%5D."></p>
<p>The convolution of a function <img src="https://latex.codecogs.com/png.latex?f(x)"> with a Gaussian <img src="https://latex.codecogs.com/png.latex?g(x)"> can be used to remove the high-frequency components of the function while allowing the low-frequency, widely spread components to remain.</p>
<p>A wide Gaussian in the time domain corresponds to a narrow Gaussian in the frequency domain, and vice versa. So a wide gaussian only lets through the lowest frequencies, while a narrow Gaussian lets through the highest frequencies. At the limit as the Gaussian becomes infinitely narrow, it becomes a delta function <img src="https://latex.codecogs.com/png.latex?g(x)%20=%20%5Cdelta(x)"> in the time domain, a constant function <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bg%7D(k)%20=%201"> in the frequency domain. The convolution of a delta function with a function <img src="https://latex.codecogs.com/png.latex?f"> is the function itself, so the delta function does not change the function. The multiplication of the function <img src="https://latex.codecogs.com/png.latex?%5Chat%20f(k)"> with the constant function <img src="https://latex.codecogs.com/png.latex?1"> is the function itself, so the constant function does not change the function in the frequency domain.</p>
<div id="gaussian-homotopy" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.fftpack <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fft, ifft, fftfreq, fftshift</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.animation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FuncAnimation</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a square wave in the time domain</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_wave(t, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb2-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Creates a square wave with a given period."""</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.where(np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> period) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time domain setup</span></span>
<span id="cb2-12">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-13">square_wave_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_wave(t)</span>
<span id="cb2-14">freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fftfreq(t.size, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb2-15">square_wave_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fft(square_wave_signal)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to update the plot for each frame, based on current sigma_t</span></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_plot(sigma_t, axs, time_text):</span>
<span id="cb2-19">    sigma_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma_t)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation in frequency domain</span></span>
<span id="cb2-20">    gaussian_time_domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma_t)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-21">    gaussian_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma_f)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-22">    filtered_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_wave_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gaussian_filter</span>
<span id="cb2-23">    smoothed_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.real(ifft(filtered_fft))</span>
<span id="cb2-24"></span>
<span id="cb2-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update each subplot with new data</span></span>
<span id="cb2-26">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].clear()</span>
<span id="cb2-27">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, gaussian_time_domain, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>)</span>
<span id="cb2-28">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gaussian Filter (Time Domain)"</span>)</span>
<span id="cb2-29">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="cb2-30">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-31">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-32"></span>
<span id="cb2-33">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].clear()</span>
<span id="cb2-34">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(fftshift(freq), fftshift(gaussian_filter), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>)</span>
<span id="cb2-35">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gaussian Low-Pass Filter (Frequency Domain)"</span>)</span>
<span id="cb2-36">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)</span>
<span id="cb2-37">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-38">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-39">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-40"></span>
<span id="cb2-41">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].clear()</span>
<span id="cb2-42">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, square_wave_signal, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb2-43">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, smoothed_signal, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb2-44">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smoothed Signal (Time Domain)"</span>)</span>
<span id="cb2-45">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="cb2-46">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-47">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-48"></span>
<span id="cb2-49">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].clear()</span>
<span id="cb2-50">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(fftshift(freq), fftshift(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(square_wave_fft)), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb2-51">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(fftshift(freq), fftshift(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(filtered_fft)), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>)</span>
<span id="cb2-52">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered Spectrum (Frequency Domain)"</span>)</span>
<span id="cb2-53">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)</span>
<span id="cb2-54">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-55">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-56">    axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-57"></span>
<span id="cb2-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the time text</span></span>
<span id="cb2-59">    time_text.set_text(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"T = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>T<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-60"></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the figure and plot layout for animation</span></span>
<span id="cb2-62">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increased figure size for animation</span></span>
<span id="cb2-63">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, square_wave_signal, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb2-64">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square Wave (Time Domain)"</span>)</span>
<span id="cb2-65">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>)</span>
<span id="cb2-66">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-67">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-68"></span>
<span id="cb2-69">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(fftshift(freq), fftshift(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(square_wave_fft)), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>)</span>
<span id="cb2-70">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fourier Transform of Square Wave (Frequency Domain)"</span>)</span>
<span id="cb2-71">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)</span>
<span id="cb2-72">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude"</span>)</span>
<span id="cb2-73">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-74">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-75"></span>
<span id="cb2-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a text annotation for time at the bottom of the figure with extra space</span></span>
<span id="cb2-77">time_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjusted position for clarity</span></span>
<span id="cb2-78"></span>
<span id="cb2-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust subplot spacing specifically for animation</span></span>
<span id="cb2-80">plt.tight_layout(rect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extra space at the bottom for time text</span></span>
<span id="cb2-81"></span>
<span id="cb2-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Animation settings</span></span>
<span id="cb2-83">steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-84"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> animate(frame):</span>
<span id="cb2-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> T  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declare T as a global variable for use in update_plot</span></span>
<span id="cb2-86">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> steps)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale frame number to a T value between 1 and 0</span></span>
<span id="cb2-87">    sigma_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> T)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Interpolate sigma_t</span></span>
<span id="cb2-88">    update_plot(sigma_t, axs, time_text)</span>
<span id="cb2-89"></span>
<span id="cb2-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and display the animation</span></span>
<span id="cb2-91">ani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FuncAnimation(fig, animate, frames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>steps, interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-92"></span>
<span id="cb2-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the animation as a GIF</span></span>
<span id="cb2-94">ani.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/gaussian_homotopy.gif'</span>, writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagemagick'</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-95"></span>
<span id="cb2-96">plt.show()</span></code></pre></div>
</details>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture7/imgs/gaussian_homotopy.gif" class="img-fluid"></p>
<p>For Gaussian homotopy, the continuous transformation between the original function and the relaxed version is given by a convolution with a Gaussian kernel. We let <img src="https://latex.codecogs.com/png.latex?%5Csigma(t)"> be the standard deviation of the Gaussian kernel at time <img src="https://latex.codecogs.com/png.latex?t">. The deviation will be <img src="https://latex.codecogs.com/png.latex?%5Csigma(0)%20=%200"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma(1)%20=%20%5Csigma_%7B%5Ctext%7Bmax%7D%7D"> so that the homotopy at any time <img src="https://latex.codecogs.com/png.latex?t"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?h(x,%20t)%20=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(x-%5Cxi)%20%5Cexp(-%5Cfrac%7B%5Cxi%5E2%7D%7B%5Csigma(t)%5E2%7D)%20d%5Cxi."></p>
<p>The Gaussian kernel should be divided by its partition function <img src="https://latex.codecogs.com/png.latex?z(t)%20=%20%5Cint%20%5Cexp(-%5Cfrac%7B%5Cxi%5E2%7D%7B%5Csigma(t)%5E2%7D)%20d%5Cxi"> in theory so that the kernel is normalized, but for the use case where <img src="https://latex.codecogs.com/png.latex?h(x,%20t)"> is used as a surrogate function for optimization, the partition function <img src="https://latex.codecogs.com/png.latex?z(t)"> does not change the minimizer of the function.</p>
<section id="stochastic-optimization" class="level3">
<h3 class="anchored" data-anchor-id="stochastic-optimization">Stochastic Optimization</h3>
<p>Since the objective is to minimize over the integral given by <img src="https://latex.codecogs.com/png.latex?h(x,%20t)">, a stochastic method can be used to estimate the minimizer in expectation using Monte Carlo methods. The integral can be approximated by sampling <img src="https://latex.codecogs.com/png.latex?N"> points from the Gaussian kernel and averaging the function values at those points:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ah(x,%20t)%20&amp;=%20%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%20f(x-%5Cxi)%20%5Cexp(-%5Cfrac%7B%5Cxi%5E2%7D%7B%5Csigma(t)%5E2%7D)%20d%5Cxi%5C%5C%0A&amp;%20=%20%5Cmathbb%7BE%7D_%7B%5Cxi%20%5Csim%20%5Cmathcal%7BN%7D(0,%20%5Csigma(t)%5E2)%7D%20f(x-%5Cxi)%20%5C%5C%0A&amp;%20%5Capprox%20%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5EN%20f(x-%5Cxi_i),%20%5Cquad%20%5Cxi_i%20%5Csim%20%5Cmathcal%7BN%7D(0,%20%5Csigma(t)%5E2).%0A%5Cend%7Balign*%7D%0A"></p>
<p>For a given <img src="https://latex.codecogs.com/png.latex?t"> and point <img src="https://latex.codecogs.com/png.latex?x"> where we want to estimate the function <img src="https://latex.codecogs.com/png.latex?h(x,%20t)">, we can sample <img src="https://latex.codecogs.com/png.latex?N"> points from a Gaussian kernel centered at <img src="https://latex.codecogs.com/png.latex?x"> with standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma(t)"> and evaluate the function at those points. The average of the function values at those points will be an estimate of the function value at <img src="https://latex.codecogs.com/png.latex?x">.</p>
</section>
<section id="implementation-choices" class="level3">
<h3 class="anchored" data-anchor-id="implementation-choices">Implementation Choices</h3>
<p>There are two ways to approach this problem when using numerical methods.</p>
<ol type="1">
<li><strong>Discretize then Optimize:</strong> The integral is first discretized by choosing a set of points <img src="https://latex.codecogs.com/png.latex?%5C%7Bxi_1,%20%5Cxi_2,%20%5Cldots,%20%5Cxi_N%5C%7D"> and then the function is evaluated using that same discrete kernel across all points:</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin_%7B%5Cmathcal%7BX%7D%7D%20%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5EN%20f(x-%5Cxi_i)."></p>
<p>This sum can end up being large if there are many points that are selected.</p>
<ol start="2" type="1">
<li><strong>Optimize then Discretize:</strong> In this case we start with gradient descent and the continuous function <img src="https://latex.codecogs.com/png.latex?h(x,%20t)"> and then sample the function at the points <img src="https://latex.codecogs.com/png.latex?%5C%7Bxi_1,%20%5Cxi_2,%20%5Cldots,%20%5Cxi_N%5C%7D"> to estimate a gradient.</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Ax_%7Bk+1%7D%20&amp;=%20x_k%20-%20%5Calpha_k%20%5Cmathbb%7BE%7D_%7B%5Cxi%7D%20%5Cnabla%20f(x_k%20-%20%5Cxi)%5C%5C%0A%20%20&amp;%5Capprox%20x_k%20-%20%5Calpha_k%20%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5EN%20%5Cnabla%20f(x_k%20-%20%5Cxi_i).%0A%5Cend%7Balign*%7D%0A"></p>
<p>This formulation can technically converge even with <img src="https://latex.codecogs.com/png.latex?%7C%20i%20%7C%20=%201"> but with very slow convergence.</p>
<hr>
<p>Now that the Gaussian homotopy has been introduced, we can move on to the implementation of the algorithm.</p>
</section>
</section>
<section id="code-implementation" class="level1">
<h1>Code Implementation</h1>
<p>As usual for studying a problem we come up with a suitable toy dataset. In this case it should be a function that has multiple minima, is non-convex, and has a poorly conditioned Hessian.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20f(x)%20=%20-%5Cexp%5Cleft(-%5Cfrac%7B(x_1%20-%202)%5E2%20+%20(x_2%20-%202)%5E2%7D%7B0.1%7D%5Cright)%20-%202%5Cexp%5Cleft(-%5Cfrac%7B(x_1%20+%202)%5E2%20+%20(x_2%20+%202)%5E2%7D%7B0.1%7D%5Cright)."></p>
<p>The function is two superimposed Gaussian functions that impose a local minimum at <img src="https://latex.codecogs.com/png.latex?(2,%202)"> and <img src="https://latex.codecogs.com/png.latex?(-2,%20-2)"> but with very little gradient information far away from the minima.</p>
<div id="cell-objective-function" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective_function(X):</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A 2D function with multiple local minima.</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X (torch.Tensor): A tensor of shape (N, 2) containing the input points.</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-11">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-12">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-13">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>((x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>((x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the function</span></span>
<span id="cb3-18">x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-19">x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-20">X1, X2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x1, x2, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb3-21">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([X1.flatten(), X2.flatten()], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-22">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> objective_function(X).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-23">plt.contourf(X1, X2, y, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-24">plt.colorbar()</span>
<span id="cb3-25">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>)</span>
<span id="cb3-26">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>)</span>
<span id="cb3-27">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Objective function'</span>)</span>
<span id="cb3-28">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="objective-function" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture7/index_files/figure-html/objective-function-output-1.png" width="601" height="449" class="figure-img"></p>
<figcaption>Objective Function of Two Gaussians.</figcaption>
</figure>
</div>
</div>
</div>
<p>The next step is to create a time parameterized function <img src="https://latex.codecogs.com/png.latex?h(x,%20t)"> that is the Gaussian homotopy of f(x). In practical terms, the starting <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7Bmax%7D%7D"> is being modified by a <img src="https://latex.codecogs.com/png.latex?t"> parameter when multiplied by the random noise. At <img src="https://latex.codecogs.com/png.latex?t=0"> the function is the original function, and at <img src="https://latex.codecogs.com/png.latex?t=1"> the function is being convolved numerically with a Gaussian kernel that is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(0,%20%5Csigma_%7B%5Ctext%7Bmax%7D%7D)">. The time points in between are a homotopy between the two functions.</p>
<div id="44f478c0" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gaussian_homotopy(func, x, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Computes the Gaussian homotopy function h(x, t) using Monte Carlo approximation.</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        func: The original objective function to be optimized.</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x: A tensor of shape (N, D), where N is the number of points and D is the dimension.</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        batch_size: Number of samples to use in Monte Carlo approximation.</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sigma: Standard deviation of the Gaussian kernel.</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        t: Homotopy parameter, varies from 0 (original function) to 1 (smoothed function).</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y: A tensor of shape (N,), the approximated h(x, t) values at each point x.</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-15">    N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape</span>
<span id="cb4-16">    </span>
<span id="cb4-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample from the t=1 gaussian kernel</span></span>
<span id="cb4-18">    kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(batch_size, D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma</span>
<span id="cb4-19">    </span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Repeat x and z to compute all combinations</span></span>
<span id="cb4-21">    x_repeated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, D)</span>
<span id="cb4-22">    kernel_repeated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel.repeat(N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-23">    </span>
<span id="cb4-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the monte carlo set of points surrounding each x</span></span>
<span id="cb4-25">    x_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_repeated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> kernel_repeated</span>
<span id="cb4-26">    </span>
<span id="cb4-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the function at the sampled points</span></span>
<span id="cb4-28">    y_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x_input)</span>
<span id="cb4-29">    </span>
<span id="cb4-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape and average over the batch size to approximate the expectation</span></span>
<span id="cb4-31">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_input.view(N, batch_size).mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span></code></pre></div>
</details>
</div>
<p>This variation of the function can be seen as having extra parameters:</p>
<p><img src="https://latex.codecogs.com/png.latex?h(x,t,%5Csigma_%7B%5Ctext%7Bmax%7D%7D,%20N)%20=%20%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5EN%20f(x-%5Cxi_i),%20%5Cquad%20%5Cxi_i%20%5Csim%20%5Cmathcal%7BN%7D(0,%20t%20%5Ccdot%20%5Csigma_%7B%5Ctext%7Bmax%7D%7D)."></p>
<p>The time parameter is modulating the standard deviation of the Gaussian kernel, and the number of samples <img src="https://latex.codecogs.com/png.latex?N"> is used to approximate the expectation of the function at each point. As time goes to zero we approach the original function. Now applying an animation to this it is possible to see the stochastic homotopy in action.</p>
<div id="homotopy-animation" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create grid points</span></span>
<span id="cb5-2">t_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>)</span>
<span id="cb5-3">x_grid, y_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(t_values, t_values, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ij"</span>)</span>
<span id="cb5-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([x_grid.flatten(), y_grid.flatten()], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the range of homotopy parameters</span></span>
<span id="cb5-7">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize figure</span></span>
<span id="cb5-10">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(i):</span>
<span id="cb5-13">    ax1.clear()</span>
<span id="cb5-14">    ax2.clear()</span>
<span id="cb5-15"></span>
<span id="cb5-16">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T[i]</span>
<span id="cb5-17">    y_original <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> objective_function(X).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>).detach().numpy()</span>
<span id="cb5-18">    y_homotopy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussian_homotopy(objective_function, X, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12000</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>).detach().numpy()</span>
<span id="cb5-19"></span>
<span id="cb5-20">    ax1.contourf(t_values.numpy(), t_values.numpy(), y_original, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viridis"</span>)</span>
<span id="cb5-21">    ax1.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Function"</span>)</span>
<span id="cb5-22">    ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>)</span>
<span id="cb5-23">    ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>)</span>
<span id="cb5-24"></span>
<span id="cb5-25">    ax2.contourf(t_values.numpy(), t_values.numpy(), y_homotopy, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viridis"</span>)</span>
<span id="cb5-26">    ax2.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Homotopy Function (t = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb5-27">    ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>)</span>
<span id="cb5-28">    ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>)</span>
<span id="cb5-29"></span>
<span id="cb5-30">    plt.tight_layout()</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create animation</span></span>
<span id="cb5-33">ani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FuncAnimation(fig, update, frames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(T), interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save as GIF</span></span>
<span id="cb5-36">ani.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/homotopy_2d.gif"</span>, writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imagemagick"</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</details>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture7/imgs/homotopy_2d.gif" class="img-fluid" style="width:100.0%"></p>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This lecture has covered the theory behind homotopy, its action in the frequency and time domain, and its purpose in optimization. A scheme for continuation scheduling for the optimization along with the homotopy is a field of active research. A more detailed analysis to implement the technique in a practical setting can be understood from Lin et. al <span class="citation" data-cites="Lin2023">(Lin et al. 2023)</span>.</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Kolda2003" class="csl-entry">
Kolda, Tamara G., Robert Michael Lewis, and Virginia Torczon. 2003. <span>“Optimization by Direct Search: New Perspectives on Some Classical and Modern Methods.”</span> <em>SIAM Review</em> 45 (3): 385–482. <a href="https://doi.org/10.1137/s003614450242889">https://doi.org/10.1137/s003614450242889</a>.
</div>
<div id="ref-Lewis2000" class="csl-entry">
Lewis, Robert Michael, Virginia Torczon, and Michael W. Trosset. 2000. <span>“Direct Search Methods: Then and Now.”</span> <em>Journal of Computational and Applied Mathematics</em> 124 (1–2): 191–207. <a href="https://doi.org/10.1016/s0377-0427(00)00423-4">https://doi.org/10.1016/s0377-0427(00)00423-4</a>.
</div>
<div id="ref-Lin2023" class="csl-entry">
Lin, Xi, Zhiyuan Yang, Xiaoyuan Zhang, and Qingfu Zhang. 2023. <span>“Continuation Path Learning for Homotopy Optimization.”</span> arXiv. <a href="https://doi.org/10.48550/ARXIV.2307.12551">https://doi.org/10.48550/ARXIV.2307.12551</a>.
</div>
<div id="ref-wikipedia_directsearch" class="csl-entry">
Wikipedia. 2024. <span>“Pattern Search (Optimization).”</span> <a href="https://en.wikipedia.org/wiki/Pattern_search_(optimization)">https://en.wikipedia.org/wiki/Pattern_search_(optimization)</a>.
</div>
</div></section></div> ]]></description>
  <category>Optimization</category>
  <category>PyTorch</category>
  <category>Homotopy</category>
  <category>Fourier Transform</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture7/</guid>
  <pubDate>Tue, 22 Oct 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture7/imgs/gaussian_homotopy.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Lecture 6: Autodiff and Implementing Gauss-Newton</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture6/</link>
  <description><![CDATA[ 




<div class="hidden">
<p>$$ </p>
<p>$$</p>
</div>
<section id="automatic-differentiation" class="level1">
<h1>Automatic Differentiation</h1>
<p>Returning to the Lotka-Volterra model, we can now use automatic differentiation to compute the Jacobian matrix of the forward model. In fact, it can be shown that we can perform Gauss-Newton optimization more efficiently by using the Jacobian-vector product (JVP) and the vector-Jacobian product (VJP) instead of the full Jacobian matrix, since in the algorithm what we are truly interested in is the product of the Jacobian with a vector or its transpose. This equates to a directional derivative.</p>
<section id="application-to-the-lotka-volterra-model" class="level3">
<h3 class="anchored" data-anchor-id="application-to-the-lotka-volterra-model">Application to the Lotka-Volterra Model</h3>
<p>Take a forward model <img src="https://latex.codecogs.com/png.latex?F(p)"> for which we want a linear approximation at <img src="https://latex.codecogs.com/png.latex?p_k">. We can write the Taylor expansion of the forward model as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20F(p_k%20+%20%5Cepsilon%20v)%20=%20F(p_k)%20+%20J_k%20%5Cepsilon%20v%20+%20%5Cmathcal%7BO%7D(%5Cepsilon%5E2)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?J_k"> is the Jacobian of <img src="https://latex.codecogs.com/png.latex?F(p_k)">. If we take the derivative of both sides in this expansion with respect to <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cfrac%7Bd%7D%7Bd%20%5Cepsilon%7D%20F(p_k%20+%20%5Cepsilon%20v)%20=%20J_k%20v%20+%20%5Cmathcal%7BO%7D(%5Cepsilon)"></p>
<p>If we make <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> very small then the Jacobian of the forward problem can be numerically approximated and bounded by a small <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(%5Cepsilon)">. The next step to fully recover the Jacobian is to take the gradient with respect to <img src="https://latex.codecogs.com/png.latex?v"> of the left-hand side of the equation.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cnabla_v%20%5Cfrac%7Bd%7D%7Bd%20%5Cepsilon%7D%20F(p_k%20+%20%5Cepsilon%20v)%20=%20J_k"></p>
<p>The gradient with respect to <img src="https://latex.codecogs.com/png.latex?v"> can be traced through with automatic differentiation. So we apply a chain of operations, the <code>pytorch</code> Jacobian vector product, followed by backpropagation on a surrogate <img src="https://latex.codecogs.com/png.latex?v"> that was passed to the function to get the Jacobian of the forward model. The same principles can be used to recover <img src="https://latex.codecogs.com/png.latex?J_k%5ET">.</p>
<p>There is also the direct method that is avaible for computing the Jacobian matrix using the torch library. Both cases are shown below. Note that the tensors have a <code>requires_grad=True</code> flag set to allow for the gradients to be computed, it indicates that the tensor is part of the computational graph for backpropagation and tracing by how much each element of <img src="https://latex.codecogs.com/png.latex?v"> contributed to the <code>jvp</code> result.</p>
<p>The fundamental use of the <code>jvp</code> or the <code>vjp</code> is to compute the directional derivate or its transpose without computing the gradient with respect to <img src="https://latex.codecogs.com/png.latex?v">. This is because the jacobian matrix encodes the directional derivatives of the function at a point.</p>
<p><img src="https://latex.codecogs.com/png.latex?d_k%20=%20J_k%5ET%20v"></p>
<div id="jvp" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.autograd.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jvp</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.autograd.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jacobian</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a simple forward function</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> F(p):</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.stack([p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input point p_k</span></span>
<span id="cb1-12">p_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>])</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arbitrary vector v, same size as p_k</span></span>
<span id="cb1-15">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Jacobian-vector product (J(p) * v)</span></span>
<span id="cb1-18">F_output, jvp_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jvp(F, (p_k,), v, create_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function output:"</span>)</span>
<span id="cb1-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(F_output)</span>
<span id="cb1-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jacobian-vector product:"</span>)</span>
<span id="cb1-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(jvp_result)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a list to store each row of the Jacobian</span></span>
<span id="cb1-25">jacobian_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the gradient of each component of the JVP result separately, retaining the graph to avoid re-computation</span></span>
<span id="cb1-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(F_output.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb1-28">    v.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the gradient</span></span>
<span id="cb1-29">    jvp_result.backward(</span>
<span id="cb1-30">        torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(F_output.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])]),</span>
<span id="cb1-31">        retain_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-32">    )</span>
<span id="cb1-33">    jacobian_rows.append(v.grad.clone())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append the gradient (row of the Jacobian)</span></span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stack the rows to get the full Jacobian matrix</span></span>
<span id="cb1-36">jacobian_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(jacobian_rows, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the Jacobian matrix</span></span>
<span id="cb1-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jacobian matrix at p_k:"</span>)</span>
<span id="cb1-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(jacobian_matrix)</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the full Jacobian matrix directly</span></span>
<span id="cb1-43">jacobian_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jacobian(F, p_k)</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the Jacobian matrix</span></span>
<span id="cb1-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jacobian matrix at p_k:"</span>)</span>
<span id="cb1-47"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(jacobian_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Function output:
tensor([2., 2.], grad_fn=&lt;StackBackward0&gt;)
Jacobian-vector product:
tensor([3., 4.], grad_fn=&lt;AddBackward0&gt;)
Jacobian matrix at p_k:
tensor([[2., 1.],
        [1., 3.]])
Jacobian matrix at p_k:
tensor([[2., 1.],
        [1., 3.]])</code></pre>
</div>
</div>
</section>
</section>
<section id="fitting-the-lotka-volterra-model-in-pytorch" class="level1">
<h1>Fitting the Lotka-Volterra Model in PyTorch</h1>
<p>Now, all the previous theory can be combined to form a PyTorch training loop that will solve the non-linear least squares problem using the Gauss-Newton method, utilizing the conjugate gradient method to solve the normal equations involved. The data will be fit exclusively to the prey population of the Lotka-Volterra model. This is a simulation of a scenario where the predatory population is not observed and may be difficult to measure, but more reliable measurements are availble from the prey population.</p>
<p>To make the solution components easier to understand, they are separated into different class objects that contain the necessary components for each part of the solution. The main ingredients that will be required are:</p>
<ol type="1">
<li><strong>ODE Integrator</strong>
<ul>
<li>Implements the Runge-Kutta 4th Order Method for numerically solving ordinary differential equations (ODEs).</li>
</ul></li>
<li><strong>Trainable Lotka-Volterra Model</strong>
<ul>
<li>A class that incorporates PyTorch’s gradient tracking to enable training of the Lotka-Volterra model parameters.</li>
</ul></li>
<li><strong>Gauss-Newton Optimizer</strong>
<ul>
<li>A class designed to solve the non-linear least squares problem efficiently using the Gauss-Newton optimization technique.</li>
</ul></li>
<li><strong>Conjugate Gradient Descent Function</strong>
<ul>
<li>A function implemented to perform conjugate gradient descent, which is utilized to solve the normal equations arising in the Gauss-Newton method.</li>
</ul></li>
</ol>
<hr>
<section id="rk4-and-lotka-volterra-model" class="level3">
<h3 class="anchored" data-anchor-id="rk4-and-lotka-volterra-model">RK4 and Lotka-Volterra Model</h3>
<p>The Runge-Kutta 4th order method is a numerical solver for ODEs that is of higher order than the Euler method, reducing the error in the solution to <img src="https://latex.codecogs.com/png.latex?O(h%5E4)">. A more detailed description of the method can be found in the <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">Wikipedia article</a>.</p>
<p>The Lotka-Volterra model is implemented this time in PyTorch, but to run the custom optimization algorithm, it is better to avoid the object-oriented approach and use a functional form of the model. The model is defined as a function that takes the parameters and returns the population at the next time step. The model is also made time variant by adding a perturbation term to the parameters.</p>
<div id="cell-lotka-volterra" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> runge_kutta_4(func, x0, params, time_horizon, time_steps):</span>
<span id="cb3-6">    dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time_horizon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> time_steps</span>
<span id="cb3-7">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x0]</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(time_steps):</span>
<span id="cb3-9">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-10">        k1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x, params[i])</span>
<span id="cb3-11">        k2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, params[i])</span>
<span id="cb3-12">        k3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, params[i])</span>
<span id="cb3-13">        k4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3, params[i])</span>
<span id="cb3-14">        X_next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (k1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k4)</span>
<span id="cb3-15">        X.append(X_next)</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.stack(X, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lv_func(x, params):</span>
<span id="cb3-20">    alpha, beta, gamma, delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb3-21">    dxdt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-22">    dxdt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prey population change</span></span>
<span id="cb3-23">    dxdt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predator population change</span></span>
<span id="cb3-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dxdt</span>
<span id="cb3-25"></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lotka_volterra(params, x0, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simulate the Lotka-Volterra model using the Runge-Kutta 4 method.</span></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params (torch.Tensor): The parameters of the Lotka-Volterra model.</span></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    x0 (torch.Tensor): The initial population of prey and predators.</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    T (float): The time horizon of the simulation.</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    nt (int): The number of time steps to simulate.</span></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    torch.Tensor: The population of prey and predators at each time step.</span></span>
<span id="cb3-39"></span>
<span id="cb3-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes:</span></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The parameters should be in the order alpha, beta, gamma, delta.</span></span>
<span id="cb3-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    They can either be fixed as [4,] or time-varying as [nt, 4].</span></span>
<span id="cb3-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-44"></span>
<span id="cb3-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if params has shape [4,] and expand to [nt, 4] if needed</span></span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> params.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> params.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb3-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Repeat params along the time dimension to make it [nt, 4]</span></span>
<span id="cb3-48">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).expand(nt, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> params.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> (nt, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb3-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"params must be either [4,] or [nt, 4]"</span>)</span>
<span id="cb3-51"></span>
<span id="cb3-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Proceed with the Runge-Kutta 4 integration</span></span>
<span id="cb3-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> runge_kutta_4(lv_func, x0, params, T, nt)</span>
<span id="cb3-54"></span>
<span id="cb3-55"></span>
<span id="cb3-56">period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time horizon as a single float</span></span>
<span id="cb3-57">n_time_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb3-58">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-59">initial_pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>])</span>
<span id="cb3-60"></span>
<span id="cb3-61">solution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(params, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb3-62"></span>
<span id="cb3-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the results</span></span>
<span id="cb3-64">plt.plot(solution[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prey"</span>)</span>
<span id="cb3-65">plt.plot(solution[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predator"</span>)</span>
<span id="cb3-66">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time Steps"</span>)</span>
<span id="cb3-67">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)</span>
<span id="cb3-68">plt.legend()</span>
<span id="cb3-69">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="lotka-volterra" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/index_files/figure-html/lotka-volterra-output-1.png" width="626" height="429" class="figure-img"></p>
<figcaption>The Lotka-Volterra model implemented in PyTorch.</figcaption>
</figure>
</div>
</div>
</div>
<p>To take the model a step further, it can be used to generate a toy dataset that will be used to fit the model parameters using the Gauss-Newton optimization method. To make a dataset that will not have a perfect fit, the time variant parameters and the pertubation variables are used to produce and interesting dataset. We define a function that can generate multiple realizations of the Lotka-Volterra model with perturbations. Then select the first realization to plot the time series and phase space of the model.</p>
<div id="4a182145" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LineCollection</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pad</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_data_set(</span>
<span id="cb4-7">    initial_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>initial_pop, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.0</span>, n_time_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, n_realizations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb4-8">):</span>
<span id="cb4-9">    pop_data_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-10">    perturbations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-11"></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> run_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_realizations):</span>
<span id="cb4-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Computing realization </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_realizations<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate noise for perturbing alpha across time steps</span></span>
<span id="cb4-16">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(</span>
<span id="cb4-17">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_time_steps</span>
<span id="cb4-18">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape [1, n_time_steps] for a single parameter over time</span></span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Smooth out the noise to resemble realistic fluctuations</span></span>
<span id="cb4-20">            noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad(noise, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reflect"</span>)</span>
<span id="cb4-21">            noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (noise[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-22">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> noise.squeeze()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape [n_time_steps]</span></span>
<span id="cb4-23"></span>
<span id="cb4-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base parameters without perturbation, as shape [n_time_steps, 4]</span></span>
<span id="cb4-25">        base_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).expand(n_time_steps, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-26"></span>
<span id="cb4-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply perturbation to alpha (the first parameter)</span></span>
<span id="cb4-28">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_params.clone()</span>
<span id="cb4-29">        params[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> noise  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify alpha over time</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solve ODE with perturbed parameters</span></span>
<span id="cb4-32">        pop_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(params, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb4-33"></span>
<span id="cb4-34">        pop_data_runs.append(pop_data)</span>
<span id="cb4-35">        perturbations.append(noise)</span>
<span id="cb4-36"></span>
<span id="cb4-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pop_data_runs, perturbations</span>
<span id="cb4-38"></span>
<span id="cb4-39"></span>
<span id="cb4-40">initial_pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-41">XX, M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_data_set(</span>
<span id="cb4-42">    initial_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>initial_pop, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, n_time_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps, n_realizations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-43">)</span>
<span id="cb4-44"></span>
<span id="cb4-45">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-46">pert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-47">d_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the prey population as the data to fit</span></span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time series plot</span></span>
<span id="cb4-50">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>))</span>
<span id="cb4-51">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-52">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prey"</span>)</span>
<span id="cb4-53">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predator"</span>)</span>
<span id="cb4-54">plt.plot(pert.detach(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Perturbation"</span>)</span>
<span id="cb4-55">plt.legend()</span>
<span id="cb4-56">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time Series"</span>)</span>
<span id="cb4-57"></span>
<span id="cb4-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phase space plot with color gradient</span></span>
<span id="cb4-59">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-60"></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data for LineCollection</span></span>
<span id="cb4-62">prey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach().numpy()</span>
<span id="cb4-63">predator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach().numpy()</span>
<span id="cb4-64">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([prey, predator]).T.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-65">segments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([points[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], points[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-66"></span>
<span id="cb4-67">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viridis"</span></span>
<span id="cb4-68"></span>
<span id="cb4-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a LineCollection with the chosen colormap</span></span>
<span id="cb4-70">lc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LineCollection(segments, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.Normalize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-71">lc.set_array(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(segments)))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize color range to [0,1]</span></span>
<span id="cb4-72">lc.set_linewidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-73"></span>
<span id="cb4-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the LineCollection to the plot</span></span>
<span id="cb4-75">plt.gca().add_collection(lc)</span>
<span id="cb4-76"></span>
<span id="cb4-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set plot limits to the data range</span></span>
<span id="cb4-78">plt.xlim(prey.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), prey.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb4-79">plt.ylim(predator.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), predator.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb4-80"></span>
<span id="cb4-81">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Phase Space with Time-Varying Color"</span>)</span>
<span id="cb4-82">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prey Population"</span>)</span>
<span id="cb4-83">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predator Population"</span>)</span>
<span id="cb4-84"></span>
<span id="cb4-85">plt.tight_layout()</span>
<span id="cb4-86">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Computing realization 1/1</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/index_files/figure-html/cell-4-output-2.png" width="710" height="422" class="figure-img"></p>
<figcaption>Time variant Lotka-Volterra model with perturbations.</figcaption>
</figure>
</div>
</div>
</div>
<p>As can be seen by the data, the pertubations over time make the dynamics of the system only roughly periodic. This will make the optimization problem more interesting to solve.</p>
</section>
<section id="jacobian-vector-product-and-directional-derivatives" class="level3">
<h3 class="anchored" data-anchor-id="jacobian-vector-product-and-directional-derivatives">Jacobian Vector Product and Directional Derivatives</h3>
<p>Now is a good time to code and check a working system to take the jacobian vector products that are required for the Gauss-Newton method using the functions defined earlier. We will assume that we have the prey data and we are trying to recover. To check the correctness of the coding, we can compare the results of the <code>jvp</code> and the <code>vjp</code> functions by checking using the adjoint. The value <img src="https://latex.codecogs.com/png.latex?%5Clangle%20w,%20J_k%20v%20%5Crangle"> is scalar and so it should equal its transpose: <img src="https://latex.codecogs.com/png.latex?%20%5Clangle%20w,%20J_k%20v%20%5Crangle%20=%20%5Clangle%20v,%20J_k%5ET%20w%20%20%5Crangle"></p>
<p>One other thing to note is that both the <code>jvp</code> and the <code>vjp</code> functions will output the value of the function evaluated at the point that is passed to it, about which the jacobian is computed. So we get both <img src="https://latex.codecogs.com/png.latex?F(p)"> and <img src="https://latex.codecogs.com/png.latex?J_k%20v"> from the <code>jvp</code> function, and a similar result for the <code>vjp</code> function.</p>
<div id="jacobian-vector-product" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.autograd.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jvp, vjp</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fix all parts of the problem except the parameters</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward_model(params):</span>
<span id="cb6-5">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(params, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb6-6">    prey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prey</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set an initial guess for the parameters</span></span>
<span id="cb6-10">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-11">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(params)</span>
<span id="cb6-12"></span>
<span id="cb6-13">d, q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jvp(forward_model, params, v)</span>
<span id="cb6-14"></span>
<span id="cb6-15">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(d)</span>
<span id="cb6-16">d, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vjp(forward_model, params, w)</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check adjoint consistency</span></span>
<span id="cb6-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w), torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(-27.4492) tensor(-27.4493)</code></pre>
</div>
</div>
</section>
<section id="conjugate-gradient-descent-and-gauss-newton-optimizer" class="level3">
<h3 class="anchored" data-anchor-id="conjugate-gradient-descent-and-gauss-newton-optimizer">Conjugate Gradient Descent and Gauss-Newton Optimizer</h3>
<p>The Gauss-Newton method will need to make use of some important subfunctions to operate efficiently. One will be the computation of its components using the <code>jvp</code> and <code>vjp</code> functions, and the other will be the conjugate gradient descent method to solve the normal equations.</p>
<p>To implement this in code, we will also need to make a conjugate gradient solver for the problem <img src="https://latex.codecogs.com/png.latex?%20J_G(p_k)%5ET%20J_G(p_k)s_k%20=%20J_k%5ET%20r_k"></p>
<p>keeping in mind that we want to avoid explicit computation of the entire jacobian when the goal is only to take a directional derivative. To do this the <img src="https://latex.codecogs.com/png.latex?J_G(p_k)%5ET%20J_G(p_k)"> operator can be coded as a single function <code>Hmv</code> that takes a vector and returns the product of the Hessian estimate with the vector. We then use this defined function in a standard implementation of the conjugate gradient method. The conjugate gradient method below has been setup to accept a callable funtion <img src="https://latex.codecogs.com/png.latex?A"> that acts like the matrix operator <img src="https://latex.codecogs.com/png.latex?A">, except we have bypassed the need to compute the full matrix, since we are only ever using it with a product.</p>
<div id="conjugate-gradient" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Hmv(forProb, p, sk):</span>
<span id="cb8-4">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.jvp(forProb, p, sk)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-5">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.vjp(forProb, p, q)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> conj_gradient(A, b, x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, niter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Solve Ax = b using the conjugate gradient method.</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Paramters:</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A (callable): A function that computes the matrix-vector product Ax.</span></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        b (torch.Tensor): The right-hand side vector.</span></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x0 (torch.Tensor, optional): The initial guess. Defaults to None.</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        niter (int, optional): Maximum number of iterations. Defaults to 20.</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tol (float, optional): Tolerance for the residual. Defaults to 1e-2.</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        alpha (float, optional): Step size for the conjugate gradient method. Defaults to 1e-2.</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-21">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-23">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> A(x0)</span>
<span id="cb8-24"></span>
<span id="cb8-25">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r</span>
<span id="cb8-26">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(b)</span>
<span id="cb8-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(niter):</span>
<span id="cb8-28">        Hq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A(q)</span>
<span id="cb8-29">        alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Hq).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-30">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q</span>
<span id="cb8-31">        rnew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Hq</span>
<span id="cb8-32">        beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (rnew<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-33">        q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q</span>
<span id="cb8-34">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnew.clone()</span>
<span id="cb8-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb8-36">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iter = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%3d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    res = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%3.2e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (i, r.norm() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b.norm()))</span>
<span id="cb8-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r.norm() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b.norm() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tol:</span>
<span id="cb8-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb8-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span>
<span id="cb8-40"></span>
<span id="cb8-41">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(Hmv, forward_model, params)</span>
<span id="cb8-42">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.vjp(forward_model, params, d_true)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-43"></span>
<span id="cb8-44">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conj_gradient(A, b, niter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>)</span>
<span id="cb8-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>iter =   0    res = 1.15e+00
iter =   1    res = 5.48e-02
iter =   2    res = 1.47e-02
iter =   3    res = 2.79e-02
iter =   4    res = 3.56e-03
tensor([-2.3992, -3.3430,  4.1509,  3.3726])</code></pre>
</div>
</div>
</section>
<section id="building-the-gauss-newton-optimizer" class="level2">
<h2 class="anchored" data-anchor-id="building-the-gauss-newton-optimizer">Building the Gauss-Newton Optimizer</h2>
<p>Recall the algorithm for the Gauss-Newton method:</p>
<div class="pseudocode-container quarto-float" data-line-number="true" data-caption-prefix="Algorithm" data-no-end="false" data-pseudocode-number="1" data-comment-delimiter="//" data-line-number-punc=":" data-indent-size="1.2em">
<div class="pseudocode">
\begin{algorithm} \caption{Gauss-Newton Algorithm for Non-linear Least Squares}\begin{algorithmic} \State \textbf{Input:} Initial guess $p_0$, maximum iterations $K$, tolerance $\epsilon$ \State \textbf{Initialize} $p_0$ \For{$k = 0, 1, 2, \ldots$} \State Compute the Jacobian $J_G$ of $G(p)$ at $p_k$ \State Compute the transpose $J_G^T$ of the Jacobian \State Compute the residual $r_k =G(p_k)$ (forward model) \State Compute the step $s_k = (J_G(p_k)^T J_G(p_k) )^{-1} J_G(p_k)^T r_k$ \State Update the parameters $p_{k+1} = p_k + \mu_k s_k$ \If{$\|s_k\| &lt; \epsilon$} \State \textbf{Stop} \EndIf \EndFor \State \textbf{Output:} $p_{k+1}$ as the optimal solution \end{algorithmic} \end{algorithm}
</div>
</div>
<p>Then combining all the previous stages of code we have:</p>
<div id="gauss-newton" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fix all parts of the problem except the parameters</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward_model(params):</span>
<span id="cb10-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(params, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb10-4">    prey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prey</span>
<span id="cb10-6"></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gauss_newton_solver(forward_model, p0, data, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Solve a non-linear least squares problem using the Gauss-Newton method.</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        forward_model (callable): A function that computes the forward model.</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        p0 (torch.Tensor): The initial guess for the parameters.</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data (torch.Tensor): The observed data to fit to.</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_iter (int): Maximum number of iterations. Defaults to 100.</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tol (float): Tolerance for the residual. Defaults to 1e-6.</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        mu (float): Step size for the Gauss-Newton method. Defaults to 1.</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        verbose (bool): Whether to print iteration information. Defaults to True.</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-21"></span>
<span id="cb10-22">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To store predictions at each iteration for animation</span></span>
<span id="cb10-23">    </span>
<span id="cb10-24">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0</span>
<span id="cb10-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_iter):</span>
<span id="cb10-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute residual</span></span>
<span id="cb10-27">        data_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_model(params)</span>
<span id="cb10-28">        rk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data_pred</span>
<span id="cb10-29">        </span>
<span id="cb10-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the current predicted data for animation</span></span>
<span id="cb10-31">        predictions.append(data_pred.detach())</span>
<span id="cb10-32">        </span>
<span id="cb10-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute parts for conjugate gradient</span></span>
<span id="cb10-34">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.vjp(forward_model, params, rk)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-35">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> A(sk):</span>
<span id="cb10-36">            q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.jvp(forward_model, params, sk)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-37">            a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.functional.vjp(forward_model, params, q)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a</span>
<span id="cb10-39">        s_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conj_gradient(A, b, niter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-40">        </span>
<span id="cb10-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update parameters</span></span>
<span id="cb10-42">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s_k</span>
<span id="cb10-43">        </span>
<span id="cb10-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for convergence</span></span>
<span id="cb10-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> s_k.norm() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tol:</span>
<span id="cb10-46">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Converged in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> iterations'</span>)</span>
<span id="cb10-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb10-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb10-49">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Residual = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>norm()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-50">    </span>
<span id="cb10-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> params, predictions</span></code></pre></div>
</div>
<section id="testing-the-gauss-newton-optimizer" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-gauss-newton-optimizer">Testing the Gauss-Newton Optimizer</h3>
<p>A run of the Gauss-Newton optimization method can be performed on the Lotka-Volterra model to fit the prey population data. The optimization method will be run for a maximum of <img src="https://latex.codecogs.com/png.latex?40"> iterations with a tolerance that will exit early if the step size becomes small enough indicating a local minimum. The results of the optimization can be plotted against the true data, both prey and predator, to see how well the optimization method has performed to recover the missing predator population.</p>
<div id="cell-gauss-newton-test" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time horizon as a single float</span></span>
<span id="cb11-2">n_time_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb11-3">initial_pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Making a true data set to fit to</span></span>
<span id="cb11-6">XX, M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_data_set(</span>
<span id="cb11-7">    initial_pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>initial_pop, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, n_time_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps, n_realizations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-8">)</span>
<span id="cb11-9">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XX[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-10">d_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the prey population as the data to fit</span></span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with an initial guess for the parameters</span></span>
<span id="cb11-13">p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solve the problem</span></span>
<span id="cb11-16">p_opt, predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_newton_solver(</span>
<span id="cb11-17">    forward_model, p0, d_true, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-18">)</span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a final plot of the both pred prey true data and the predicted data</span></span>
<span id="cb11-21">X_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(p_opt, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb11-22"></span>
<span id="cb11-23">plt.figure()</span>
<span id="cb11-24">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Prey Population"</span>)</span>
<span id="cb11-25">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Predator Population"</span>)</span>
<span id="cb11-26">plt.plot(X_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Prey Population"</span>)</span>
<span id="cb11-27">plt.plot(X_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Predator Population"</span>)</span>
<span id="cb11-28">plt.legend()</span>
<span id="cb11-29">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time Steps"</span>)</span>
<span id="cb11-30">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)</span>
<span id="cb11-31">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True vs Predicted Population"</span>)</span>
<span id="cb11-32">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Computing realization 1/1</code></pre>
</div>
<div class="cell-output cell-output-display">
<div id="gauss-newton-test" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/index_files/figure-html/gauss-newton-test-output-2.png" width="622" height="449" class="figure-img"></p>
<figcaption>Testing the Gauss-Newton optimization method.</figcaption>
</figure>
</div>
</div>
</div>
<p>The plot outputs the successive iterations of the method and the data of the forward model as it is fitting in the predicitons tensor. The optimization process can be animated from the successive predictions to get a visual understanding of the optimization method.</p>
<div id="animation" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.animation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FuncAnimation</span>
<span id="cb13-2"></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_animation(true_data, predictions, filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/fitting_animation.gif"</span>):</span>
<span id="cb13-5">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb13-6">    (line1,) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.plot([], [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r-"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Fit"</span>)</span>
<span id="cb13-7">    (line2,) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.plot([], [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Data"</span>)</span>
<span id="cb13-8">    ax.legend()</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set titles and labels</span></span>
<span id="cb13-11">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time Steps"</span>)</span>
<span id="cb13-12">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)</span>
<span id="cb13-13"></span>
<span id="cb13-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb13-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set x and y limits based on true_data and predictions</span></span>
<span id="cb13-16">        ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(true_data))</span>
<span id="cb13-17">        ax.set_ylim(</span>
<span id="cb13-18">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(true_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb13-19">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(true_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb13-20">        )</span>
<span id="cb13-21">        line2.set_data(</span>
<span id="cb13-22">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(true_data)), true_data</span>
<span id="cb13-23">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set true data once, as it remains constant</span></span>
<span id="cb13-24">        ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration: 0"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial title for iteration count</span></span>
<span id="cb13-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> line1, line2</span>
<span id="cb13-26"></span>
<span id="cb13-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(i):</span>
<span id="cb13-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update predicted data and title with the current iteration count</span></span>
<span id="cb13-29">        line1.set_data(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(predictions[i])), predictions[i])</span>
<span id="cb13-30">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Iteration: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> line1, line2</span>
<span id="cb13-32"></span>
<span id="cb13-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create animation with updated frames</span></span>
<span id="cb13-34">    ani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FuncAnimation(fig, update, frames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(predictions), init_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>init, blit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-35">    ani.save(filename, writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imagemagick"</span>)</span>
<span id="cb13-36"></span>
<span id="cb13-37"></span>
<span id="cb13-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the animation</span></span>
<span id="cb13-39">create_animation(</span>
<span id="cb13-40">    d_true.cpu().detach().numpy(),</span>
<span id="cb13-41">    [pred.cpu().numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pred <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> predictions],</span>
<span id="cb13-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imgs/fitting_animation.gif"</span>,</span>
<span id="cb13-43">)</span></code></pre></div>
</details>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/imgs/fitting_animation.gif" class="img-fluid" width="600"></p>
</section>
</section>
<section id="extension-to-time-varying-parameters" class="level2">
<h2 class="anchored" data-anchor-id="extension-to-time-varying-parameters">Extension to Time Varying Parameters</h2>
<p>Although the previous examples have been for a fixed set of parameters, it is entirely possible in natural systems that the parameters of the model are time dependent. The formulation of the Lotka-Volterra model has incorporated this design from the start by expanding the initial four parameters across the time dimension. However we can pass a full tensor of time varying parameters that is size <img src="https://latex.codecogs.com/png.latex?%5Bnt,%204%5D"> to the model and the optimization algorithm. The rest of the code does not change at all since the PyTorch library can perform the required gradient computations on a 2D tensor as well.</p>
<p>The range of possible solutions and the dimensionality of the problem expands from <img src="https://latex.codecogs.com/png.latex?4"> parameters to <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%20nt"> parameters which means more parameters than there are actual data points. This means that any set of data could be fit perfectly, but it might not be the correct fit. This issue is a hallmark of ill-posed inverse problems. The optimization algorithm will still converge to a solution, but it might not be the correct one.</p>
<p>Since the ground truth of both predator and prey populations is known, the optimization algorithm can be run with time dependent parameters which will allow more overfitting. The parameters being fixed in time is a sort of regularization that can applied to the problem, and removing it will change the results of the optimization.</p>
<div id="cell-time-varying-parameters" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with an initial guess for the parameters</span></span>
<span id="cb14-2">p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>], requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extend p0 to repeat over the time steps with individual gradients</span></span>
<span id="cb14-4">p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).expand(n_time_steps, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solve the problem</span></span>
<span id="cb14-7">p_opt, predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauss_newton_solver(</span>
<span id="cb14-8">    forward_model, p0, d_true, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb14-9">)</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a final plot of the both pred prey true data and the predicted data</span></span>
<span id="cb14-12">X_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lotka_volterra(p_opt, initial_pop, T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period, nt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_time_steps)</span>
<span id="cb14-13"></span>
<span id="cb14-14">plt.figure()</span>
<span id="cb14-15">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Prey Population"</span>)</span>
<span id="cb14-16">plt.plot(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Predator Population"</span>)</span>
<span id="cb14-17">plt.plot(X_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Prey Population"</span>)</span>
<span id="cb14-18">plt.plot(X_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :].detach().numpy(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Predator Population"</span>)</span>
<span id="cb14-19">plt.legend()</span>
<span id="cb14-20">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time Steps"</span>)</span>
<span id="cb14-21">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)</span>
<span id="cb14-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True vs Predicted Population"</span>)</span>
<span id="cb14-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="time-varying-parameters" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/index_files/figure-html/time-varying-parameters-output-1.png" width="622" height="449" class="figure-img"></p>
<figcaption>Fitting the Lotka-Volterra model with time-varying parameters.</figcaption>
</figure>
</div>
</div>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture6/imgs/fitting_animation_time_varying.gif" class="img-fluid" width="600"></p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The Gauss-Newton optimization method is a powerful tool for solving non-linear least squares problems in a fast and efficient manner. It can be extended to any problem that is formulated as a vector of residuals or generally <img src="https://latex.codecogs.com/png.latex?%5C%7C%20G(p)%20%5C%7C%5E2"> that is to be optimized over <img src="https://latex.codecogs.com/png.latex?p">. Improved efficiency in the normal equations is done by using the Jacobian-vector product to bypass the costly need to compute a full Jacobian when all that is required is the directional derivative. The normal equtions also present a sub-problem in the optimization routine that can be solved using the conjugate gradient method to find the optimal step size <img src="https://latex.codecogs.com/png.latex?s_k">. This step direction is then used to perform the gradient descent step in the outer optimization algorithm. Increasing the complexity of the problem by allowing time varying parameters can lead to overfitting and ill-posedness, but the optimization algorithm will still converge to a solution.</p>


</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Gauss-Newton</category>
  <category>Automatic Differentiation</category>
  <category>PyTorch</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture6/</guid>
  <pubDate>Tue, 08 Oct 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture6/imgs/fitting_animation_time_varying.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Lecture 5: Gauss Newton</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture5/</link>
  <description><![CDATA[ 




<div class="hidden">
<p>$$ </p>
<p>$$</p>
</div>
<section id="a-non-linear-dynamics-problem" class="level2">
<h2 class="anchored" data-anchor-id="a-non-linear-dynamics-problem">A Non-Linear Dynamics Problem</h2>
<p>A well studied problem in non-linear dynamics involves the predator-prey model that is described by the Lotka-Volterra equations. The equations are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cfrac%7Bdx%7D%7Bdt%7D%20&amp;=%20%5Calpha%20x%20-%20%5Cbeta%20xy%20%5C%5C%0A%5Cfrac%7Bdy%7D%7Bdt%7D%20&amp;=%20%5Cdelta%20xy%20-%20%5Cgamma%20y%0A%5Cend%7Baligned%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are the populations of the prey and predator respectively. The parameters <img src="https://latex.codecogs.com/png.latex?%5Calpha,%20%5Cbeta,%20%5Cgamma,%20%5Cdelta"> are positive constants. The goal is to find the values of these parameters that best fit the data.</p>
<p>There is no closed form analytic solution that is known to this remarkably simple system of equations, which is why we must resort to numerical solutions to compute the model.</p>
<p>More information about the model can be found at the <a href="https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations">Wikipedia</a> page.</p>
<section id="the-forward-problem" class="level3">
<h3 class="anchored" data-anchor-id="the-forward-problem">The Forward Problem</h3>
<p>We start with an initial time <img src="https://latex.codecogs.com/png.latex?t_0"> and initial conditions <img src="https://latex.codecogs.com/png.latex?x_0,%20y_0">, with parameters <img src="https://latex.codecogs.com/png.latex?%5Calpha,%20%5Cbeta,%20%5Cgamma,%20%5Cdelta"> to run a forward version of the problem using a variant of the forward Euler method, the RK4.</p>
<div id="cell-pred-prey-forward" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LotkaVolterraModel(nn.Module):</span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, alpha, beta, gamma, delta):</span>
<span id="cb1-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(LotkaVolterraModel, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters as torch tensors that require gradients</span></span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(alpha, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(beta, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(gamma, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(delta, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb1-14"></span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb1-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure x and y are tensors</span></span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(x, torch.Tensor):</span>
<span id="cb1-18">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(x, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(y, torch.Tensor):</span>
<span id="cb1-20">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(y, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb1-21"></span>
<span id="cb1-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute dx and dy based on the current parameters</span></span>
<span id="cb1-23">        dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb1-24">        dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb1-25"></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dx, dy</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RK4Solver:</span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model):</span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y, dt):</span>
<span id="cb1-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Perform a single RK4 step.</span></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert x and y to tensors if they are not already</span></span>
<span id="cb1-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(x, torch.Tensor):</span>
<span id="cb1-38">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(x, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(y, torch.Tensor):</span>
<span id="cb1-40">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(y, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb1-41"></span>
<span id="cb1-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RK4 Step calculations</span></span>
<span id="cb1-43">        k1_x, k1_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.forward(x, y)</span>
<span id="cb1-44">        k2_x, k2_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.forward(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k1_x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k1_y)</span>
<span id="cb1-45">        k3_x, k3_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.forward(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2_x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2_y)</span>
<span id="cb1-46">        k4_x, k4_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.forward(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3_x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3_y)</span>
<span id="cb1-47"></span>
<span id="cb1-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update x and y using weighted averages of the slopes</span></span>
<span id="cb1-49">        x_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (k1_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k4_x)</span>
<span id="cb1-50">        y_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (k1_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k2_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k3_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k4_y)</span>
<span id="cb1-51"></span>
<span id="cb1-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x_new, y_new</span>
<span id="cb1-53"></span>
<span id="cb1-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> solve(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x0, y0, time_steps):</span>
<span id="cb1-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Solve the system over a serie of time steps.</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x0: Initial value of prey population</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            y0: Initial value of predator population</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            time_steps: List or numpy array of time steps to solve over</span></span>
<span id="cb1-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-62">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x0, y0</span>
<span id="cb1-63">        DT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time_steps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> time_steps[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-64">        trajectory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(time_steps), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-65">        trajectory[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([x, y])</span>
<span id="cb1-66"></span>
<span id="cb1-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, dt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DT):</span>
<span id="cb1-68">            x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step(x, y, dt)</span>
<span id="cb1-69">            trajectory[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([x, y])            </span>
<span id="cb1-70"></span>
<span id="cb1-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> trajectory</span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the model parameters</span></span>
<span id="cb1-74">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb1-75">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span></span>
<span id="cb1-76">gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb1-77">delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-78"></span>
<span id="cb1-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the model and solver</span></span>
<span id="cb1-80">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LotkaVolterraModel(alpha, beta, gamma, delta)</span>
<span id="cb1-81">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RK4Solver(model)</span>
<span id="cb1-82"></span>
<span id="cb1-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the initial conditions and time steps</span></span>
<span id="cb1-84">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-85">y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-86">time_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-87"></span>
<span id="cb1-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solve the system</span></span>
<span id="cb1-89">trajectory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.solve(x0, y0, time_steps)</span>
<span id="cb1-90"></span>
<span id="cb1-91">x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trajectory[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().numpy()</span>
<span id="cb1-92">y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trajectory[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach().numpy()</span>
<span id="cb1-93"></span>
<span id="cb1-94">plt.plot(time_steps, x_values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prey'</span>)</span>
<span id="cb1-95">plt.plot(time_steps, y_values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predator'</span>)</span>
<span id="cb1-96">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb1-97">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Population'</span>)</span>
<span id="cb1-98">plt.legend()</span>
<span id="cb1-99">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/lotka_volterra.png'</span>)</span>
<span id="cb1-100">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pred-prey-forward" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture5/index_files/figure-html/pred-prey-forward-output-1.png" width="622" height="429" class="figure-img"></p>
<figcaption>The time evolution of the prey and predator populations.</figcaption>
</figure>
</div>
</div>
</div>
<p>We can additionally look at the phase space of the system for various initial conditions to see how the different solutions are periodic.</p>
<div id="cell-pred-prey-phase-space" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the initial conditions</span></span>
<span id="cb2-2">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-3">y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the model and solver</span></span>
<span id="cb2-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LotkaVolterraModel(alpha, beta, gamma, delta)</span>
<span id="cb2-7">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RK4Solver(model)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the time steps</span></span>
<span id="cb2-10">time_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the phase space</span></span>
<span id="cb2-13">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>))</span>
<span id="cb2-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y0:</span>
<span id="cb2-15">    trajectory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.solve(x0, y, time_steps)</span>
<span id="cb2-16">    x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trajectory[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().numpy()</span>
<span id="cb2-17">    y_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trajectory[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].detach().numpy()</span>
<span id="cb2-18">    plt.plot(x_values, y_values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'y0=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prey Population'</span>)</span>
<span id="cb2-21">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predator Population'</span>)</span>
<span id="cb2-22">plt.legend()</span>
<span id="cb2-23">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lotka-Volterra Phase Space'</span>)</span>
<span id="cb2-24">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/lotka_volterra_phase_space.png'</span>)</span>
<span id="cb2-25">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pred-prey-phase-space" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture5/index_files/figure-html/pred-prey-phase-space-output-1.png" width="510" height="413" class="figure-img"></p>
<figcaption>The phase space of the predator-prey model.</figcaption>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="the-inverse-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-inverse-problem">The Inverse Problem</h2>
<p>The inverse problem in this case is to find the parameters <img src="https://latex.codecogs.com/png.latex?%5Calpha,%20%5Cbeta,%20%5Cgamma,%20%5Cdelta"> that best fit the data. We suppose that we have a model with parameters that takes in the initial conditions and time steps and returns the trajectory of the system. For simplicity we vectorize the previous <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20x%20%5C%5C%20y%20%5Cend%7Bbmatrix%7D"> into a single vector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D">. The forward model is then a function <img src="https://latex.codecogs.com/png.latex?F(%5Cvec%7Bx%7D;%20%5Cvec%7Bp%7D)"> where <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bp%7D"> are the parameters and is an approximator of the true system, where</p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Cvec%7Bx%7D;%20%5Cvec%7Bp%7D)%20%5Capprox%20%5Cfrac%7Bd%20%5Cvec%7Bx%7D%7D%7Bdt%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Calpha%20x%20-%20%5Cbeta%20xy%20%5C%5C%20%5Cdelta%20xy%20-%20%5Cgamma%20y%20%5Cend%7Bbmatrix%7D,%20%5Cquad%20%5Cvec%7Bx%7D_0%20=%20%5Cvec%7Bx%7D(0)."></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D"> is the state of the system and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bp%7D"> are the parameters.</p>
<p>The goal is to form an estimate of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bp%7D">, while the data that we have collected may be sparse, noisy, or incomplete. We represent the incompleteness in the data using the <img src="https://latex.codecogs.com/png.latex?Q"> <em>sampling operator</em> which is applied to the true underlying data to give <img src="https://latex.codecogs.com/png.latex?Qx">. If <img src="https://latex.codecogs.com/png.latex?x"> is fully given then <img src="https://latex.codecogs.com/png.latex?Q=I">.</p>
<p>A finite difference approximation of the derivative of the data can be used to approximate the derivative of the data,</p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Cvec%7Bx%7D;%20%5Cvec%7Bp%7D)%20%5Ccong%20%5Cfrac%7B%5Cvec%7Bx%7D_%7Bn+1%7D%20-%20%5Cvec%7Bx%7D_n%7D%7B%5CDelta%20t%7D."></p>
<p>So in this case the forward model is a time derivative, and the observed data is computed from an intial condition <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D_0"> and an ODE approximate solution such as Euler’s method or RK4. The output of the forward process is then given as <img src="https://latex.codecogs.com/png.latex?F">, where <img src="https://latex.codecogs.com/png.latex?F(%5Cvec%7Bp%7D,%20x_0)%20=%20%5Chat%20%7B%5Cvec%7Bx%7D%7D(t,%20%5Cvec%7Bp%7D),"></p>
<p>is the application of the system dynamics to the initial conditions and the parameter to create an estimated trajectory <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cvec%7Bx%7D%7D(t,%20%5Cvec%7Bp%7D)">.</p>
<p>The observed data is <img src="https://latex.codecogs.com/png.latex?d%20=%20Q%5Cvec%7Bx%7D(t)">. We also make an assumption here that <img src="https://latex.codecogs.com/png.latex?F"> does not depend on the particular solver that we are using for the forward ODE and that all of the <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bp%7D"> are physical parameters, we assume that the parameters are faithful enough.</p>
<p>For the rest of the mathematical notation ahead, the explicit marking of vectors is ommitted to simplify the equations.</p>
<section id="goodness-of-fit" class="level4">
<h4 class="anchored" data-anchor-id="goodness-of-fit">Goodness of Fit</h4>
<p>The goodness of fit is measured by using the L2 norm of the difference between the observed data and the model output, thus forming the non-linear least squares problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin_%7Bp%7D%20%5Cfrac%7B1%7D%7B2%7D%5C%7CQF(p)-d%5C%7C%5E2%20=%20%5Cmin_%7Bp%7D%5C%7CG(p)%5C%7C%5E2."></p>
<p>To find the best fit, the objective is to minimize the mean squared error (MSE) of a function of the parameters <img src="https://latex.codecogs.com/png.latex?p"> and the data <img src="https://latex.codecogs.com/png.latex?d">. The data is fixed for a given problem, so it is only by varying <img src="https://latex.codecogs.com/png.latex?p"> that an optimal solution can be found. The entire MSE function is denoted as <img src="https://latex.codecogs.com/png.latex?G(p)">.</p>
</section>
</section>
<section id="minimization-of-the-objective-function" class="level2">
<h2 class="anchored" data-anchor-id="minimization-of-the-objective-function">Minimization of the Objective Function</h2>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin_%7Bp%20%5Cin%20%5Cmathbb%7BR%7D%5Em%7D%20%5Cbiggl%5C%7B%20%5Csum_%7Bi=1%7D%5En%20(QF_i(%5Cmathbf%7Bp%7D)%20-%20d_i)%20%5E2%5Cbiggr%5C%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?d_i"> are the observed data points. This is the same as</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin_%7Bp%20%5Cin%20%5Cmathbb%7BR%7D%5Em%7D%20%5C%7CG(%5Cmathbf%7Bp%7D)%5C%7C%5E2"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?G(%5Cmathbf%7Bp%7D)%20=%20QF(%5Cmathbf%7Bp%7D)%20-%20d"> and <img src="https://latex.codecogs.com/png.latex?d%20%5Cin%20%5Cmathbb%7BR%7D%5En">. We are minimizing the norm of a non-linear function of the parameters. Supposing that we want to find the minimizer, one approach would be by gradient descent.</p>
<section id="the-jacobian-a-quick-review" class="level4">
<h4 class="anchored" data-anchor-id="the-jacobian-a-quick-review">The Jacobian: A quick review</h4>
<hr>
<p>The Jacobian is a multivariate extension of the derivative that extends to functions <img src="https://latex.codecogs.com/png.latex?f%20:%20%5Cmathbb%7BR%7D%5Em%20%5Cto%20%5Cmathbb%7BR%7D%5En">. Because there are <img src="https://latex.codecogs.com/png.latex?n"> function outputs and <img src="https://latex.codecogs.com/png.latex?m"> input variables, the Jacobian is an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> matrix that contains the information of how each of the <img src="https://latex.codecogs.com/png.latex?n"> functions changes with respect to each of the <img src="https://latex.codecogs.com/png.latex?m"> variables. In an abuse of Leibniz’s notation, it can be seen as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cvec%7Bf%7D%7D%7B%5Cpartial%20%5Cvec%7Bx%7D%7D%20=%20%5Cmathbf%7BJ_f%7D%20=%0A%5Cleft%5B%0A%20%20%20%20%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20x_1%7D%20%5Ccdots%20%5Cfrac%7B%5Cpartial%20f%7D%7B%5Cpartial%20x_n%7D%0A%5Cright%5D%0A=%0A%5Cbegin%7Bbmatrix%7D%0A%20%20%20%20%5Cnabla%5E%5Ctop%20f_1%0A%20%20%20%20%5C%5C%0A%20%20%20%20%5Cvdots%0A%20%20%20%20%5C%5C%0A%20%20%20%20%5Cnabla%5E%5Ctop%20f_m%0A%5Cend%7Bbmatrix%7D%0A=%0A%5Cleft%5B%0A%20%20%20%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%20%20%20%20%5Cfrac%7B%5Cpartial%20f_1%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20f_1%7D%7B%5Cpartial%20x_n%7D%20%5C%5C%0A%20%20%20%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%20%20%20%20%5Cfrac%7B%5Cpartial%20f_m%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20f_m%7D%7B%5Cpartial%20x_n%7D%0A%20%20%20%20%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>Note that like the derivative, the Jacobian is a function of the input variables <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D">. The Jacobian is a linear approximation of the function <img src="https://latex.codecogs.com/png.latex?f"> at a point <img src="https://latex.codecogs.com/png.latex?x_0"> and can be used to approximate the function at a point <img src="https://latex.codecogs.com/png.latex?x_0%20+%20%5CDelta%20x">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20f(x_0%20+%20%5CDelta%20x)%20%5Capprox%20f(x_0)%20+%20J_f(x_0)%20%5CDelta%20x"></p>
<p>Noting that we are applying matrix multiplication using <img src="https://latex.codecogs.com/png.latex?J_f"> evaluated at <img src="https://latex.codecogs.com/png.latex?x_0"> and the vector <img src="https://latex.codecogs.com/png.latex?%5CDelta%20x%20=%20%5Cvec%7Bx%7D%20-%20%5Cvec%7Bx_0%7D">. The quantity <img src="https://latex.codecogs.com/png.latex?J_f(x_0)%20%5CDelta%20x"> is the directional derivative of the function <img src="https://latex.codecogs.com/png.latex?f"> at <img src="https://latex.codecogs.com/png.latex?x_0"> in the direction of <img src="https://latex.codecogs.com/png.latex?%5CDelta%20x">.</p>
<hr>
<p>The gradient of <img src="https://latex.codecogs.com/png.latex?%5C%7CG(%5Cmathbf%7Bp%7D)%5C%7C%5E2"> can be computed as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cnabla_p%20%5C%7CG(p)%5C%7C%5E2%20&amp;=%20%5Cnabla_p%20G(p)%5ET%20G(p)%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%20%5Cnabla_p%20G_i(p)%5E2%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5En%202%20G_i(p)%20%5Cnabla_p%20G_i(p)%5C%5C%0A&amp;=%202%20J_G(p)%5ET%20G(p)%0A%5Cend%7Balign%7D%0A"></p>
<p>From this stage, gradient descent can be applied to find the minimum of the function. However, the function <img src="https://latex.codecogs.com/png.latex?G(p)"> is non-linear and so the gradient descent method may not converge quickly or the problem may have poor conditioning. The celebrated <a href="https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization#Higher_dimensions">Newton’s Method</a> addresses some of these issues, but requires computing the Hessian <img src="https://latex.codecogs.com/png.latex?%5Cnabla%5E2%20%5C%7CG(p)%5C%7C%5E2"> of the function, which can be expensive.</p>
<p>To demonstrate, the true Hessian of the function is: <img src="https://latex.codecogs.com/png.latex?%0A%5Cnabla%5E2%20%5C%7CG(p)%5C%7C%5E2%20=%202%20J_G(p)%5ET%20J_G(p)%20+%202%20%5Csum_%7Bi=1%7D%5En%20G_i(p)%20%5Cnabla%5E2%20G_i(p)%0A"></p>
<p>So we’d have to compute the Hessian <img src="https://latex.codecogs.com/png.latex?%5Cnabla%5E2%20G_i(p)"> of each of the <img src="https://latex.codecogs.com/png.latex?G_i(p)"> functions, of which there are <img src="https://latex.codecogs.com/png.latex?n">, not good in practice. If we did have this Hessian, the steps with Newton’s method would be:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20p_%7Bk+1%7D%20=%20p_k%20-%20(%5Cnabla%5E2%20%5C%7CG(p_k)%5C%7C%5E2)%5E%7B-1%7D%20%5Cnabla%20(%5C%7CG(p_k)%5C%7C%5E2)"></p>
</section>
</section>
<section id="gauss-newton-optimization" class="level2">
<h2 class="anchored" data-anchor-id="gauss-newton-optimization">Gauss-Newton Optimization</h2>
<p>Rather than solve the problem directly with Newton’s method, it can be approximated by linearizing inside of the norm and solving the linearized version using the normal equations. We approximate the function</p>
<p><img src="https://latex.codecogs.com/png.latex?G(p)%20=%20QF(p)%20-%20d%20%5Capprox%20(QF(p_k)%20-%20d)%20+%20QJ_k(p-p_k)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?J_k"> is the Jacobian of <img src="https://latex.codecogs.com/png.latex?F(p)"> at <img src="https://latex.codecogs.com/png.latex?p_k">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin_%7Bp%20%5Cin%20%5Cmathbb%7BR%7D%5Em%7D%20%5C%7CQF(p_k)%20-%20d%20+%20QJ_k(p-p_k)%5C%7C%5E2"></p>
<p>Then rearranging this we get a form that is a linear least squares problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0A&amp;%20%5Cmin_%7Bp%20%5Cin%20%5Cmathbb%7BR%7D%5Em%7D%20%5C%7C%20QJ_kp%20-%20(d%20+%20QJ_k%20p_k-%20QF(p_k)%20)%5C%7C%5E2%5C%5C%0A=&amp;%20%5Cmin_%7Bp%20%5Cin%20%5Cmathbb%7BR%7D%5Em%7D%20%5C%7C%20Ap%20-%20r_k%5C%7C%5E2%5C%5C%0AA%5ET%20A%20p%20=&amp;%20A%5ET%20r_k%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?A%20=%20QJ_k"> and <img src="https://latex.codecogs.com/png.latex?r_k%20=%20d%20+%20QJ_k%20p_k%20-%20QF(p_k)">. This is the normal equations for the linear least squares problem. This gives us</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ap_%7Bk+1%7D%20&amp;=%20(A%5ET%20A)%5E%7B-1%7D%20A%5ET%20(r_k)%5C%5C%0A&amp;=%20(J_k%5ET%20Q%5ET%20Q%20J_k)%5E%7B-1%7D%20J_k%5ET%20Q%5ET%20(d%20+%20QJ_k%20p_k%20-%20QF(p_k))%5C%5C%0A&amp;=%20p_k%20+%20(J_k%5ET%20Q%5ET%20Q%20J_k)%5E%7B-1%7D%20J_k%5ET%20Q%5ET%20(d%20-%20QF(p_k))%5C%5C%0Ap_%7Bk+1%7D%20&amp;=%20p_k%20-%20(J_k%5ET%20Q%5ET%20Q%20J_k)%5E%7B-1%7D%20J_k%5ET%20Q%5ET%20(QF(p_k)%20-%20d)%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>This could be written in a more tidy and general way, reacalling that <img src="https://latex.codecogs.com/png.latex?G(p)%20=%20QF(p)%20-%20d"> and let <img src="https://latex.codecogs.com/png.latex?J_G(p)%20=%20QJ(p)">, then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20p_%7Bk+1%7D%20=%20p_k%20-%20(J_G(p_k)%5ETJ_G(p_k))%5E%7B-1%7D%20J_G(p_k)%20G(p_k)"></p>
<section id="comparison-with-newtons-method" class="level4">
<h4 class="anchored" data-anchor-id="comparison-with-newtons-method">Comparison with Newton’s Method</h4>
<p>So this resembles a scaled gradient descent. In Newton’s method we have the Hessian, in Gauss-Newton we have the Jacobian of the function. As a comparison:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 71%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Method</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Newton’s Method</strong></td>
<td><strong>Step Update</strong></td>
</tr>
<tr class="even">
<td></td>
<td><img src="https://latex.codecogs.com/png.latex?p_%7Bk+1%7D%20=%20p_k%20-%20(%5Cnabla%5E2%20%5C%7CG(p_k)%5C%7C%5E2)%5E%7B-1%7D%20%5Cnabla%20%5C%7CG(p_k)%5C%7C%5E2"></td>
</tr>
<tr class="odd">
<td></td>
<td><strong>Scaling Matrix</strong></td>
</tr>
<tr class="even">
<td></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cnabla%5E2%20%5C%7CG(p_k)%5C%7C%5E2%20=%202%20J_G(p_k)%5ET%20J_G(p_k)%20+%202%20%5Csum_%7Bi=1%7D%5En%20G_i(p_k)%20%5Cnabla%5E2%20G_i(p_k)"></td>
</tr>
<tr class="odd">
<td><strong>Gauss-Newton Method</strong></td>
<td><strong>Step Update</strong></td>
</tr>
<tr class="even">
<td></td>
<td><img src="https://latex.codecogs.com/png.latex?p_%7Bk+1%7D%20=%20p_k%20-%20(J_G(p_k)%5ET%20J_G(p_k))%5E%7B-1%7D%20J_G(p_k)%5ET%20G(p_k)"></td>
</tr>
<tr class="odd">
<td></td>
<td><strong>Scaling Matrix</strong></td>
</tr>
<tr class="even">
<td></td>
<td><img src="https://latex.codecogs.com/png.latex?J_G(p_k)%5ET%20J_G(p_k)"></td>
</tr>
</tbody>
</table>
<p>The direction of change between iterations in Newton’s method can be rewritten as <img src="https://latex.codecogs.com/png.latex?d_k%20=%20%5Cleft(J_G(p_k)%5ET%20J(p_k)%20+%20%5Csum_%7Bi=1%7D%5En%20G_i(p_k)%20%5Cnabla%5E2%20G_i(p_k)%5Cright)%5E%7B-1%7D%20J_G(p_k)%5ET%20G(p_k)"></p>
<p>While the direction in the case of Gauss-Newton is <img src="https://latex.codecogs.com/png.latex?d_k%20=%20%5Cleft(J_G(p_k)%5ET%20J_G(p_k)%5Cright)%5E%7B-1%7D%20J_G(p_k)%5ET%20G(p_k)"></p>
<p>The difference between the two is the omission of the computationally expensive <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5En%20G_i(p)%20%5Cnabla%5E2%20G_i(p)"> terms. The Gauss-Newton method is approximating the second-order approach of Newton’s method by only considering the first-order terms inside of the norm.</p>
<p><img src="https://latex.codecogs.com/png.latex?J_G(p_k)%5ET%20J(p_k)%20%5Csum_%7Bi=1%7D%5En%20G_i(p_k)%20%5Cnabla%5E2%20G_i(p_k)%20%5Capprox%20J_G(p_k)%5ET%20J(p_k)"></p>
<p>Recall that <img src="https://latex.codecogs.com/png.latex?G(p)%20=%20QF(p)%20-%20d"> which is the difference between the observed data and the model. If the difference is small then <img src="https://latex.codecogs.com/png.latex?G_i"> is also small and the approximation is good.</p>
</section>
<section id="algorithm-for-gauss-newton" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-for-gauss-newton">Algorithm for Gauss-Newton</h3>
<p>We have derived the algorithm for the Gauss-Newton method for solving the non-linear least squares problem. The algorithm is as follows:</p>
<div class="pseudocode-container quarto-float" data-indent-size="1.2em" data-line-number-punc=":" data-caption-prefix="Algorithm" data-line-number="true" data-pseudocode-number="1" data-comment-delimiter="//" data-no-end="false">
<div class="pseudocode">
\begin{algorithm} \caption{Gauss-Newton Algorithm for Non-linear Least Squares}\begin{algorithmic} \State \textbf{Input:} Initial guess $p_0$, maximum iterations $K$, tolerance $\epsilon$ \State \textbf{Initialize} $p_0$ \For{$k = 0, 1, 2, \ldots$} \State Compute the Jacobian $J_G$ of $G(p)$ at $p_k$ \State Compute the transpose $J_G^T$ of the Jacobian \State Compute the residual $r_k =G(p_k)$ (forward model) \State Compute the step $s_k = (J_G(p_k)^T J_G(p_k) )^{-1} J_G(p_k)^T r_k$ \State Update the parameters $p_{k+1} = p_k + \mu_k s_k$ \If{$\|s_k\| &lt; \epsilon$} \State \textbf{Stop} \EndIf \EndFor \State \textbf{Output:} $p_{k+1}$ as the optimal solution \end{algorithmic} \end{algorithm}
</div>
</div>
</section>
<section id="matrix-inversions" class="level3">
<h3 class="anchored" data-anchor-id="matrix-inversions">Matrix Inversions</h3>
<p>In practice it may be computationally expensive to invert the matrix <img src="https://latex.codecogs.com/png.latex?J_k%5ET%20Q%5ET%20Q%20J_k">. We can use a conjugate gradient method to solve the normal equations instead. <img src="https://latex.codecogs.com/png.latex?J_k%5ET%20Q%5ET%20Q%20J_k%20s_k%20=%20J_k%5ET%20Q%5ET%20r_k"></p>
<p>We developed a conjugate gradient method in the last lecture, so we can use that along with the computed values for <img src="https://latex.codecogs.com/png.latex?J_k%5ET,%20J_k,%20r_k"> to solve the normal equations and get the step <img src="https://latex.codecogs.com/png.latex?s_k">.</p>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 40%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Component</strong></th>
<th><strong>Description</strong></th>
<th><strong>Dimensions</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?d"></td>
<td>Observed data</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bn%7D"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?p_k"></td>
<td>Parameters</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bm%7D"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?Q"></td>
<td>Weight matrix</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20n%7D"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?J_k"></td>
<td>Jacobian of <img src="https://latex.codecogs.com/png.latex?F(p_k)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20m%7D"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?r_k"></td>
<td>Residual <img src="https://latex.codecogs.com/png.latex?d%20-%20QF(p_k)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bn%7D"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?F(p_k)"></td>
<td>Forward model output</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bn%7D"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?s_k"></td>
<td>Step direction</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bm%7D"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?J_k%5ET"></td>
<td>Transpose of the Jacobian</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bm%20%5Ctimes%20n%7D"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?J_k%5ET%20Q%5ET%20Q%20J_k"></td>
<td>Normal equations matrix</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E%7Bm%20%5Ctimes%20m%7D"></td>
</tr>
</tbody>
</table>


</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Gauss-Newton</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture5/</guid>
  <pubDate>Wed, 25 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture5/imgs/lotka_volterra_phase_space.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Lecture 4: Regularization and the Conjugate Gradient Methods</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture4/</link>
  <description><![CDATA[ 




<div class="hidden">
<p>$$ </p>
<p>$$</p>
</div>
<section id="tikhnov-regularization" class="level2">
<h2 class="anchored" data-anchor-id="tikhnov-regularization">Tikhnov Regularization</h2>
<p>We have looked at the least squares formulation for solving inverse problems:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20%5C%7CA%20x%20-%20b%5C%7C%5E2%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20%5Cmathbb%20R%5E%7Bm%20%5Ctimes%20n%7D"> is a linear operator, <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5Cmathbb%20R%5En"> is the unknown model, and <img src="https://latex.codecogs.com/png.latex?b%20%5Cin%20%5Cmathbb%20R%5Em"> is the data.</p>
<p>The least squares problem is often ill-posed, meaning that the solution is not unique or stable. If there are more unknowns than equations, such as the case when <img src="https://latex.codecogs.com/png.latex?n%20%3E%20m">, then the problem is underdetermined and there are infinitely many solutions.</p>
<p>We can return to unique solutions by adding a regularization term to the selection of the <img src="https://latex.codecogs.com/png.latex?x"> that we want to minimize. The Tikhonov regularization technique adds a penalty term to the least squares problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20%5C%7CA%20x%20-%20b%5C%7C%5E2%20+%20%5Cfrac%7B1%7D%7B2%7D%20%20%5Clambda%20%5C%7CLx%5C%7C%5E2%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?L%20%5Cin%20%5Cmathbb%20R%5E%7Bn%20%5Ctimes%20n%7D"> is a regularization matrix. The regularization matrix <img src="https://latex.codecogs.com/png.latex?L"> is often chosen to be the identity matrix, but other choices are possible.</p>
<section id="uniqueness" class="level4">
<h4 class="anchored" data-anchor-id="uniqueness">Uniqueness</h4>
<p>To check the uniqueness of the solution, we can rewrite the problem as a quadratic form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20x%5ET%20A%5ET%20A%20x%20-%20b%5ET%20A%20x%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Clambda%20x%5ET%20L%5ET%20L%20x%20"> <img src="https://latex.codecogs.com/png.latex?%20=%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20x%5ET%20H%20x%20-%20b%5ET%20A%20x%20+%20%5Cfrac%7B1%7D%7B2%7D%5C%7Cb%5C%7C%5E2"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?H%20=%20A%5ET%20A%20+%20%5Clambda%20L%5ET%20L"> is the Hessian matrix which is symmetric and positive semi-definite by spectral theorem. If we choose an appropriate <img src="https://latex.codecogs.com/png.latex?%5Clambda">, then the Hessian matrix is positive definite and the problem is well-posed. In the case where <img src="https://latex.codecogs.com/png.latex?L=I">, the Hessian becomes full rank for <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%3E%200"> and the problem is well-posed. The quality that <img src="https://latex.codecogs.com/png.latex?H%20%5Csucc%200"> means that the matrix is invertible.</p>
</section>
<section id="solution" class="level4">
<h4 class="anchored" data-anchor-id="solution">Solution</h4>
<p>The unique solution is given by by the first order optimatility condition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0A(A%5ET%20A%20+%20%5Clambda%20L%5ET%20L)%20%5Cmathbf%7Bx%7D_%7B%5Ctext%7BRLS%7D%7D%20-%20A%5ET%20b&amp;=%200%20%5C%5C%0A%5Cmathbf%7Bx%7D_%7B%5Ctext%7BRLS%7D%7D%20&amp;=%20(A%5ET%20A%20+%20%5Clambda%20L%5ET%20L)%5E%7B-1%7D%20A%5ET%20b%0A%5Cend%7Balign%7D%0A"></p>
</section>
<section id="svd-decomposition" class="level4">
<h4 class="anchored" data-anchor-id="svd-decomposition">SVD Decomposition</h4>
<p>The solution can be written in terms of the singular value decomposition of <img src="https://latex.codecogs.com/png.latex?A">, and with the assumption that <img src="https://latex.codecogs.com/png.latex?L=I">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AA%20&amp;=%20U%20%5CSigma%20V%5ET%20%5C%5C%0AA%5ET%20A%20&amp;=%20V%20%5CSigma%5ET%20%5CSigma%20V%5ET%20%5C%5C%0A%5Cmathbf%7Bx%7D_%7B%5Ctext%7BRLS%7D%7D%20&amp;=%20%5Cleft(%20V%20%5CSigma%5E2%20V%5ET%20+%20%5Clambda%20I%20%5Cright)%5E%7B-1%7D%20V%20%5CSigma%5ET%20U%5ET%20b%20%5C%5C%0A&amp;=%20%5Cleft(%20V%20%5CSigma%5E2%20V%5ET%20+%20%5Clambda%20I%20V%20V%5ET%20%5Cright)%5E%7B-1%7D%20V%20%5CSigma%5ET%20U%5ET%20b%5C%5C%0A&amp;=%20V%20%5Cleft(%20%5CSigma%5E2%20+%20%5Clambda%20I%20%5Cright)%5E%7B-1%7D%20%5CSigma%5ET%20U%5ET%20b%5C%5C%0A&amp;=%20V%20%5Cmathbf%7BDiag%7D%5Cleft(%20%5Cfrac%7B%5Csigma_i%7D%7B%5Csigma_i%5E2%20+%20%5Clambda%7D%20%5Cright)%20U%5ET%20b%5C%5C%0A&amp;=%20%5Csum%20_i%20%5E%20n%20%5Cfrac%7B%5Csigma_i%7D%7B%5Csigma_i%5E2%20+%20%5Clambda%7D%20%5Clangle%20u_i,%20b%20%5Crangle%20v_i%0A%5Cend%7Balign%7D%0A"></p>
<p>This form is more readily comparable to some of the other methods that we have see so far, which are presented in the table below:</p>
</section>
</section>
<section id="comparison-of-least-squares-methods" class="level2">
<h2 class="anchored" data-anchor-id="comparison-of-least-squares-methods">Comparison of Least Squares Methods</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Tikhonov</td>
<td><img src="https://latex.codecogs.com/png.latex?x_%7B%5Ctext%7BRLS%7D%7D%20=%20%5Csum%20_i%20%5E%20n%20%5Cfrac%7B%5Csigma_i%7D%7B%5Csigma_i%5E2%20+%20%5Clambda%7D%20%5Clangle%20u_i,%20b%20%5Crangle%20v_i"></td>
</tr>
<tr class="even">
<td>Thresholded SVD</td>
<td><img src="https://latex.codecogs.com/png.latex?x_%7B%5Ctext%7BTSVD%7D%7D%20=%20%5Csum%20_i%20%5E%20n%20h(%5Csigma_i)%20%5Clangle%20u_i,%20b%20%5Crangle%20v_i"></td>
</tr>
<tr class="odd">
<td>Gradient Flow</td>
<td><img src="https://latex.codecogs.com/png.latex?x_%7B%5Ctext%7BSDF%7D%7D%20=%20%5Csum%20_i%20%5E%20n%20%5Cfrac%7B%5Cexp(-%5Csigma_i%5E2%20t)%20-%201%7D%7B%5Csigma_i%7D%20%5Clangle%20u_i,%20b%20%5Crangle%20v_i"></td>
</tr>
</tbody>
</table>
<p>As we can see all three methods have a similar form and offer some mechanism for controlling the noise induced by the small singular values of <img src="https://latex.codecogs.com/png.latex?A">.</p>
<div id="cell-comp-plot" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_ill_conditioned_matrix(m, n, condition_number):   </span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random orthogonal matrices U and V</span></span>
<span id="cb1-7">    U, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.qr(np.random.randn(m, m))</span>
<span id="cb1-8">    V, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.qr(np.random.randn(n, n))</span>
<span id="cb1-9">    </span>
<span id="cb1-10">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>condition_number, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(m, n))    </span>
<span id="cb1-11">    Sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(sigma)    </span>
<span id="cb1-12">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> V[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(m, n), :]</span>
<span id="cb1-13">    </span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> A, sigma</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seed for reproducibility</span></span>
<span id="cb1-17">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-18">A, S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_ill_conditioned_matrix(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector b of size 5 with random values</span></span>
<span id="cb1-21">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the SVD of A</span></span>
<span id="cb1-24">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(A, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-25">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vt.T</span>
<span id="cb1-26">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Already in proper shape</span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of singular values</span></span>
<span id="cb1-29">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(S)</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for each method</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradient Flow</span></span>
<span id="cb1-33">t_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tikhonov Regularization</span></span>
<span id="cb1-36">lambda_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thresholded SVD</span></span>
<span id="cb1-39">threshold_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(S), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute scaling factors for each method</span></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradient Flow Scaling</span></span>
<span id="cb1-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradient_flow_scaling(sigma, t):</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb1-45"></span>
<span id="cb1-46">gradient_scalings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([gradient_flow_scaling(s, t_values) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> S])</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tikhonov Scaling</span></span>
<span id="cb1-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tikhonov_scaling(sigma, lambd):</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lambd)</span>
<span id="cb1-51"></span>
<span id="cb1-52">tikhonov_scalings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([tikhonov_scaling(s, lambda_values) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> S])</span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thresholded SVD Scaling</span></span>
<span id="cb1-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tsvd_scaling(sigma, threshold):</span>
<span id="cb1-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.where(sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> threshold, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-57"></span>
<span id="cb1-58">tsvd_scalings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([tsvd_scaling(s, threshold_values) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> S])</span>
<span id="cb1-59"></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the plot with 3 subplots</span></span>
<span id="cb1-61">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a color palette</span></span>
<span id="cb1-64">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husl"</span>, n)</span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot Gradient Flow</span></span>
<span id="cb1-67">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-68"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-69">    ax.plot(t_values, gradient_scalings[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$1/\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> )</span>
<span id="cb1-70">    ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>S[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-71">ax.set_yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb1-72">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time (t)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-73">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scaling Factor'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-74">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gradient Flow'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-75">ax.legend()</span>
<span id="cb1-76">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-77"></span>
<span id="cb1-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot Tikhonov Regularization</span></span>
<span id="cb1-79">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-80"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-81">    ax.plot(lambda_values, tikhonov_scalings[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$1/\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> )</span>
<span id="cb1-82">    ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>S[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-83">ax.set_yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb1-84">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Regularization Parameter (λ)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-85">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scaling Factor'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-86">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tikhonov Regularization'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-87">ax.legend()</span>
<span id="cb1-88">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-89"></span>
<span id="cb1-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot Thresholded SVD</span></span>
<span id="cb1-91">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-92"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-93">    ax.plot(threshold_values, tsvd_scalings[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$1/\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>)</span>
<span id="cb1-94">    ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>S[i], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-95">ax.set_yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb1-96">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Threshold (τ)'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-97">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scaling Factor'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-98">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thresholded SVD'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-99">ax.legend()</span>
<span id="cb1-100">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-101"></span>
<span id="cb1-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and add a legend</span></span>
<span id="cb1-103">plt.tight_layout()</span>
<span id="cb1-104">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="comp-plot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture4/index_files/figure-html/comp-plot-output-1.png" width="469" height="1430" class="figure-img"></p>
<figcaption>Evolution of scaling factors for three different methods</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="solving-least-squares-using-conjugate-gradient" class="level2">
<h2 class="anchored" data-anchor-id="solving-least-squares-using-conjugate-gradient">Solving Least Squares Using Conjugate Gradient</h2>
<p>A detailed explanation of this method can be found at <a href="https://en.wikipedia.org/wiki/Conjugate_gradient_method">Wikipedia</a></p>
<section id="conjugate-vectors-definition" class="level4">
<h4 class="anchored" data-anchor-id="conjugate-vectors-definition">Conjugate Vectors Definition</h4>
<p>A set of vectors <img src="https://latex.codecogs.com/png.latex?%5C%7B%20p_1,%20p_2,%20%5Cldots,%20p_n%20%5C%7D"> is said to be <strong>conjugate with respect to</strong> a matrix <img src="https://latex.codecogs.com/png.latex?A"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clangle%20p_i,%20A%20p_j%20%5Crangle%20=%200%20%5Cquad%20%5Ctext%7Bfor%20all%20%7D%20i%20%5Cneq%20j%0A"></p>
<p>This is a generalization of the concept of orthoganality to non-symmetric matrices.</p>
<p><strong>Standard Orthogonality:</strong> When $ A = I $ (the identity matrix), the definition reduces to the standard concept of orthogonality. For a symmetric <img src="https://latex.codecogs.com/png.latex?A"> we also have an orthogonal decomposition of eigenvectors by spectral theorem.</p>
<hr>
<p>Back to the problem of least squares, we can express the solution $ x $ as a linear combination of conjugate vectors:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax%20=%20x_0%20+%20%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%20p_i%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x_0"> is an initial guess (can be zero).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha_i"> are scalar coefficients.</li>
<li><img src="https://latex.codecogs.com/png.latex?p_i"> are conjugate vectors with respect to <img src="https://latex.codecogs.com/png.latex?A">.</li>
</ul>
<p>To recover the coefficients of <img src="https://latex.codecogs.com/png.latex?%5Calpha_i"> we can use a projection in the weighted space of <img src="https://latex.codecogs.com/png.latex?A">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AA%20x_0%20+%20%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%20A%20p_i%20&amp;=%20b%5C%5C%0Ar%20&amp;=%20b%20-%20A%20x_0%5C%5C%0A%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%20A%20p_i%20&amp;=%20r%5C%5C%0A%5Clangle%20p_i,%20%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%20A%20p_i%20%5Crangle%20&amp;=%20%5Clangle%20p_i,%20r%20%5Crangle%5C%5C%0A%5Calpha_i%20%5Clangle%20p_i,%20A%20p_i%20%5Crangle%20&amp;=%20%5Clangle%20p_i,%20r%20%5Crangle%5C%5C%0A%5Calpha_i%20&amp;=%20%5Cfrac%7B%5Clangle%20p_i,%20r%20%5Crangle%7D%7B%5Clangle%20p_i,%20A%20p_i%20%5Crangle%7D%0A%5Cend%7Balign%7D%0A"> In the case where <img src="https://latex.codecogs.com/png.latex?x_0"> is zero, then this reduces to <img src="https://latex.codecogs.com/png.latex?%20%5Calpha_i%20=%20%5Cfrac%7B%5Clangle%20p_i,%20b%20%5Crangle%7D%7B%5Clangle%20p_i,%20A%20p_i%20%5Crangle%7D%20"></p>
</section>
<section id="algorithm-steps" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-steps">Algorithm Steps</h3>
<p><strong>Initialize:</strong></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x%20=%20x_0"></li>
<li><img src="https://latex.codecogs.com/png.latex?r_0%20=%20b%20-%20A%20x_0"></li>
<li><img src="https://latex.codecogs.com/png.latex?p_0%20=%20r_0"></li>
</ul>
<p><strong>For <img src="https://latex.codecogs.com/png.latex?i%20=%200,1,%202,%20%5Cldots">:</strong></p>
<ol type="1">
<li><p><strong>Compute <img src="https://latex.codecogs.com/png.latex?%5Calpha_i">:</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha_i%20=%20%5Cfrac%7B%5Clangle%20r_i,%20r_i%20%5Crangle%7D%7B%5Clangle%20p_i,%20A%20p_i%20%5Crangle%7D%0A"></p></li>
<li><p><strong>Update Solution <img src="https://latex.codecogs.com/png.latex?x">:</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_%7Bi+1%7D%20=%20x_%7Bi%7D%20+%20%5Calpha_i%20p_i%0A"></p></li>
<li><p><strong>Update Residual <img src="https://latex.codecogs.com/png.latex?r">:</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_%7Bi+1%7D%20=%20r_%7Bi%7D%20-%20%5Calpha_i%20A%20p_i%0A"></p></li>
<li><p><strong>Check for Convergence:</strong></p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5C%7C%20r_%7Bi+1%7D%20%5C%7C"> is small enough, stop.</li>
</ul></li>
<li><p><strong>Compute <img src="https://latex.codecogs.com/png.latex?%5Cbeta_i">:</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_i%20=%20%5Cfrac%7B%5Clangle%20r_%7Bi+1%7D,%20r_%7Bi+1%7D%5Crangle%7D%7B%5Clangle%20r_i,r_i%20%5Crangle%7D%0A"></p></li>
<li><p><strong>Update Conjugate Direction <img src="https://latex.codecogs.com/png.latex?p_%7Bi+1%7D">:</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7Bi+1%7D%20=%20r_%7Bi+1%7D%20+%20%5Cbeta_i%20p_i%0A"></p></li>
</ol>
<hr>
<p>The method can be seen better if we trace through the minimization problem for fixed <img src="https://latex.codecogs.com/png.latex?x"> and with variable <img src="https://latex.codecogs.com/png.latex?%5Calpha">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20%5C%7CA%20(x+%5Calpha%20p)%20-%20b%5C%7C%5E2%20%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7B2%7Dr%5ET%20r%20+%20%5Calpha%20%5Clangle%20r,%20A%20p%20%5Crangle%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Calpha%5E2%20%5Clangle%20p,%20A%5ET%20A%20p%20%5Crangle%20%5C%5C%0A0%20&amp;=%20%5Clangle%20r,%20A%20p%20%5Crangle%20+%20%5Calpha%20%5Clangle%20p,%20A%5ET%20A%20p%20%5Crangle%20%5C%5C%0A%5Calpha%20&amp;=%20-%5Cfrac%7B%5Clangle%20r,%20A%20p%20%5Crangle%7D%7B%5C%7CA%20p%5C%7C%5E2%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>But we can also trace this through using the expansion of lest squares and removing the <img src="https://latex.codecogs.com/png.latex?%5C%7Cb%5C%7C%5E2"> term:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%20%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%20%5Ctilde%20x%5ET%20A%20x%20-%20%5Ctilde%20x%5ET%20b%20%20%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cleft(%20x%5ET%20A%20x%20+%202%20%5Calpha%20x%5ET%20A%20p%20+%20%5Calpha%5E2%20p%5ET%20A%20p%20%5Cright)%20-%20x%5ET%20b%20-%20%5Calpha%20p%5ET%20b%5C%5C%0A0&amp;=%20x%5ETAp%20+%20%5Calpha%20p%5ET%20A%20p%20-%20p%5ET%20b%20%5C%5C%0A%5Calpha%20&amp;=%20%5Cfrac%7Bp%5ET%20(Ax-b)%7D%7Bp%5ET%20A%20p%7D%0A%5Cend%20%7Balign%7D%0A"></p>


</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture4/</guid>
  <pubDate>Fri, 20 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture4/imgs/tikhonov_regularization.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Lecture 3: Image Denoising with Gradient Descent and Early Stopping</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture3/</link>
  <description><![CDATA[ 




<section id="derivations-of-linear-algebra-gradients" class="level2">
<h2 class="anchored" data-anchor-id="derivations-of-linear-algebra-gradients">Derivations of Linear Algebra Gradients</h2>
<p>Often times we wish to find the gradient of a multi-variable function that is formulated as a linear algebra operation. In this case there are some useful “vector” derivatives and rules that can simplify the process of calculating more complex expressions. The gradient with respect to vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is generally denoted as <img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D"> or alternatively <img src="https://latex.codecogs.com/png.latex?%5Cpartial_%7B%5Cmathbf%7Bx%7D%7D">, somewhat of an abuse of notation.</p>
<section id="a-warmup" class="level4">
<h4 class="anchored" data-anchor-id="a-warmup">1. A Warmup</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20a%5E%5Ctop%20x%20=%20%5Csum_i%20a_i%20x_i"></p>
<p>This is a vector dotproduct and the gradient is simply the vector <img src="https://latex.codecogs.com/png.latex?a">. There is a subtlety here in that the vector is usually transposed to be a column vector, but this is not always the case. Some people in the field of statistics prefer to use row vector, this can cause some confusion. The general convention is a column vector.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20=%20a"></p>
</section>
<section id="matrix-vector-multiplication" class="level4">
<h4 class="anchored" data-anchor-id="matrix-vector-multiplication">2. Matrix Vector Multiplication</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20Ax"></p>
<p>Based on the previous process we are expecting to potentially get <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop"> as the gradient, however the transpose does not occur in this case because we are not returning a vector that needs to be reshaped into a column form.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20=%20A"></p>
</section>
<section id="quadratic-forms" class="level4">
<h4 class="anchored" data-anchor-id="quadratic-forms">3. Quadratic Forms</h4>
<p>Often we may encounter quadratic linear functions that are of the form: <img src="https://latex.codecogs.com/png.latex?%20%5Cphi(x)%20=%20x%5E%5Ctop%20A%20x"></p>
<p>One way to determine the gradient is to expand the expression and evaluate for a single <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x_i%7D"> term. This method can be found at <a href="https://www.cs.ubc.ca/~schmidtm/Courses/340-F16/linearQuadraticGradients.pdf">Mark Schmidt Notes</a> Instead we can apply a chain rule for matrix differentiation that is based on the product rule for differentiation. The chain rule for matrix differentiation is as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%20f(g,h)%7D%7Bd%20x%7D%20=%20%5Cfrac%7Bd%20(g(x)%5E%5Ctop)%7D%7Bd%20x%7D%20%5Cfrac%7B%5Cpartial%20f(g,h)%7D%7B%5Cpartial%20g%7D%20+%20%5Cfrac%7Bd%20(h(x)%5E%5Ctop)%7D%7Bd%20x%7D%20%5Cfrac%7B%5Cpartial%20f(g,h)%7D%7B%5Cpartial%20h%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%20%7Balign*%7D%0A%5Cphi(x)%20&amp;=%20x%5E%5Ctop%20A%20x%20%5C%5C%0A%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20(x%5E%5Ctop%20A%20x)%20%5C%5C%0A&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20(A%20x)%20=%20%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20y%5C%5C%0A&amp;=%20(%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x)%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20x%5E%5Ctop%20y%20+%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20y%5E%5Ctop%20%5Cnabla_%7B%5Cmathbf%7By%7D%7D%20x%5E%5Ctop%20y%5C%5C%0A&amp;=%20I%20y%20+%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20(x%5E%5Ctop%20A%5E%5Ctop)%20x%5C%5C%0A&amp;=%20(A%20x)%20+%20A%5E%5Ctop%20x%5C%5C%0A&amp;=%20(A%20+%20A%5E%5Ctop)%20x%0A%5Cend%20%7Balign*%7D%0A"></p>
<p>This fits with the generalization for a scalar quadratic form where we end up with <img src="https://latex.codecogs.com/png.latex?(cx%5E2)'%20=%20(c%20+%20c%5E%5Ctop)x%20=%202cx"> where <img src="https://latex.codecogs.com/png.latex?c"> is a scalar.</p>
</section>
<section id="hadamard-product" class="level4">
<h4 class="anchored" data-anchor-id="hadamard-product">4. Hadamard Product</h4>
<p>Another form of interest is the hadamard product of two vectors. <img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20(Ax)%5E2%20=%20Ax%20%5Codot%20Ax"></p>
<p>For this one let <img src="https://latex.codecogs.com/png.latex?y=Ax"> and we can index each element of the vector <img src="https://latex.codecogs.com/png.latex?y"> as <img src="https://latex.codecogs.com/png.latex?y_i%20=%20%5Csum_j%20A_%7Bij%7D%20x_j">. The hadamard product is a vector <img src="https://latex.codecogs.com/png.latex?z"> where <img src="https://latex.codecogs.com/png.latex?z_i%20=%20y_i%5E2">, we can compute the jacobian since now we are taking the gradient with respect to a vector.</p>
<p>The Jacobian will contain the partial derivatives:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5Cvec%7Bz%7D%7D%7Bd%5Cvec%7Bx%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_1%7D%7B%5Cpartial%20x_n%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_2%7D%7B%5Cpartial%20x_n%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20z_n%7D%7B%5Cpartial%20x_n%7D%20%5Cend%7Bbmatrix%7D%0A"></p>
<p>If we can recover this then we have the gradient of the hadamard product.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Az_i%20&amp;=%20y_i%5E2%20=%20%5Cleft(%20%5Csum_j%20A_%7Bij%7D%20x_j%20%5Cright)%5E2%5C%5C%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20x_j%7D%20y_i%5E2%20&amp;=%202%20y_i%20%5Cfrac%7B%5Cpartial%20y_i%7D%7B%5Cpartial%20x_j%7D%20=%202%20y_i%20A_%7Bij%7D%5C%5C%0A%5Cfrac%7Bd%5Cvec%7Bz%7D%7D%7Bd%5Cvec%7Bx%7D%7D%20&amp;=%202%20%5Cbegin%7Bbmatrix%7D%20y_1%20A_%7B1j%7D%20&amp;%20y_1%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_1%20A_%7Bnj%7D%20%5C%5C%0Ay_2%20A_%7B1j%7D%20&amp;%20y_2%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_2%20A_%7Bnj%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Ay_n%20A_%7B1j%7D%20&amp;%20y_n%20A_%7B2j%7D%20&amp;%20%5Ccdots%20&amp;%20y_n%20A_%7Bnj%7D%20%5Cend%7Bbmatrix%7D%5C%5C%0A&amp;=%202%20%5Ccdot%20%5Ctext%7Bdiag%7D(%5Cvec%7By%7D)A%5C%5C%0A&amp;=%202%20%5Ccdot%20%5Ctext%7Bdiag%7D(Ax)A%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="least-squares-gradient" class="level4">
<h4 class="anchored" data-anchor-id="least-squares-gradient">5. Least Squares Gradient</h4>
<p>We look at taking the gradient of the expansion of least squares to find the gradient for this optimization objective.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cphi(x)%20=%20%5Cfrac%7B1%7D%7B2%7D%20%7C%7CAx%20-%20b%7C%7C%5E2%20=%20%5Cfrac%7B1%7D%7B2%7D%20(x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20-%202%20b%5E%5Ctop%20A%20x%20+%20b%5E%5Ctop%20b)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign*%7D%0A%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cphi%20&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20(x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20-%202%20b%5E%5Ctop%20A%20x%20+%20b%5E%5Ctop%20b)%20%5Cright)%5C%5C%0A&amp;=%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20%5Cfrac%7B1%7D%7B2%7D%20x%5E%5Ctop%20A%5E%5Ctop%20A%20x%20%5Cright)%20-%20%5Cnabla_%7B%5Cmathbf%7Bx%7D%7D%20%5Cleft(%20b%5E%5Ctop%20A%20x%20%5Cright)%5C%5C%0A&amp;=%20%5Cfrac%7B1%7D%7B2%7D%20(A%5E%5Ctop%20A%20+%20A%5E%5Ctop%20A)%20x%20-%20A%5E%5Ctop%20b%5C%5C%0A&amp;=%20A%5E%5Ctop%20A%20x%20-%20A%5E%5Ctop%20b%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>Returning to the first-order optimality condition we have: <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20x%20=%20A%5E%5Ctop%20b"></p>
<p>At which point it is in question if <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible. The invertibility of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is determined by the rank of <img src="https://latex.codecogs.com/png.latex?A">. The rank of A for a non-square matrix is the number of independent columns. If we examine <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20Ax%20=%200"> then we see that this is only true where the range of <img src="https://latex.codecogs.com/png.latex?A"> is in the nullspace of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop">. But <img src="https://latex.codecogs.com/png.latex?N(A%5E%5Ctop)%20=%20R(A)%5E%5Cperp"> so they are orthogonal subspaces and will never coincide unless <img src="https://latex.codecogs.com/png.latex?Ax=0">. So then <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20x%20=%200"> implies that <img src="https://latex.codecogs.com/png.latex?Ax%20=%200"> which means that if the null space of <img src="https://latex.codecogs.com/png.latex?A=%5C%7B0%5C%7D"> then the null space of <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A%20=%20%5C%7B0%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible. Since <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is symmetric and positive definite, it is invertible.</p>
<p><img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop%20A"> is invertible <img src="https://latex.codecogs.com/png.latex?%5Ciff"> <img src="https://latex.codecogs.com/png.latex?A"> is full rank, that is all the columns are independent. For non-square matrices, an <img src="https://latex.codecogs.com/png.latex?m%3En"> matrix that is wide will trivially not satisfy this condition. A tall matrix <img src="https://latex.codecogs.com/png.latex?m%3Cn"> will satisfy the condition if the columns are independent.</p>
</section>
</section>
<section id="gradient-descent-analysis" class="level2">
<h2 class="anchored" data-anchor-id="gradient-descent-analysis">Gradient Descent Analysis</h2>
<p>The standard form of the gradient descent algorithm comes from the field of optimization and can be written as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x_%7Bk+1%7D%20=%20x_k%20-%20%5Calpha%20%5Cnabla_x%20%5Cphi(x_k)"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is the learning rate, which can be dependent on the problem and the gradient. Substituting the gradient of the least squares problem we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0Ax_%7Bk+1%7D%20&amp;=%20x_k%20-%20%5Calpha%20(A%5E%5Ctop%20A%20x_k%20-%20A%5E%5Ctop%20b)%5C%5C%0A%5Cfrac%7Bx_%7Bk+1%7D-x_k%7D%7B%5Calpha%7D%20&amp;=%20A%5E%5Ctop%20b%20-%20A%5E%5Ctop%20A%20x_k%5C%5C%0A%5Clim_%7B%5Calpha%20%5Cto%200%7D%20%5Cfrac%7Bx_%7Bk+1%7D-x_k%7D%7B%5Calpha%7D%20&amp;=%20%5Cfrac%7Bdx%7D%7Bdt%7D%20=%20A%5E%5Ctop%20(b%20-A%20x),%20%5Cquad%20x(0)%20=%20x_0%0A%5Cend%7Balign%7D%0A"></p>
<p>This ODE is the continuous version of the gradient descent algorithm, also known as the <em>gradient flow</em>. Since this a linear first-order ODE we can solve it analytically. The general method for a linear system ODE would be to find the homogeneous solution and the particular solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0Ax'%20+%20A%5E%5Ctop%20A%20x%20&amp;=%20A%5E%5Ctop%20b%5C%5C%0A%5Ctext%7BGuess:%7D%20x%20&amp;=%20v%20e%5E%7B%5Clambda%20t%7D%5C%5C%0A%5Clambda%20v%20e%5E%7B%5Clambda%20t%7D%20+%20A%5E%5Ctop%20A%20v%20e%5E%7B%5Clambda%20t%7D%20&amp;=%20A%5E%5Ctop%20b%20e%5E%7B%5Clambda%20t%7D%5C%5C%0A%5Clambda%20v%20+%20A%5E%5Ctop%20A%20v%20&amp;=%200%20%5Cqquad%20%5Ctext%7BHomogeneous%7D%5C%5C%0A(%5Clambda%20I%20+%20A%5E%5Ctop%20A)%20v%20&amp;=%200%5C%5C%0A%5Clambda%20&amp;=%20%5Ctext%7Beigenvalues%20of%20%7D%20A%5E%5Ctop%20A,%20%5Cquad%20v%20=%20%5Ctext%7Beigenvectors%20of%20%7D%20A%5E%5Ctop%20A%0A%5Cend%7Balign%7D%0A"></p>
<p>Before continuing further with this line, we can see that the solutions will be closely related to the SVD because it contains the information on these eigenvalues and vectors. So we can try to solve the ODE with the SVD.</p>
<section id="solving-the-ode-with-svd" class="level4">
<h4 class="anchored" data-anchor-id="solving-the-ode-with-svd">Solving the ODE with SVD</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AA%20&amp;=%20U%20%5CSigma%20V%5E%5Ctop%5C%5C%0AA%5ETA%20&amp;=%20V%20%5CSigma%5E2%20V%5E%5Ctop%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7Dx%20&amp;=%20V%20%5CSigma%20U%5E%5Ctop%20b%20-%20V%20%5CSigma%5E2%20V%5E%5Ctop%20x%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>Now let <img src="https://latex.codecogs.com/png.latex?z%20=%20V%5E%5Ctop%20x"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20b%20=%20U%20%5E%20%5Ctop%20b"> then we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cfrac%7Bd%7D%7Bdt%7D%20(V%5E%5Ctop%20x)%20&amp;=%20%5CSigma%20%5Chat%20b%20-%20%5CSigma%5E2%20(V%5E%5Ctop%20x)%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20z%20&amp;=%20%5CSigma%20%5Chat%20b%20-%20%5CSigma%5E2%20z%5C%5C%0Az'%20+%20%5CSigma%5E2%20z%20&amp;=%20%5CSigma%20%5Chat%20b%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>At this stage since everything has been diagonalized, all of the equations are decoupled and independent so we can solve for the <img src="https://latex.codecogs.com/png.latex?%5Clambda_i"> cases independently. We find the homogeneous <img src="https://latex.codecogs.com/png.latex?z_h"> and particular <img src="https://latex.codecogs.com/png.latex?z_p"> solutions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Az_h'%20+%20%5Clambda%5E2%20z_h%20&amp;=%200%5C%5C%0Az_h%20&amp;=%20c%20e%5E%7B-%5Clambda%5E2%20t%7D%5C%5C%0Az_p'%20+%20%5Clambda%5E2%20z_p%20&amp;=%20%5Clambda%20%5Chat%20b%5C%5C%0Az_p%20&amp;=%20D%20%5Chat%20b%20%5C%5C%0A%5Clambda%5E2%20D%20%5Chat%20b%20&amp;=%20%5Clambda%20%5Chat%20b%5C%5C%0AD%20&amp;=%20%5Cfrac%7B1%7D%7B%5Clambda%7D%5C%5C%0Az_p%20&amp;=%20%5Cfrac%7B1%7D%7B%5Clambda%7D%20%5Chat%20b%0A%5Cend%7Balign%7D%0A"></p>
<p>So the general solution for the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component is:</p>
<p><img src="https://latex.codecogs.com/png.latex?z_i%20=%20c_i%20e%5E%7B-%5Clambda_i%5E2%20t%7D%20+%20%5Cfrac%7B1%7D%7B%5Clambda_i%7D%20%5Chat%20b_i"></p>
<p>Supposing that we start at <img src="https://latex.codecogs.com/png.latex?x=0"> then we have <img src="https://latex.codecogs.com/png.latex?z=0"> at all elements and can solve the coefficients <img src="https://latex.codecogs.com/png.latex?c_i">:</p>
<p><img src="https://latex.codecogs.com/png.latex?c_i%20=%20-%5Cfrac%7B1%7D%7B%5Clambda_i%7D%20%5Chat%20b_i"></p>
<p>Then putting it all back together with all the equations we have that</p>
<p><img src="https://latex.codecogs.com/png.latex?Z%20=%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20%5Chat%20b"></p>
<p>Substituting back in for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?b"> we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20V%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20U%5E%5Ctop%20b"></p>
<p>If we stare at this long enough it begins to look a lot like the pseudoinverse of <img src="https://latex.codecogs.com/png.latex?A"> from earlier:</p>
<p><img src="https://latex.codecogs.com/png.latex?x%20=%20V%20%5CSigma%5E%7B-1%7D%20U%5E%5Ctop%20b"> except in this case there is a time dependence. At the limit as <img src="https://latex.codecogs.com/png.latex?t%20%5Crightarrow%20%5Cinfty"> we have that the exponential term goes to zero and we are left with the pseudoinverse solution. This is a nice way to see that the pseudoinverse is the limit of the gradient descent algorithm. What we may be interested in is what happens at earlier stages since each decay term is dependent on the eigenvalues.</p>
<p>For a simple matrix problem we can create a matrix and plot out the time evolution of the diagonals of the matrix that are of interest. In a sense, we have singular values that are time evolving at different rates.</p>
<div id="57334044" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seed for reproducibility</span></span>
<span id="cb1-6">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 5x10 matrix A with random values</span></span>
<span id="cb1-8">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector b of size 5 with random values</span></span>
<span id="cb1-10">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the SVD of A</span></span>
<span id="cb1-13">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(A, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time dependent vector of the singular values</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> St(t):</span>
<span id="cb1-17">    Sdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S[:, np.newaxis]</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Sdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Sdim</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the time evolution of the values and plot them on a log scale y axis with a linear time x axis</span></span>
<span id="cb1-21">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-22">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[np.newaxis, :]</span>
<span id="cb1-23"></span>
<span id="cb1-24">singular_vals_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> St(T)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the plot</span></span>
<span id="cb1-27">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color palette</span></span>
<span id="cb1-30">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husl"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(S))</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the singular values and their asymptotes</span></span>
<span id="cb1-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(S)):</span>
<span id="cb1-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the time evolution of each singular value</span></span>
<span id="cb1-35">    sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>singular_vals_t[i, :], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$1/S_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">$ '</span>)</span>
<span id="cb1-36">    </span>
<span id="cb1-37">    Sinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>S[i]</span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a horizontal asymptote at the original singular value</span></span>
<span id="cb1-40">    plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Sinv, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-41">    </span>
<span id="cb1-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the asymptote with the singular value</span></span>
<span id="cb1-43">    plt.text(t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, Sinv, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Sinv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>)</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configure plot aesthetics</span></span>
<span id="cb1-46">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-47">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inverse Singular Vals'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-48">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Evolution of Pseudo Inverse in Gradient Flow'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-49">plt.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inverse Singular Vals'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>)</span>
<span id="cb1-50">plt.xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb1-51">plt.tight_layout()</span>
<span id="cb1-52">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/pseudo_inverse_time_evolution.png'</span>)</span>
<span id="cb1-53">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-2-output-1.png" width="703" height="374" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So we can use early stopping to prevent the flow from reaching the optimal point, a very useful technique. When it comes to inverse theory, often we are not interested in the optimal solution, but more interested in getting somewhere close that is not too noisy. This method differs from the thresholded pseudoinverse from the previous lecture, in that it allows some blending of the the smaller singular values, but their propensity for blowing up is controlled by the time exponent and early stopping.</p>
</section>
<section id="example-for-image-recovery-using-analytic-solution" class="level3">
<h3 class="anchored" data-anchor-id="example-for-image-recovery-using-analytic-solution">Example for Image Recovery using Analytic Solution</h3>
<p>Referring back to the problem of estimating the original image based on a noisy point spread function. We can monitor the time evolution of the estimate using gradient flow. Some code below defines the problem again, with recovery of the SVD decomposition for the 32x32 image, which will be used to solve the ODE for the gradient flow.</p>
<div id="2e0edef4" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#matplotlib.use('TkAgg')</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.fft</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> gaussianConv(nn.Module):</span>
<span id="cb2-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch module that applies a Gaussian convolution to an input image using </span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a parameterized Gaussian Point Spread Function (PSF). The PSF is derived </span></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from a covariance matrix and the derivatives of the Gaussian are computed </span></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for edge detection.</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C (torch.Tensor): Inverse of covariance matrix used to define the shape of the Gaussian.</span></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        t (float, optional): Scaling factor for the Gaussian, default is np.exp(5).</span></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n0 (float, optional): Scaling factor for the original PSF, default is 1.</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nx (float, optional): Scaling factor for the derivative along the x-axis, default is 1.</span></span>
<span id="cb2-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ny (float, optional): Scaling factor for the derivative along the y-axis, default is 1.</span></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-37">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(gaussianConv, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-38"></span>
<span id="cb2-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C</span>
<span id="cb2-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb2-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n0</span>
<span id="cb2-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx</span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny</span>
<span id="cb2-44"></span>
<span id="cb2-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb2-46">        P, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.psfGauss(image.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], image.device)</span>
<span id="cb2-47">        P_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(P, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb2-48">        S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(P_shifted)</span>
<span id="cb2-49">        I_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(image)</span>
<span id="cb2-50">        B_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> I_fft</span>
<span id="cb2-51">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.real(torch.fft.ifft2(B_fft))</span>
<span id="cb2-52"></span>
<span id="cb2-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> B</span>
<span id="cb2-54"></span>
<span id="cb2-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> psfGauss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb2-56">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb2-57">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a meshgrid of (X, Y) coordinates</span></span>
<span id="cb2-60">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb2-61">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb2-62">        X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb2-63">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb2-64">        Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb2-65"></span>
<span id="cb2-66">        cx, cy, cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-67"></span>
<span id="cb2-68">        PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y))</span>
<span id="cb2-69">        PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(PSF.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>())</span>
<span id="cb2-70"></span>
<span id="cb2-71">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-72">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb2-73">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-74">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-75">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-76">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-77"></span>
<span id="cb2-78">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdx.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb2-79">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdy.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb2-80"></span>
<span id="cb2-81">        PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdx, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-82">        PSFdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdy, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-83"></span>
<span id="cb2-84">        PSF_combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdy</span>
<span id="cb2-85"></span>
<span id="cb2-86">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb2-87"></span>
<span id="cb2-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PSF_combined, center</span>
<span id="cb2-89"></span>
<span id="cb2-90">dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb2-91">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dim, dim)</span>
<span id="cb2-92">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-93">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-94"></span>
<span id="cb2-95">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb2-96">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-97"></span>
<span id="cb2-98">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.flatten()))</span>
<span id="cb2-99">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n,n)</span>
<span id="cb2-100"></span>
<span id="cb2-101">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb2-103">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb2-104">    e_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb2-105">    e_ij[:,:, i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-106">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(e_ij)</span>
<span id="cb2-107">    Amat[:, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.flatten()</span>
<span id="cb2-108">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-109"></span>
<span id="cb2-110">U, S, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat.to(torch.float64))</span>
<span id="cb2-111">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span></code></pre></div>
</details>
</div>
<p>Now that we have the matrix form of the forward operator <code>Amat</code> defined, along with the forward result <code>b</code> and the the decomposition <code>U, S, V</code> we can run the pseudo-inverse gradient flow method as before. So in this case we will be computing:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20x%20=%20V%20%5Ctext%7Bdiag%7D%5Cleft(%20%5Clambda_i%5E%7B-1%7D%20(1%20-%20%5Cexp%20(-%5Clambda_i%20t))%20%5Cright)%20U%5E%5Ctop%20b"></p>
<p>Since these represents an evolution over time, an animation can be created to show the time evolution of the image recovery, along with the effect of continuing into a region where noise is amplified and dominates.</p>
<p>Recalling the original and distorted images with a small amount of noise <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> are as follows:</p>
<div id="f8cdd23c" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb3-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb3-5">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb3-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">b_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.randn_like(b)</span>
<span id="cb3-9">plt.imshow(b_noisy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distorted Image'</span>)</span>
<span id="cb3-11">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb3-12">plt.tight_layout()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-4-output-1.png" width="549" height="288" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The distorted image has had much of its intensity spread out diffusely, so it is only visible as a faint outline. The noise is also visible in the image as a grainy texture. The gradient flow method will attempt to recover the original image from this distorted image.</p>
<div id="7febabf8" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> animation</span>
<span id="cb4-2"></span>
<span id="cb4-3">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb4-4">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb4-5">b_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.randn_like(b_flat)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_xhat(t):</span>
<span id="cb4-8">    Sinv_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>S<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S</span>
<span id="cb4-9">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(Sinv_t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.T</span>
<span id="cb4-10">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_noisy</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> xhat</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time evolution parameters</span></span>
<span id="cb4-14">num_frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb4-15">t_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.logspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, num_frames)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the plot</span></span>
<span id="cb4-18">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb4-19">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.imshow(np.zeros((dim, dim)), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-20">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Evolution of Pseudo-Inverse Gradient Flow'</span>)</span>
<span id="cb4-21">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the error text</span></span>
<span id="cb4-24">error_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb4-25">                     verticalalignment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb4-26"></span>
<span id="cb4-27">time_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax.transAxes, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb4-28">                        verticalalignment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize containers to track min error and best time</span></span>
<span id="cb4-31">tracking <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Animation update function</span></span>
<span id="cb4-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_frame(t):</span>
<span id="cb4-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute time-dependent singular values</span></span>
<span id="cb4-36">    Sinv_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S</span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat at time t</span></span>
<span id="cb4-38">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(Sinv_t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.t()</span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the image estimate x(t)</span></span>
<span id="cb4-40">    xt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_noisy</span>
<span id="cb4-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the relative error</span></span>
<span id="cb4-42">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xt) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.norm(x_flat)</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update min_error and best_t if current error is lower</span></span>
<span id="cb4-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> error.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>]:</span>
<span id="cb4-46">        tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_error'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error.item()</span>
<span id="cb4-47">        tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb4-48"></span>
<span id="cb4-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape to image dimensions</span></span>
<span id="cb4-50">    x_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xt.reshape(dim, dim).detach().numpy()</span>
<span id="cb4-51"></span>
<span id="cb4-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the image data</span></span>
<span id="cb4-53">    im.set_data(x_image)</span>
<span id="cb4-54"></span>
<span id="cb4-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the error text</span></span>
<span id="cb4-56">    error_text.set_text(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Relative Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-57">    time_text.set_text(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-58"></span>
<span id="cb4-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [im, error_text, time_text]</span>
<span id="cb4-60"></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the animation</span></span>
<span id="cb4-62">ani <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> animation.FuncAnimation(fig, update_frame, frames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_vals, blit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-63"></span>
<span id="cb4-64">ani.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imgs/gradient_flow.gif'</span>, writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pillow'</span>, fps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-65">plt.close(fig)</span></code></pre></div>
</details>
</div>
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/imgs/gradient_flow.gif" class="img-fluid" width="600"></p>
<p>And we saved the best time that was discovered for the recovery (with prior knowledge of the ground truth). So we can inspect that image, this was the best that we could do with the gradient flow method.</p>
<div id="96468aea" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">best_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_xhat(tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_t'</span>]).reshape(dim, dim).detach().numpy()</span>
<span id="cb5-2"></span>
<span id="cb5-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb5-4">plt.imshow(best_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_img)), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Best Reconstruction at t=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best_t"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Relative Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tracking[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_error"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-6">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-6-output-1.png" width="463" height="501" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="recovery-of-the-adjoint-operator-using-autograd" class="level2">
<h2 class="anchored" data-anchor-id="recovery-of-the-adjoint-operator-using-autograd">Recovery of the Adjoint Operator using Autograd</h2>
<p>In this case we were able to compute the matrix form of <img src="https://latex.codecogs.com/png.latex?A"> and use its transpose to compute the SVD, but in many cases this might be too expensive or there may not be a closed form analytic solution to the early stopping technique. In such cases we wish to recover the adjoint. The question then is how to recover the adjoint operator from the <code>Amv</code> operator? There are helpful tools available through the use of automatic differentiation to track the gradients of the forward operator and recover the adjoint operator. This is a very powerful tool that can be used to recover the adjoint operator in a very general way.</p>
<p>By definition the adjoint has the property that: <img src="https://latex.codecogs.com/png.latex?%5Clangle%20Ax,%20v%20%5Crangle%20=%20%5Clangle%20x,%20A%5E%5Ctop%20v%20%5Crangle"></p>
<section id="explicit-computation-of-the-adjoint" class="level3">
<h3 class="anchored" data-anchor-id="explicit-computation-of-the-adjoint">Explicit Computation of the Adjoint</h3>
<p>We can compute the adjoint explicitly for the <code>Amv</code> operator based on its computation from earlier. The discrete fourier transform matrix operator <img src="https://latex.codecogs.com/png.latex?F"> has the property that <img src="https://latex.codecogs.com/png.latex?F%5E%7B-1%7D%20=%20F%5E%5Ctop"> so we can use this to compute the adjoint.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0AA(x)%20&amp;=%20%5Cmathcal%7BF%7D%5E-1%20%5Cleft(%20%5Cmathcal%7BF%7D(P)%20%5Codot%20%5Cmathcal%7BF%7D(x)%20%5Cright)%5C%5C%0A&amp;=%20F%5E%5Ctop%20%5Cleft(%20%5Ctext%7Bdiag%7D%20(F(P))%20F(x)%20%5Cright)%5C%5C%0AA%5E%5Ctop(v)%20&amp;=%20F%5E%5Ctop%20%5Ctext%7Bdiag%7D%20(F(P))%5E*%20F%20v%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>Where the hadamard operation of the two vectors has been modified to a matrix form by diagonalizing the vector <img src="https://latex.codecogs.com/png.latex?F(P)"> that is the Fourier transform of the point spread function. From this form it is posible to take the adjoint of the operator by taking the complex conjugate of the transpose of the entire operation.</p>
</section>
<section id="autograd-computation-of-the-adjoint" class="level3">
<h3 class="anchored" data-anchor-id="autograd-computation-of-the-adjoint">Autograd Computation of the Adjoint</h3>
<p>We start with a new function <img src="https://latex.codecogs.com/png.latex?h%20=%20v%5E%5Ctop%20A(x)"> and we wish to compute the gradient of <img src="https://latex.codecogs.com/png.latex?h"> with respect to <img src="https://latex.codecogs.com/png.latex?x">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cnabla_x%20h%20=%20%5Cnabla_x%20(v%5E%5Ctop%20A(x))%20=%20A%5E%5Ctop(v)"></p>
<p>The gradient of <img src="https://latex.codecogs.com/png.latex?h"> with respect to <img src="https://latex.codecogs.com/png.latex?x"> is the adjoint operator <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop(v)">. We can use the <code>torch.autograd.grad</code> function to compute the gradient of <img src="https://latex.codecogs.com/png.latex?h"> with respect to <img src="https://latex.codecogs.com/png.latex?x">.</p>
<div id="ae7a7b8e" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Amv_adjoint(v):</span>
<span id="cb6-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dim, dim)</span>
<span id="cb6-3">    x.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-4">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the dot product of the forward operator with the input vector</span></span>
<span id="cb6-6">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v)</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the gradient of the dot product with respect to the input image</span></span>
<span id="cb6-8">    adjoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.autograd.grad(h, x, create_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> adjoint</span></code></pre></div>
</details>
</div>
<p>We can use this to recover <img src="https://latex.codecogs.com/png.latex?A%5E%5Ctop"> for the general case if we run the operator on the set of basis vectors in the image space. This will give us the adjoint operator in the form of a matrix. We can also use it to confirm that it recovers the matrix transpose of the forward operator if we are working with a simple matrix, reusing the <code>Amat</code> matrix from earlier to take its transpose and compare it to the adjoint operator.</p>
<div id="4dbef633" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">Amat_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n,n)</span>
<span id="cb7-2"></span>
<span id="cb7-3">dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same as earlier</span></span>
<span id="cb7-4">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(dim):</span>
<span id="cb7-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(dim):</span>
<span id="cb7-7">    e_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb7-8">    e_ij[:,:, i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv_adjoint(e_ij)</span>
<span id="cb7-10">    Amat_adj[:, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.flatten()</span>
<span id="cb7-11">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(Amat_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Amat.T)</span>
<span id="cb7-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Norm of difference between adjoint and transpose: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>diff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2e}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Norm of difference between adjoint and transpose: 4.43e-07</code></pre>
</div>
</div>
<p>So the difference is within the bounds of numerical precison and the code appears to be working correctly.</p>
</section>
</section>
<section id="gradient-descent-with-adjoint" class="level2">
<h2 class="anchored" data-anchor-id="gradient-descent-with-adjoint">Gradient Descent with Adjoint</h2>
<p>We can now use the defined operators (functions) from earlier to setup a simple gradient descent algorithm with a step size and early stopping to produce a recovery image that bypasses the need to compute the SVD decomposition, which may be very expensive for large matrices.</p>
<div id="4d7ed9ba" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> least_squares_sol(x0, b, Amv, Amv_adjoint, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Solves the least squares problem using gradient descent with optional progress tracking.</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - x0 (torch.Tensor): Initial guess for the solution.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - b (torch.Tensor): Observation vector.</span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Amv (callable): Function to compute A @ x.</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - Amv_adjoint (callable): Function to compute A^T @ v.</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - max_iter (int): Maximum number of iterations.</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - alpha (float): Learning rate.</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - tol (float): Tolerance for convergence.</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - show_progress (bool): If True, display a progress bar; otherwise, suppress output.</span></span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - x (torch.Tensor): Approximated solution vector.</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-20">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x0.clone()</span>
<span id="cb9-21">    x.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-22">    b_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.clone() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.randn_like(b)</span>
<span id="cb9-23"></span>
<span id="cb9-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize progress bar or a placeholder for quiet mode</span></span>
<span id="cb9-25">    pbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_iter, desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Least Squares Iteration'</span>, unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iter'</span>, disable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> show_progress) </span>
<span id="cb9-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_iter):</span>
<span id="cb9-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradient descent update</span></span>
<span id="cb9-28">        residual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b_noisy</span>
<span id="cb9-29">        gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv_adjoint(residual)</span>
<span id="cb9-30">        xnext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb9-31"></span>
<span id="cb9-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute relative error</span></span>
<span id="cb9-33">        error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(xnext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x) </span>
<span id="cb9-34"></span>
<span id="cb9-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the progress bar with the current error</span></span>
<span id="cb9-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> show_progress:</span>
<span id="cb9-37">            pbar.set_postfix({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Error'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4e}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>})</span>
<span id="cb9-38">            pbar.update(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-39"></span>
<span id="cb9-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for convergence</span></span>
<span id="cb9-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tol:</span>
<span id="cb9-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> show_progress:</span>
<span id="cb9-43">                pbar.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Converged at iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> with error </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4e}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-44">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xnext</span>
<span id="cb9-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb9-46"></span>
<span id="cb9-47">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xnext</span>
<span id="cb9-48"></span>
<span id="cb9-49">    pbar.close()</span>
<span id="cb9-50">    </span>
<span id="cb9-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span>
<span id="cb9-52"></span>
<span id="cb9-53">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb9-54">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb9-55">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> least_squares_sol(x0, b, Amv, Amv_adjoint, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-56"></span>
<span id="cb9-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display final images</span></span>
<span id="cb9-58">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb9-59">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-60">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-61">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb9-62">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb9-63">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-64">plt.imshow(xhat.detach().numpy()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-65">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Recovered Image'</span>)</span>
<span id="cb9-66">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb9-67">plt.tight_layout()</span>
<span id="cb9-68">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture3/index_files/figure-html/cell-9-output-1.png" width="549" height="288" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Note that torch does have the framework to run autograd on the least squares objective itself, but for this general method we are using the adjoint to compute the gradient (and indirectly invoking autograd). This framework is the most general for when there might not be explicit analytic solutions to the least squares problem, but we have the forward operator and its adjoint.</p>


</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>Adjoint</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture3/</guid>
  <pubDate>Tue, 17 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture3/imgs/gradient_flow.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Lecture 2: Image Denoising with SVD</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture2/</link>
  <description><![CDATA[ 




<section id="image-denoising-and-deblurring" class="level1">
<h1>Image Denoising and Deblurring</h1>
<p>The motivation for the exercise comes from a real world problem. The Hubble space telescope when launched had a defect in its mirror. This defect caused the images to be blurred. The problem was initially addressed by using signal processing techniques to remove the aberrations from the images.</p>
<section id="point-spread-function" class="level3">
<h3 class="anchored" data-anchor-id="point-spread-function">Point Spread Function</h3>
<p>For such an image processing problem, we can consider the continuous incoming light as striking a 2D mirror that distorts the light, followed by a 2D sensor that captures the light. In this context we suppose that we have a noise kernel or a point spread function (PSF) that describes the distortion of the light at the mirror. The point spread function, being a convolution kernel, behaves as a Green’s function for the system in the continuous case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bb%7D(x,y)%20=%20%5Cint_%7B%5Cmathcal%7BX%7D%7D%20%5Cint_%7B%5Cmathcal%7BY%7D%7D%20%5Cvec%7BG%7D(x%20-%20x',%20y%20-%20y')%20%5Cvec%7Bu%7D(x',y')%20%5C,%20dx'%20dy'%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D(x,y)"> is the blurred image data that is recovered at the sensor, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D(x',y')"> is the true image data, and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7BG%7D(x,y)"> is the point spread function.</p>
<p>In the special case that the point spread function is <img src="https://latex.codecogs.com/png.latex?%5Cdelta(x-x',y-y')">, then the image data is not distorted and the sensor captures the true image data. However our experiment is to consider cases where there could be even severe distortions and see how this impacts the proposition of recovering the true image data, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D(x',y')"> from our sensor data, <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D(x,y)">.</p>
<section id="discrete-psf" class="level4">
<h4 class="anchored" data-anchor-id="discrete-psf">Discrete PSF</h4>
<p>The discrete analog of the continuous PSF can be more conveniently treated with we essentially flatten the the 2D mesh into a 1D vector, a common operation for signal processing. The unflattened case we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20b_%7Bij%7D%20=%20%5Csum_%7Bk=1%7D%5E%7Bn%7D%20%5Csum_%7Bl=1%7D%5E%7Bm%7D%20%5CDelta%20x%20%5CDelta%20y%20G(x_i%20-%20x_k,%20y_j%20-%20y_l)%20u_%7Bkl%7D%20"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?b"> is the blurred image data at the sensor, <img src="https://latex.codecogs.com/png.latex?u"> is the true image data, and <img src="https://latex.codecogs.com/png.latex?G"> is the discrete point spread function. If we flatten the 2D mesh into a 1D vector we can represent this as a 1D convolution operation: <img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bb%7D%20=%20%5Cvec%7BG%7D%20*%20%5Cvec%7Bu%7D%20"></p>
<p>Since this is a convolution operation, we can process it much more quickly by leveraging the convolution theorem.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cmathcal%7BF%7D(%5Cvec%7Bb%7D)%20&amp;=%20%5Cmathcal%7BF%7D(%5Cvec%7BG%7D%20*%20%5Cvec%7Bu%7D)%20%5C%5C%0A%5Cmathcal%7BF%7D(%5Cvec%7Bb%7D)%20&amp;=%20%5Cmathcal%7BF%7D(%5Cvec%7BG%7D)%20%5Cmathcal%7BF%7D(%5Cvec%7Bu%7D)%20%5C%5C%0A%5Cvec%7Bb%7D%20&amp;=%20%5Cmathcal%7BF%7D%5E%7B-1%7D(%5Cmathcal%7BF%7D(%5Cvec%7BG%7D)%20%5Codot%20%5Cmathcal%7BF%7D(%5Cvec%7Bu%7D))%0A%5Cend%7Balign%7D%0A"></p>
<p>The <img src="https://latex.codecogs.com/png.latex?%5Codot"> hadamard product is element-wise multiplication, the discrete analog of multiplication of two functions except over an array.</p>
</section>
</section>
<section id="matrix-representation-of-convolution-operation" class="level3">
<h3 class="anchored" data-anchor-id="matrix-representation-of-convolution-operation">Matrix Representation of Convolution Operation</h3>
<p>If we flatten the data down into a 1D vector then it is possible to construct a matrix operator that performs the convolution. This is a Toeplitz matrix, a matrix where each descending diagonal from left to right is constant, so that the row vectors represent a sliding window of the convolution kernel. We can flatten out the PSF and construct the matrix using it as the first row entry and then shifting the PSF to the right to fill out the rest of the rows.</p>
</section>
</section>
<section id="code-implementation" class="level1">
<h1>Code Implementation</h1>
<div id="c53e6b29" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#matplotlib.use('TkAgg')</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.fft</span></code></pre></div>
</details>
</div>
<p>We start off by introducing a point spread function within the torch framework. In the case we work with a parameterized gaussian kernel.</p>
<section id="gaussian-example" class="level3">
<h3 class="anchored" data-anchor-id="gaussian-example">Gaussian Example</h3>
<p>The multivariate extension of the gaussian function is given by: <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cexp%5Cleft(-%5Cfrac%7B1%7D%7B2%7D%20(x-%5Cmu)%5ET%20%5CSigma%5E%7B-1%7D%20(x-%5Cmu)%5Cright)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is the mean vector, <img src="https://latex.codecogs.com/png.latex?x"> is a position vector, and <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is the covariance matrix. The covariance matrix essentially encodes the eigenvectors and corresponding postive eigenvalues of the matrix. The covariance matrix is always symmetric and positive definite. In the context of the code, we are using <img src="https://latex.codecogs.com/png.latex?C"> as the inverse of the covariance matrix and working with a <img src="https://latex.codecogs.com/png.latex?%5Cmu=0"> value.</p>
<div id="mv-plot" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.ndimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convolve</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> multivariate_gaussian(pos, mean, cov):</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return the multivariate Gaussian distribution on array pos without using einsum notation."""</span></span>
<span id="cb2-5">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-6">    diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean</span>
<span id="cb2-7">    cov_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(cov)</span>
<span id="cb2-8">    </span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the exponent</span></span>
<span id="cb2-10">    diff_cov_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> cov_inv</span>
<span id="cb2-11">    exponent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> diff_cov_inv, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-12">    </span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the normalization factor</span></span>
<span id="cb2-14">    norm_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.linalg.det(cov))</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the Gaussian function</span></span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.exp(exponent) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> norm_factor</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the grid limits and resolution</span></span>
<span id="cb2-20">X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>]</span>
<span id="cb2-21">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dstack((X, Y))</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb2-24">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-25">eigenvalues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example eigenvalues</span></span>
<span id="cb2-26">principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example principal axis</span></span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the principal axis</span></span>
<span id="cb2-29">principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> principal_axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.linalg.norm(principal_axis)</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the covariance matrix</span></span>
<span id="cb2-32">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(eigenvalues)</span>
<span id="cb2-33">orthogonal_complement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>principal_axis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], principal_axis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb2-34">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack((principal_axis, orthogonal_complement))</span>
<span id="cb2-35">cov <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Q.T</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Gaussian function over the grid</span></span>
<span id="cb2-38">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multivariate_gaussian(pos, mean, cov)</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the Sobel operators for x and y derivatives</span></span>
<span id="cb2-41">Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-42">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb2-43">                [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb2-44"></span>
<span id="cb2-45">Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-46">                [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-47">                [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span></span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the Sobel filters to compute the derivatives</span></span>
<span id="cb2-50">Zdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convolve(Z, Kdx, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'constant'</span>, cval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-51">Zdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convolve(Z, Kdy, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'constant'</span>, cval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb2-52"></span>
<span id="cb2-53"></span>
<span id="cb2-54">plt.contourf(X, Y, Z, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb2-55">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian Distribution'</span>)</span>
<span id="cb2-56">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-57">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-58">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-59">plt.savefig(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.png'</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, bbox_inches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tight'</span>)</span>
<span id="cb2-60"></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gaussian and its derivatives</span></span>
<span id="cb2-62">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>))</span>
<span id="cb2-63"></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the Gaussian</span></span>
<span id="cb2-65">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-66">plt.contourf(X, Y, Z, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb2-67">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian Distribution'</span>)</span>
<span id="cb2-68">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-69">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-70">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-71"></span>
<span id="cb2-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the derivative in x</span></span>
<span id="cb2-73">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-74">plt.contourf(X, Y, Zdx, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RdBu'</span>)</span>
<span id="cb2-75">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Derivative in X (Sobel Filter)'</span>)</span>
<span id="cb2-76">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-77">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-78">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-79"></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the derivative in y</span></span>
<span id="cb2-81">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-82">plt.contourf(X, Y, Zdy, levels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RdBu'</span>)</span>
<span id="cb2-83">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Derivative in Y (Sobel Filter)'</span>)</span>
<span id="cb2-84">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-axis'</span>)</span>
<span id="cb2-85">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-axis'</span>)</span>
<span id="cb2-86">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb2-87"></span>
<span id="cb2-88">plt.tight_layout()</span>
<span id="cb2-89">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="mv-plot-1" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/mv-plot-output-1.png" width="624" height="449" class="figure-img"></p>
<figcaption>Multivariate Gaussian and its Derivatives</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/mv-plot-output-2.png" id="mv-plot-2" width="748" height="230" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="extending-to-combination-of-gaussian-and-derivative" class="level3">
<h3 class="anchored" data-anchor-id="extending-to-combination-of-gaussian-and-derivative">Extending to Combination of Gaussian and Derivative</h3>
<p>We can compute the MV gaussian from the inverse covariance matrix <img src="https://latex.codecogs.com/png.latex?C"> with a mean of <img src="https://latex.codecogs.com/png.latex?%5Cmu=0"> along with a dimensional scaling metric <img src="https://latex.codecogs.com/png.latex?t">. For the purposes of forming interesting and varied PSFs, we include the linear combination of the gaussian and a Sobel operator to axpproximate the derivative of the gaussian.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AS_x%20&amp;=%20%5Cfrac%7B1%7D%7B4%7D%20%5Cbegin%7Bbmatrix%7D%20-1%20&amp;%200%20&amp;%201%20%5C%5C%20-2%20&amp;%200%20&amp;%202%20%5C%5C%20-1%20&amp;%200%20&amp;%201%20%5Cend%7Bbmatrix%7D%20%5C%5C%0AS_y%20&amp;=%20%5Cfrac%7B1%7D%7B4%7D%20%5Cbegin%7Bbmatrix%7D%20-1%20&amp;%20-2%20&amp;%20-1%20%5C%5C%200%20&amp;%200%20&amp;%200%20%5C%5C%201%20&amp;%202%20&amp;%201%20%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>These operators act like edge detection or derivatives. The <img src="https://latex.codecogs.com/png.latex?n_0">, <img src="https://latex.codecogs.com/png.latex?n_x">, and <img src="https://latex.codecogs.com/png.latex?n_y"> parameters in the code are used to scale the gaussian and the derivatives.</p>
<div id="bb04fe4e" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> gaussianConv(nn.Module):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch module that applies a Gaussian convolution to an input image using </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a parameterized Gaussian Point Spread Function (PSF). The PSF is derived </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from a covariance matrix and the derivatives of the Gaussian are computed </span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for edge detection.</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        C (torch.Tensor): Inverse of covariance matrix used to define the shape of the Gaussian.</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        t (float, optional): Scaling factor for the Gaussian, default is np.exp(5).</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n0 (float, optional): Scaling factor for the original PSF, default is 1.</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nx (float, optional): Scaling factor for the derivative along the x-axis, default is 1.</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ny (float, optional): Scaling factor for the derivative along the y-axis, default is 1.</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(gaussianConv, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-17"></span>
<span id="cb3-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C</span>
<span id="cb3-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t</span>
<span id="cb3-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n0</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx</span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ny</span>
<span id="cb3-23"></span>
<span id="cb3-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image):</span>
<span id="cb3-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Apply the Gaussian convolution and derivatives to an input image.</span></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method performs convolution of the input image with a Gaussian</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Point Spread Function (PSF) that includes the original Gaussian and</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        its derivatives along x and y axes. The convolution is performed</span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        using the Fourier Transform for efficiency.</span></span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch.Tensor): Input image tensor of shape (Batch, Channels, Height, Width).</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            torch.Tensor: The convolved image of the same shape as the input.</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the PSF and calculate the center shift required for alignment</span></span>
<span id="cb3-41">        P, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.psfGauss(image.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], image.device)</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shift the PSF so that its center aligns with the origin (top-left corner)</span></span>
<span id="cb3-44">        P_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(P, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb3-45"></span>
<span id="cb3-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Fourier Transform of the shifted PSF</span></span>
<span id="cb3-47">        S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(P_shifted)</span>
<span id="cb3-48"></span>
<span id="cb3-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Fourier Transform of the input image</span></span>
<span id="cb3-50">        I_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.fft.fft2(image)</span>
<span id="cb3-51"></span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiply the Fourier Transforms element-wise (convolution theorem with Hadamard product)</span></span>
<span id="cb3-53">        B_fft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> I_fft</span>
<span id="cb3-54"></span>
<span id="cb3-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the inverse Fourier Transform to get back to the spatial domain</span></span>
<span id="cb3-56">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.real(torch.fft.ifft2(B_fft))</span>
<span id="cb3-57"></span>
<span id="cb3-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the convolved image</span></span>
<span id="cb3-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> B</span>
<span id="cb3-60"></span>
<span id="cb3-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> psfGauss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb3-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Generate the Gaussian PSF and its derivatives.</span></span>
<span id="cb3-64"></span>
<span id="cb3-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dim (int): Dimension size (assumes square dimensions).</span></span>
<span id="cb3-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            device (str, optional): Device to create tensors on, default is 'cpu'.</span></span>
<span id="cb3-68"></span>
<span id="cb3-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple:</span></span>
<span id="cb3-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                - PSF (torch.Tensor): The combined PSF including derivatives.</span></span>
<span id="cb3-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                - center (list): Shifts required to align the PSF with the origin.</span></span>
<span id="cb3-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the size of the PSF kernel (assumed to be square)</span></span>
<span id="cb3-75">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb3-76">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dim</span>
<span id="cb3-77"></span>
<span id="cb3-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a meshgrid of (X, Y) coordinates</span></span>
<span id="cb3-79">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb3-80">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb3-81">        X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb3-82">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb3-83">        Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, m, n)</span></span>
<span id="cb3-84"></span>
<span id="cb3-85">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract elements from the covariance matrix</span></span>
<span id="cb3-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming self.C is a 2x2 tensor</span></span>
<span id="cb3-87">        cx, cy, cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.C[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-88"></span>
<span id="cb3-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the Gaussian PSF using the meshgrid and covariance elements</span></span>
<span id="cb3-90">        PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cxy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y))</span>
<span id="cb3-91"></span>
<span id="cb3-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the PSF so that its absolute sum is 1</span></span>
<span id="cb3-93">        PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PSF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(PSF.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>())</span>
<span id="cb3-94"></span>
<span id="cb3-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define derivative kernels (Sobel operators) for edge detection</span></span>
<span id="cb3-96">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-97">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb3-98">                            [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-99">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-100">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb3-101">                            [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PSF0.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-102"></span>
<span id="cb3-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape kernels to match convolution requirements</span></span>
<span id="cb3-104">        Kdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdx.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb3-105">        Kdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Kdy.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape: (1, 1, 3, 3)</span></span>
<span id="cb3-106"></span>
<span id="cb3-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convolve the PSF with the derivative kernels to obtain derivatives</span></span>
<span id="cb3-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Padding ensures the output size matches the input size</span></span>
<span id="cb3-109">        PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdx, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-110">        PSFdy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.conv2d(PSF0, Kdy, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-111"></span>
<span id="cb3-112">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the original PSF and its derivatives using the scaling factors</span></span>
<span id="cb3-113">        PSF_combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSF0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ny <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PSFdy</span>
<span id="cb3-114"></span>
<span id="cb3-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the center shift required to align the PSF with the origin</span></span>
<span id="cb3-116">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-117"></span>
<span id="cb3-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the combined PSF and center shift</span></span>
<span id="cb3-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PSF_combined, center</span></code></pre></div>
</details>
</div>
</section>
<section id="creating-a-toy-dataset" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-toy-dataset">Creating a Toy Dataset</h3>
<p>Often in computational science we test our strategies on toy datasets, simplified data that allows for easier debugging and understanding of the problem at task. In this case, rather than use a real image, we construct a geometric image that will be easier to analyse visually for its correctness when it comes to denoising and deblurring. The dataset is also dimensioned to have a batch and color channel to follow some of the conventions for working with torch tensors, and later some machine learning frameworks. That is <img src="https://latex.codecogs.com/png.latex?B%20%5Ctimes%20C%20%5Ctimes%20H%20%5Ctimes%20W">, with a single sample, single channel, and a 256x256 image having dimensions <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201%20%5Ctimes%20256%20%5Ctimes%20256">.</p>
<div id="cell-toy-dataset" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb4-2">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-3">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-6">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="toy-dataset" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/toy-dataset-output-1.png" width="276" height="268" class="figure-img"></p>
<figcaption>A sample toy dataset for image denoising and deblurring.</figcaption>
</figure>
</div>
</div>
</div>
<p>This simple image is a high and a low signal shown as two square regions, which we will try to recover after applying a point spread function to it (the forward model). The forward model is the convolution of the image with the PSF.</p>
<div id="cell-forward-model" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb5-2">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb5-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb5-7">plt.colorbar()</span>
<span id="cb5-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-9">plt.imshow(y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb5-10">plt.colorbar()</span>
<span id="cb5-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div id="forward-model" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/forward-model-output-2.png" width="651" height="402" class="figure-img"></p>
<figcaption>Forward model for image denoising and deblurring.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="forming-a-convolution-matrix" class="level3">
<h3 class="anchored" data-anchor-id="forming-a-convolution-matrix">Forming a Convolution Matrix</h3>
<p>Back to the idea of forming a Toeplitz matrix, we first flatten the data to 1D and then recover the matrix in one of two ways. We can work in the spatial domain where the first row of the matrix is determined by the 1D convolution for the first element, then slide the row by one to form the matrix. The matrix can be quite large, since an <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m"> image will have <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> elements once flattened, requiring a <img src="https://latex.codecogs.com/png.latex?(n%5Ctimes%20m)%20%5Ctimes%20(n%5Ctimes%20m)"> matrix. A reduction in dimension to the <img src="https://latex.codecogs.com/png.latex?32%20%5Ctimes%2032"> image will help with the computation.</p>
<p>Note that we are working with a rolling PSF which has a strange effect in that it assumes a periodic boundary condition in both <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">. When it comes to convolution, there are many different ways to treat the boundary condition, such as using zero padding or mirroring the boundary. Coding this by hand is a good exercise to understand the convolution operation, but not the purpose of this exercise.</p>
<section id="direct-recovery-of-convolution-matrix" class="level4">
<h4 class="anchored" data-anchor-id="direct-recovery-of-convolution-matrix">Direct Recovery of Convolution Matrix</h4>
<div id="cell-convolution-matrix" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb7-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dim, dim)</span>
<span id="cb7-3">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-4">x[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">Amv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gaussianConv(C, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,n0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,  ny<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the image and the PSF</span></span>
<span id="cb7-9">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten()</span>
<span id="cb7-10"></span>
<span id="cb7-11">kernel, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv.psfGauss(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a square conv kernel </span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since we are using the conv kernel as a filter operation, we use the transpose of the kernel</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to fill the convolution matrix. </span></span>
<span id="cb7-15"></span>
<span id="cb7-16">kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Roll shifts the kernel from the center of the box to the top left corner</span></span>
<span id="cb7-18">kernel_shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(kernel, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb7-19"></span>
<span id="cb7-20">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-21">plt.imshow(kernel[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb7-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PSF Centered'</span>)</span>
<span id="cb7-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-24">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PSF Shifted with Roll'</span>)</span>
<span id="cb7-25">plt.imshow(kernel_shifted[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the kernel</span></span>
<span id="cb7-28">kernel_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_shifted.flatten()</span>
<span id="cb7-29"></span>
<span id="cb7-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Form the convolution matrix</span></span>
<span id="cb7-31">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_flat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-32">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_flat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-33">A_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n, n)</span>
<span id="cb7-34"></span>
<span id="cb7-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb7-36">    A_conv[i, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.roll(kernel_flat, shifts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, dims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb7-37"></span>
<span id="cb7-38">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-39">plt.imshow(A_conv)</span>
<span id="cb7-40">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Convolution Matrix'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="convolution-matrix" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/convolution-matrix-output-1.png" width="617" height="226" class="figure-img"></p>
<figcaption>Forming a convolution matrix for the forward model.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="recovery-using-linearity-of-operator" class="level4">
<h4 class="anchored" data-anchor-id="recovery-using-linearity-of-operator">Recovery Using Linearity of Operator</h4>
<p>Since the convolution operation that is being performed is linear, one way to recover the matrix operator under this assumption is to pass through the basis vectors and recover the column vectors in this fashion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20a_1%20%5Cmid%20a_2%20%5Cmid%20%5Cldots%20%5Cmid%20a_n%20%5Cend%7Bbmatrix%7D%20%5Cmathbf%7Be%7D_i%20=%20%5Cmathbf%7BA%7D%20%5Cmathbf%7Be%7D_i%20%20=%20%5Cmathbf%7Ba%7D_i"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Be%7D_i"> is the <img src="https://latex.codecogs.com/png.latex?i">th basis vector.</p>
<div id="cell-convolution-matrix-2" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">A_conv_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n, n)</span>
<span id="cb8-2"></span>
<span id="cb8-3">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb8-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb8-6">    e_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x)</span>
<span id="cb8-7">    e_ij[:,:, i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb8-8">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(e_ij)</span>
<span id="cb8-9">    A_conv_lin[:, k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.flatten()</span>
<span id="cb8-10">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-13">plt.imshow(A_conv_lin)</span>
<span id="cb8-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Convolution Matrix (Linear)'</span>)</span>
<span id="cb8-15">plt.colorbar()</span>
<span id="cb8-16">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-17">plt.imshow(A_conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A_conv_lin)</span>
<span id="cb8-18">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Difference from Direct'</span>)</span>
<span id="cb8-19">plt.colorbar()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="convolution-matrix-2" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/convolution-matrix-2-output-1.png" width="659" height="400" class="figure-img"></p>
<figcaption>Forming a convolution matrix for the forward model using linearity.</figcaption>
</figure>
</div>
</div>
</div>
<p>Now comparing this method against the known convolution result using the class defined earlier with the forward model:</p>
<div id="961a2bce" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">b_forward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span>
<span id="cb9-2"></span>
<span id="cb9-3">b_mat_toeplitz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_flat</span>
<span id="cb9-4">b_mat_linear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv_lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_flat</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-7">plt.imshow(b_forward[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:])</span>
<span id="cb9-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-9">plt.imshow(b_mat_toeplitz.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb9-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb9-11">plt.imshow(b_mat_linear.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-9-output-1.png" width="604" height="208" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that there are some differences between the two methods but in principle they should be the same, (Not sure where the difference is coming from). The important method is actually the one which extracts the columns, as it is more generalizable. So we will continue with that.</p>
<div id="final-conv-matrix" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_conv_lin</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="least-squares-recovery-with-svd-and-pseudoinverse" class="level2">
<h2 class="anchored" data-anchor-id="least-squares-recovery-with-svd-and-pseudoinverse">Least Squares Recovery with SVD and Pseudoinverse</h2>
<p>Now that we have a matrix operator recovered we can formulate the forward problem as <img src="https://latex.codecogs.com/png.latex?A%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D"> with our known <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D">, and we want to recover <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">. To do this we use the SVD decomposition to gather the pseudo inverse. We can decide to filter out some of the singular values that are very small to improve the conditioning on the matrix as well, using a cutoff value for example.</p>
<section id="svd-decomposition" class="level3">
<h3 class="anchored" data-anchor-id="svd-decomposition">SVD Decomposition</h3>
<div id="492131e8" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">U, S, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat.to(torch.float64))</span>
<span id="cb11-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amv(x)</span></code></pre></div>
</details>
</div>
<p>Now we make a log plot of the singular values to see how they decay, noting that we lose numerical precision around the <img src="https://latex.codecogs.com/png.latex?10%5E%7B-6%7D"> mark. We can also asses what the frobenius norm of the difference between the original matrix and the reconstructed matrix is to get a sense of the error in the decomposition and reconstruction.</p>
<div id="cell-svd-decomposition" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plt.semilogy(S)</span>
<span id="cb12-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Singular Value Index'</span>)</span>
<span id="cb12-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Singular Value'</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.mse_loss(Amat, U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> V.T)</span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The loss is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>The loss is 1.812403923995022e-34</code></pre>
</div>
<div class="cell-output cell-output-display">
<div id="svd-decomposition" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/svd-decomposition-output-2.png" width="642" height="429" class="figure-img"></p>
<figcaption>SVD Decomposition of the Convolution Matrix.</figcaption>
</figure>
</div>
</div>
</div>
<p>The loss is quite small which is a good sign that the decomposition is working well within the numerical precision of the machine.</p>
</section>
<section id="initial-attempt-at-pseudoinverse" class="level3">
<h3 class="anchored" data-anchor-id="initial-attempt-at-pseudoinverse">Initial Attempt at Pseudoinverse</h3>
<p>To recover the original image data we first naively try to invert the matrix to see what happens.</p>
<div id="cell-naive-pseudoinverse" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.solve(Amat,b.reshape(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb14-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-3">plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb14-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Naive Inverse'</span>)</span>
<span id="cb14-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-6">plt.imshow(x.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb14-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="naive-pseudoinverse" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/naive-pseudoinverse-output-1.png" width="604" height="315" class="figure-img"></p>
<figcaption>Naive Pseudoinverse Recovery of the Original Image.</figcaption>
</figure>
</div>
</div>
</div>
<p>Wow, not even close! This is because the matrix is so ill conditioned that it is effectively low rank and not invertible. We can improve the situation by filtering out the singular values that are very small.</p>
</section>
<section id="pseudoinverse-with-filtering" class="level3">
<h3 class="anchored" data-anchor-id="pseudoinverse-with-filtering">Pseudoinverse with Filtering</h3>
<p>We can filter out the poor conditioning singular values and exclude those values from the inversion. To get an idea of what the values are doing, we can plot the first few singular values and the corresponding singular vector that they project onto. In the case of the SVD the most important information about the matrix is captured in the left-most vectors of the matrix <img src="https://latex.codecogs.com/png.latex?U">.</p>
<div id="1a36578d" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb15-3">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-4">  plt.imshow(U[:,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb15-5">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-14-output-1.png" width="603" height="158" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>For the inverse problem, the most import singular values are conversely found in the left-most vectors of the matrix <img src="https://latex.codecogs.com/png.latex?V">. We can also check what the right-most vectors are doing, as they will blow up in value when inverting small singular values. They are high frequency modes of the image, creating the reconstruction issues when they are subjected to error in numerical precision.</p>
<div id="9e5aaa70" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb16-3">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-4">  plt.imshow(V[:,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb16-5">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-6">plt.show()</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb16-9">  plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-10">  plt.imshow(V[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)].reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb16-11">  plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mode </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>V<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-15-output-1.png" width="603" height="158" class="figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/cell-15-output-2.png" width="603" height="158" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>These modes are the most important ones, as they contain the big-picture detail without the high frequency noise. We can now filter out the singular values that are very small and invert the matrix to recover the original image.</p>
<div id="cell-pseudoinverse-filter" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb17-2">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb17-3">thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>]</span>
<span id="cb17-4"></span>
<span id="cb17-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the figure size as needed</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(thresholds):</span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the singular values</span></span>
<span id="cb17-9">    S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S.clone()</span>
<span id="cb17-10">    S_filtered[S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-11"></span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reciprocal of the filtered singular values</span></span>
<span id="cb17-13">    S_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(S_filtered)</span>
<span id="cb17-14">    non_zero_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-15">    S_inv[non_zero_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S_filtered[non_zero_mask]</span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat</span></span>
<span id="cb17-18">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S_inv) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.T</span>
<span id="cb17-19"></span>
<span id="cb17-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the original image</span></span>
<span id="cb17-21">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_flat</span>
<span id="cb17-22"></span>
<span id="cb17-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reconstruction error</span></span>
<span id="cb17-24">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_flat, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fro'</span>).item()</span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the reconstructed image in the appropriate subplot</span></span>
<span id="cb17-27">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx + 1 because subplot indices start at 1</span></span>
<span id="cb17-28">    plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb17-29">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Threshold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>threshold<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-30">    plt.colorbar()</span>
<span id="cb17-31">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally turn off axis ticks and labels</span></span>
<span id="cb17-32"></span>
<span id="cb17-33">plt.tight_layout()</span>
<span id="cb17-34">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-output-1.png" width="661" height="464" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Filtering.</figcaption>
</figure>
</div>
</div>
</div>
<p>Looking at the results, around the <img src="https://latex.codecogs.com/png.latex?10%5E%7B-7%7D"> mark we start to a peak level of recovery, as measured by the error in the Frobenius norm of the reconstruction. But what happens when we add noise to the data signal?</p>
</section>
<section id="adding-noise-to-the-signal" class="level3">
<h3 class="anchored" data-anchor-id="adding-noise-to-the-signal">Adding Noise to the Signal</h3>
<p>Now we add some noise to the signal and try least squares again for the direct solution</p>
<div id="cell-pseudoinverse-filter-noised" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.flatten().to(torch.float64)</span>
<span id="cb18-2">x_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.flatten().to(torch.float64)</span>
<span id="cb18-3">Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat.to(torch.float64)</span>
<span id="cb18-4"></span>
<span id="cb18-5">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span></span>
<span id="cb18-6">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(b_flat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> alpha</span>
<span id="cb18-7"></span>
<span id="cb18-8">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.eye(Amat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-9">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linalg.solve(H, Amat.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise))</span>
<span id="cb18-10"></span>
<span id="cb18-11">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-12">plt.imshow(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb18-14">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-15">plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb18-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reconstructed Image'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter-noised" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-noised-output-1.png" width="604" height="315" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>The reconstruction is not very good, the noise has been amplifed all over the image. We can try the pseudoinverse method again with the noise added to the signal.</p>
<div id="cell-pseudoinverse-filter-noised-recovery" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">Amat_noisy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Amat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.eye(Amat.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb19-2">Un, Sn, Vn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.svd(Amat_noisy)</span>
<span id="cb19-3"></span>
<span id="cb19-4">thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.005</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span>]</span>
<span id="cb19-5"></span>
<span id="cb19-6">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the figure size as needed</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(thresholds):</span>
<span id="cb19-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the singular values</span></span>
<span id="cb19-10">    S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sn.clone()</span>
<span id="cb19-11">    S_filtered[S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> threshold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-12"></span>
<span id="cb19-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reciprocal of the filtered singular values</span></span>
<span id="cb19-14">    S_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(S_filtered)</span>
<span id="cb19-15">    non_zero_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-16">    S_inv[non_zero_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S_filtered[non_zero_mask]</span>
<span id="cb19-17"></span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the pseudoinverse of Amat</span></span>
<span id="cb19-19">    A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Vn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> torch.diag(S_inv) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Un.T</span>
<span id="cb19-20"></span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruct the original image</span></span>
<span id="cb19-22">    xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_pinv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (b_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise)</span>
<span id="cb19-23"></span>
<span id="cb19-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the reconstruction error</span></span>
<span id="cb19-25">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.norm(xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_flat, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fro'</span>).item()</span>
<span id="cb19-26"></span>
<span id="cb19-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the reconstructed image in the appropriate subplot</span></span>
<span id="cb19-28">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># idx + 1 because subplot indices start at 1</span></span>
<span id="cb19-29">    plt.imshow(xhat.reshape(x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]))</span>
<span id="cb19-30">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Threshold </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>threshold<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-31">    plt.colorbar()</span>
<span id="cb19-32">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally turn off axis ticks and labels</span></span>
<span id="cb19-33"></span>
<span id="cb19-34">plt.tight_layout()</span>
<span id="cb19-35">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="pseudoinverse-filter-noised-recovery" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://chipnbits.github.io/content/eosc555/lectures/lecture2/index_files/figure-html/pseudoinverse-filter-noised-recovery-output-1.png" width="661" height="462" class="figure-img"></p>
<figcaption>Pseudoinverse Recovery of the Original Image with Noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>The small addition of noise is quite significant in the recovery threshold for reconstruction. Using a higher threshold for the singular values becomes important when dealing with noise in the signal. Previously numerical precision was the main issue, but now the measurement noise is the main issue.</p>


</section>
</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>SVD</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture2/</guid>
  <pubDate>Sun, 15 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture2/imgs/gaussian_plot.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Lecture 1: Introduction to Inverse Theory</title>
  <dc:creator>Simon Ghyselincks</dc:creator>
  <link>https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/</link>
  <description><![CDATA[ 




<section id="what-is-inverse-theory" class="level1">
<h1>What is Inverse Theory?</h1>
<p>Inverse theory is a set of mathematical techniques used to infer the properties of a physical system from observations of its output. It is a fundamental tool in many scientific disciplines, including geophysics, seismology, and medical imaging. Inverse theory is used to solve a wide range of problems, such as:</p>
<ul>
<li><strong>Parameter Estimation</strong>: Determining the values of unknown parameters in a model that best fit the observed data.</li>
<li><strong>System Identification</strong>: Identifying the structure and dynamics of a system from input-output data.</li>
<li><strong>Image Reconstruction</strong>: Reconstructing an image or object from noisy or incomplete measurements.</li>
</ul>
<p>What many of these tasks have in common is that we are working with incomplete information. There is a <em>forward</em> problem that has generated the data that we observe <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> from a set of input data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D">, and we want to infer the <em>inverse</em> problem that generated the data. However the inverse problem is often ill-posed, meaning that there are multiple solutions that can fit the data equally well. Inverse theory provides a framework for finding the best solution to these problems.</p>
<p>The forward problem can be described for example as a differetial equation or operator <img src="https://latex.codecogs.com/png.latex?L"> that takes in some measured parameters <img src="https://latex.codecogs.com/png.latex?u"> with model parameters <img src="https://latex.codecogs.com/png.latex?x"> :</p>
<p><img src="https://latex.codecogs.com/png.latex?%20L(x)%5Bu%5D%20=%20q%20%5Ciff%20u%20=%20L%5E%7B-1%7D(x)%5Bq%5D%20"></p>
<p>For example making measurements of an electromagnetic field in correspondence to conductivity values that are underground we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cnabla%20%5Csigma%20%5Cnabla%20u%20=%20q%20+%20%5Ctext%7BBC%7D"></p>
<p>We measure the <img src="https://latex.codecogs.com/png.latex?u"> at some points and use that to try and form an estimate of the conductivity <img src="https://latex.codecogs.com/png.latex?%5Csigma">. The forward problem is to solve for <img src="https://latex.codecogs.com/png.latex?u"> given <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the inverse problem is to solve for <img src="https://latex.codecogs.com/png.latex?%5Csigma"> given <img src="https://latex.codecogs.com/png.latex?u">. The forward problem is often well-posed and the inverse problem is often ill-posed.</p>
<p>For a computational framework we can discretize the the equation so that the operator is a matrix <img src="https://latex.codecogs.com/png.latex?A"> and the data is a vector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cunderbrace%7BA%7D_%7B%5Ctext%7BForward%20Map%7D%7D%20%5Cunderbrace%7B%5Cvec%7Bx%7D%7D_%7B%5Ctext%7BModel%20Parameters%7D%7D%20+%20%5Cepsilon%20=%20%5Cunderbrace%7B%5Cvec%7Bb%7D%7D_%7B%5Ctext%7BObserved%20Data%7D%7D%20"></p>
<p>In this case we may have a sparse set of measurements <img src="https://latex.codecogs.com/png.latex?b"> and a large set of <img src="https://latex.codecogs.com/png.latex?x"> making the problem underdetermined. The goal of inverse theory is to find the best estimate of <img src="https://latex.codecogs.com/png.latex?x"> given <img src="https://latex.codecogs.com/png.latex?b">.</p>
<section id="example-the-triathlon-problem" class="level3">
<h3 class="anchored" data-anchor-id="example-the-triathlon-problem">Example: The Triathlon Problem</h3>
<p>To illustrate the concept of inverse theory, consider the following example:</p>
<blockquote class="blockquote">
<p>Suppose that you have agreed to meet a friend to watch them during a triathlon race but you showed up late and missed the start. They are expecting for you to have been there at some point during the time at which they were changing from a running phase to a cycle phase. They expect you to know the time at which they made the transition. However you only know the overall start time and finish time of the race.</p>
<p>If the race starts at time <img src="https://latex.codecogs.com/png.latex?t=0"> and then ends at time <img src="https://latex.codecogs.com/png.latex?t=b"> how do you use this information to deduce the actual time <img src="https://latex.codecogs.com/png.latex?t_r%20%5Cin%20%5B0,b%5D"> at which they crossed the transition zone of the race?</p>
</blockquote>
<p>The first restriction on feasible solutions is the domain <img src="https://latex.codecogs.com/png.latex?%5B0,b%5D"> so that we know that <img src="https://latex.codecogs.com/png.latex?0%3Ct_r%3Cb">.</p>
<p>After this there are some other techniquest that we could use to better inform the probability of the occurence at different times. For example, we might have a good idea of their fitness level or average running speed from previous experience. Or in the abscence of this information there might be average times for the competitors that are available to further inform the problem and reduce the amount of error in the estimate.</p>
</section>
<section id="the-singular-value-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="the-singular-value-decomposition">The Singular Value Decomposition</h2>
<p>For cases where the matrix <img src="https://latex.codecogs.com/png.latex?A"> is not full rank, the singular value decomposition (SVD) provides a more general framework for solving the least squares problem. The SVD decomposes the matrix <img src="https://latex.codecogs.com/png.latex?A"> into three matrices <img src="https://latex.codecogs.com/png.latex?U">, <img src="https://latex.codecogs.com/png.latex?%5CSigma">, and <img src="https://latex.codecogs.com/png.latex?V"></p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20U%20%5CSigma%20V%5ET%20"></p>
<p>The matrices have the following special properties:</p>
<ul>
<li><em>Orthogonal Subspaces</em>: <img src="https://latex.codecogs.com/png.latex?U"> and <img src="https://latex.codecogs.com/png.latex?V"> are orthogonal matrices, meaning that <img src="https://latex.codecogs.com/png.latex?U%5ETU%20=%20I"> and <img src="https://latex.codecogs.com/png.latex?V%5ETV%20=%20I">, that is <img src="https://latex.codecogs.com/png.latex?U%5ET%20=%20U%5E%7B-1%7D"> and $V^T = V^{-1}.</li>
<li><em>Ordered Singular Values</em>: <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is a diagonal matrix with non-negative values on the diagonal, known as the singular values of <img src="https://latex.codecogs.com/png.latex?A">. The singular values are ordered such that <img src="https://latex.codecogs.com/png.latex?%5Csigma_1%20%5Cgeq%20%5Csigma_2%20%5Cgeq%20%5Cldots%20%5Cgeq%20%5Csigma_r">. The number of non-zero singular values is equal to the rank of <img src="https://latex.codecogs.com/png.latex?A">.</li>
</ul>
<p>Supposed that we have a <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Brank%7D(A)%20=%20r"> matrix <img src="https://latex.codecogs.com/png.latex?A"> which maps from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em%5Crightarrow%20%5Cmathbb%7BR%7D%5En">. A fundamental way to view this mapping is as a composition of three linear transformations: a rotation <img src="https://latex.codecogs.com/png.latex?V">, a scaling <img src="https://latex.codecogs.com/png.latex?%5CSigma">, and another rotation <img src="https://latex.codecogs.com/png.latex?U">. The orthogonal matrix <img src="https://latex.codecogs.com/png.latex?V"> has the property that all of its rows and columns are orthogonal to each other, and the vectors themselves are normalized to <img src="https://latex.codecogs.com/png.latex?1">. To see this property of the orthogonal matrix consider that <img src="https://latex.codecogs.com/png.latex?V%5ET%20V%20=%20I"> and <img src="https://latex.codecogs.com/png.latex?V%20V%5ET%20=%20I">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AZ%20=%20V%5ET%20V%20&amp;=%20I%20%5C%5C%0Az_%7Bij%7D%20=%20%5Clangle%20v_i,%20v_j%20%5Crangle%20&amp;=%20%5Cdelta_%7Bij%7D%20%5Cend%7Balign%7D%20"></p>
<p>Each of the elements of the matrix <img src="https://latex.codecogs.com/png.latex?V%5ET"> is the dot product of the <img src="https://latex.codecogs.com/png.latex?i">th and <img src="https://latex.codecogs.com/png.latex?j">th columns of <img src="https://latex.codecogs.com/png.latex?V">. The dotproduct of all vectors against themselves is <img src="https://latex.codecogs.com/png.latex?1"> and the dotproduct of any two different vectors is <img src="https://latex.codecogs.com/png.latex?0">. So from this we can see that all of the columns of <img src="https://latex.codecogs.com/png.latex?V"> are orthogonal to each other. The same property holds for <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p><img src="https://latex.codecogs.com/png.latex?V%5ET"> by our definition of <img src="https://latex.codecogs.com/png.latex?A"> must accept a vector from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em"> and the matrix is square, indicating an <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> matrix. The matrix <img src="https://latex.codecogs.com/png.latex?U"> must output a vector in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5En"> and the matrix is square, indicating an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix. The matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma"> must be <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> to map from <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5Em"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5En">.</p>
<p>In all its glory:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AA_%7Bn%20%5Ctimes%20m%7D%20&amp;=%20U_%7Bn%20%5Ctimes%20n%7D%20%5C,%20%5CSigma_%7Bn%20%5Ctimes%20m%7D%20%5C,%20V%5ET_%7Bm%20%5Ctimes%20m%7D%20%5C%5C%0A&amp;=%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7Cccc%7D%0A%5Cmathbf%7Bu%7D_1%20&amp;%20%5Ccdots%20&amp;%20%5Cmathbf%7Bu%7D_r%20&amp;%20%5Cmathbf%7Bu%7D_%7Br+1%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cmathbf%7Bu%7D_n%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20n%7D%0A%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%20&amp;%20%20&amp;%20%20%5C%5C%0A&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A&amp;%20%20&amp;%20%5Csigma_r%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20m%7D%0A%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7Cccc%7D%0A%5Cmathbf%7Bv%7D%5ET_1%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cmathbf%7Bv%7D%5ET_r%20%5C%5C%0A%5Cmathbf%7Bv%7D%5ET_%7Br+1%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%20%20%5Cmathbf%7Bv%7D%5ET_m%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bm%20%5Ctimes%20m%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>In this case the first <img src="https://latex.codecogs.com/png.latex?r"> columns of <img src="https://latex.codecogs.com/png.latex?U"> are the range of <img src="https://latex.codecogs.com/png.latex?A">, the rest of <img src="https://latex.codecogs.com/png.latex?U"> is filled with its orthogonal complement. The first <img src="https://latex.codecogs.com/png.latex?r"> columns of <img src="https://latex.codecogs.com/png.latex?V"> are the domain of <img src="https://latex.codecogs.com/png.latex?A">, the rest of <img src="https://latex.codecogs.com/png.latex?V"> is filled with its orthogonal complement. These are the four fundamental subspaces of the matrix <img src="https://latex.codecogs.com/png.latex?A">, more information on this can be found at: <a href="https://en.wikipedia.org/wiki/Singular_value_decomposition">Wikipedia: SVD</a></p>
<p>The matrices as shown above are for a rectangular <img src="https://latex.codecogs.com/png.latex?A"> where <img src="https://latex.codecogs.com/png.latex?n%3Em"> but the same properties hold for all <img src="https://latex.codecogs.com/png.latex?n,m">. Some of the singular values <img src="https://latex.codecogs.com/png.latex?%5Csigma_i"> may be zero, in which case the matrix <img src="https://latex.codecogs.com/png.latex?A"> is not full rank.</p>
<p>Another way to decompose the SVD is to write it as a sum of outer products that are scaled by the diagonal matrix of singular values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20%5Csum_%7Bi=1%7D%5Er%20%5Csigma_i%20%5Cmathbf%7Bu%7D_i%20%5Cmathbf%7Bv%7D_i%5ET%20"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%3E0"> then <img src="https://latex.codecogs.com/png.latex?v_i"> is not in the null space of <img src="https://latex.codecogs.com/png.latex?A"> because <img src="https://latex.codecogs.com/png.latex?A%20v_i%20=%20%5Csigma_i%20u_i">. If <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%20=%200"> then <img src="https://latex.codecogs.com/png.latex?v_i"> is in the null space of <img src="https://latex.codecogs.com/png.latex?A"> because <img src="https://latex.codecogs.com/png.latex?A%20v_i%20=%200">.</p>
<section id="the-pseudoinverse" class="level3">
<h3 class="anchored" data-anchor-id="the-pseudoinverse">The Pseudoinverse</h3>
<p>Back to the task of inverting <img src="https://latex.codecogs.com/png.latex?Ax%20+%20%5Cepsilon%20=%20b"> we can apply the SVD decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU%20%5CSigma%20V%5ET%20x%20+%20%5Cepsilon%20&amp;=%20b%20%5C%5C%0A%5CSigma%20V%5ET%20x%20+&amp;=%20U%5ET%20(b-%5Cepsilon)%20%5C%5C%0AV%20%5CSigma%5E%7B-1%7D%20U%5ET%20(b-%5Cepsilon)%20&amp;=%20x%5C%5C%0AA%5E+%20(b-%5Cepsilon)%20&amp;=%20%5Chat%7Bx%7D%0A%5Cend%7Balign%7D"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?A%5E+%20=%20V%20%5CSigma%5E%7B-1%7D%20U%5ET"> is the pseudoinverse of <img src="https://latex.codecogs.com/png.latex?A">. The pseudoinverse is a generalization of the matrix inverse for non-square matrices. We recover a square matrix by removing all of the absent or zero singular values from <img src="https://latex.codecogs.com/png.latex?%5CSigma"> and inverting the rest, giving an <img src="https://latex.codecogs.com/png.latex?r%20%5Ctimes%20r"> diagonal matrix whose inverse is simply the inverse of each element.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%20&amp;%20%20&amp;%20%20%5C%5C%0A&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A&amp;%20%20&amp;%20%5Csigma_r%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A0%20&amp;%20%5Ccdots%20&amp;%200%0A%5Cend%7Barray%7D%20%5Cright%5D_%7Bn%20%5Ctimes%20m%7D%0A%5Crightarrow%20%5Cleft%5B%20%5Cbegin%7Barray%7D%7Bccc%7D%0A%5Csigma_1%5E%7B-1%7D%20&amp;%20%20&amp;%20%20%5C%5C%0A%20%20&amp;%20%5Cddots%20&amp;%20%20%5C%5C%0A%20%20&amp;%20%20&amp;%20%5Csigma_r%5E%7B-1%7D%20%5C%5C%0A%20%20%5Cend%7Barray%7D%20%5Cright%5D_%7Br%20%5Ctimes%20r%7D"></p>
<p>Then <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20%5Csum_i%5EN%20%5Csigma_i%5E%7B-1%7D%20%5Cmathbf%7Bu%7D_i%5ET%20(b-%5Cepsilon)%20%5Cmathbf%7Bv%7D_i"> is the solution to the least squares problem. This can be solved also as a truncated sum since <img src="https://latex.codecogs.com/png.latex?0%3CN%3Cr">. In actual practice with real world measurement we end up with many singular values that may be effectively <img src="https://latex.codecogs.com/png.latex?0"> by nature of being very small relative to the noise in the data and the largest single value. We have that the solution <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> is a sum of <img src="https://latex.codecogs.com/png.latex?v_i"> components that form an orthogonal basis <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20%5Csum_i%20%5Cbeta_i%20v_i"> where <img src="https://latex.codecogs.com/png.latex?%5Cbeta_i%20=%20%5Cfrac%7Bu_i%5ET%20(b-%5Cepsilon)%7D%7B%5Csigma_i%7D">. These small singular values blow up in size when inverted and so extra truncation is often necessary to avoid numerical instability and excessive amplification of noise <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">.</p>
</section>
</section>
<section id="least-squares" class="level2">
<h2 class="anchored" data-anchor-id="least-squares">Least Squares</h2>
<p>Least squares and matrix inversion is a classic starting point for understanding inverse theory. Suppose that we have input data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D"> and output data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> that are related by a linear system of equations: <img src="https://latex.codecogs.com/png.latex?Ax%20=%20b"> where <img src="https://latex.codecogs.com/png.latex?A"> is a matrix of coefficients. In many cases, the system is overdetermined, meaning that there are more equations than unknowns. In this case, there is no exact solution to the system, and we must find the best solution that minimizes the error between the observed data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> and the predicted data <img src="https://latex.codecogs.com/png.latex?A%5Cvec%7Bx%7D">. In the simplest form of inversion that we can attempt, we can solve the least squares solution. In this case we reject all of the observed data that is from the null space of <img src="https://latex.codecogs.com/png.latex?A"> assuming a zero value for each of those parameters.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?A"> be a <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%202"> matrix and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> be a <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%201"> vector. The <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D"> that we are trying to solve for is a <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%201"> vector. The system of equations is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20%5Cbegin%7Bbmatrix%7D%20%20%5Cvec%7Ba%7D_1%20&amp;%20%5Cvec%7Ba%7D_2%20%5Cend%7Bbmatrix%7D%20%5Cquad%20%5Cvec%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D%20x_1%20%5C%5C%20x_2%20%20%5Cend%7Bbmatrix%7D%20%20%5Cquad%20%5Cvec%7Bb%7D%20=%20%5Cbegin%7Bbmatrix%7D%20b_1%20%5C%5C%20b_2%20%5C%5C%20b_3%20%5Cend%7Bbmatrix%7D%20"></p>
<p>In this case we have an <em>overdetermined</em> system with three equations, two unknowns, and three data samples. If the system of equations is full rank then we are trying to map from a 2D space to a 3D space: <img src="https://latex.codecogs.com/png.latex?A:%20%5Cmathbb%7BR%7D%5E2%20%5Crightarrow%20%5Cmathbb%7BR%7D%5E3">. In this case there is no exact solution to the system for any <img src="https://latex.codecogs.com/png.latex?b"> that is not in the column space of <img src="https://latex.codecogs.com/png.latex?A">.</p>
<p>Instead we can solve for the least squares solution <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D_%7BLS%7D"> by minimizing the error between the observed data <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bb%7D"> and the predicted data <img src="https://latex.codecogs.com/png.latex?A%5Cvec%7Bx%7D"> from the forward model.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cvec%7Bx%7D_%7BLS%7D%20=%20%5Carg%20%5Cmin_%7B%5Cvec%7Bx%7D%7D%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2%20"></p>
<p>We want to find the argument that minimizes the function <img src="https://latex.codecogs.com/png.latex?f(%5Cvec%7Bx%7D)%20=%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2">. By first order optimality conditions, the gradient of the function must be zero at the minimum.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0A%5Cnabla%20f(%5Cvec%7Bx%7D)%20&amp;=%200%20%5C%5C%0A%5Cnabla%20%7C%7CA%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D%7C%7C_2%5E2%20&amp;=%200%20%5C%5C%0A%5Cnabla%20(A%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D)%5ET%20(A%5Cvec%7Bx%7D%20-%20%5Cvec%7Bb%7D)%20&amp;=%200%20%5C%5C%0A%5Cnabla%20%5Cleft(%20%5Cvec%7Bx%7D%5ET%20A%5ET%20A%20%5Cvec%7Bx%7D%20-%202%20%5Cvec%7Bb%7D%5ET%20A%20%5Cvec%7Bx%7D%20+%20%5Cvec%7Bb%7D%5ET%20%5Cvec%7Bb%7D%20%5Cright)%20&amp;=%200%20%5C%5C%0A2%20A%5ET%20A%20%5Cvec%7Bx%7D%20-%202%20A%5ET%20%5Cvec%7Bb%7D%20&amp;=%200%20%5C%5C%0AA%5ET%20A%20%5Cvec%7Bx%7D%20&amp;=%20A%5ET%20%5Cvec%7Bb%7D%20%5C%5C%0A%5Cvec%7Bx%7D_%7BLS%7D%20&amp;=%20(A%5ET%20A)%5E%7B-1%7D%20A%5ET%20%5Cvec%7Bb%7D%0A%5Cend%7Balign%7D%20"></p>
<p>This is known as the normal equations for the least squares solution. We take a note of caution here that <img src="https://latex.codecogs.com/png.latex?A%5ET%20A"> must be invertible for this solution to exist. If <img src="https://latex.codecogs.com/png.latex?A"> is not full rank then the matrix <img src="https://latex.codecogs.com/png.latex?A%5ET%20A"> will not be invertible and other methods must be used.</p>
<p>We call the difference between the observed data and the predicted data the residual.</p>
<p><img src="https://latex.codecogs.com/png.latex?r%20=%20%5Cvec%7Bb%7D%20-%20A%5Cvec%7Bx%7D_%7BLS%7D"></p>
<p>Using this information, what we really want to minimize is the sum of the squares of the residuals: <img src="https://latex.codecogs.com/png.latex?%7C%7Cr%7C%7C_2%5E2">. This is the same as the sum of the squares of the errors in the data.</p>
<p>There is an altogether informative way to think about the minimization problem purely in terms of linear algebra and subspaces to derive the same normal equations.</p>
<div style="display: block; margin-left: auto; margin-right: auto; width: 50%; text-align: center;">
<img src="https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/imgs/ls-sol.svg" alt="" width="300">
<p>
<em>Least Squares Visual</em>
</p>
</div>
<p>We have the range of <img src="https://latex.codecogs.com/png.latex?A"> or image of <img src="https://latex.codecogs.com/png.latex?A"> as the subspace of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E3"> that is spanned by the columns of <img src="https://latex.codecogs.com/png.latex?A">. This subspace is rank <img src="https://latex.codecogs.com/png.latex?2"> because there are only two columns in <img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?R(A)%20%5Csubset%20%5Cmathbb%7BR%7D%5E3">. The inaccessible parts of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5E3"> are in the orthogonal complement of <img src="https://latex.codecogs.com/png.latex?R(A)">, <img src="https://latex.codecogs.com/png.latex?R(A)%5E%5Cperp">. Recalling that <img src="https://latex.codecogs.com/png.latex?R(A)%5E%5Cperp%20=%20N(A%5ET)"> we can diagram the solution to least squares as a minimization of the error vector <img src="https://latex.codecogs.com/png.latex?r"> in the orthogonal complement of <img src="https://latex.codecogs.com/png.latex?R(A)">.</p>
<p>As seen the <img src="https://latex.codecogs.com/png.latex?r"> vector is perpendicular to the <img src="https://latex.codecogs.com/png.latex?x_%7BLS%7D"> solution, the projection of <img src="https://latex.codecogs.com/png.latex?r"> onto <img src="https://latex.codecogs.com/png.latex?R(A)"> is zero. Since it is in a null space of <img src="https://latex.codecogs.com/png.latex?A%5ET"> then <img src="https://latex.codecogs.com/png.latex?A%5ET%20r%20=%200">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%20A%5ET%20%5Cleft%20(%20Ax_%7BLS%7D%20-%20b%20%5Cright%20)%20&amp;=%200%5C%5C%0AA%5ET%20A%20x_%7BLS%7D%20&amp;=%20A%5ET%20b%20%5C%5C%0A%5Cend%20%7Balign%7D%20"></p>
<p>So we recover the normal equations without using any of the machinery of calculus.</p>
<p>For a review on the four fundamental subspaces of a matrix see the UBC Math 307 notes on the topic: <a href="https://ubcmath.github.io/MATH307/orthogonality/complement.html">Math 307</a></p>


</section>
</section>
</section>

 ]]></description>
  <category>Optimization</category>
  <category>Inverse Theory</category>
  <category>Python</category>
  <category>Torch</category>
  <category>SVD</category>
  <guid>https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/</guid>
  <pubDate>Sat, 14 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://chipnbits.github.io/content/eosc555/lectures/lecture1-2/imgs/ls-sol.svg" medium="image" type="image/svg+xml"/>
</item>
</channel>
</rss>
